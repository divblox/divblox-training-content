Index: divblox/config/database/data_model_orm/generated/AllowedApiOperationGen.class.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?php\n/**\n * The abstract AllowedApiOperationGen class defined here is\n * code-generated and contains all the basic CRUD-type functionality as well as\n * basic methods to handle relationships and index-based loading.\n *\n * To use, you should use the AllowedApiOperation subclass which\n * extends this AllowedApiOperationGen class.\n *\n * Because subsequent re-code generations will overwrite any changes to this\n * file, you should leave this file unaltered to prevent yourself from losing\n * any information or code changes.  All customizations should be done by\n * overriding existing or implementing new methods, properties and variables\n * in the AllowedApiOperation class.\n *\n * @package divblox_app\n * @subpackage GeneratedDataObjects\n * @property-read integer $Id the value for intId (Read-Only PK)\n * @property boolean $IsActive the value for blnIsActive \n * @property integer $ApiKey the value for intApiKey \n * @property string $SearchMetaInfo the value for strSearchMetaInfo \n * @property integer $ApiOperation the value for intApiOperation \n * @property-read string $LastUpdated the value for strLastUpdated (Read-Only Timestamp)\n * @property integer $ObjectOwner the value for intObjectOwner \n * @property ApiKey $ApiKeyObject the value for the ApiKey object referenced by intApiKey \n * @property ApiOperation $ApiOperationObject the value for the ApiOperation object referenced by intApiOperation \n * @property-read boolean $__Restored whether or not this object was restored from the database (as opposed to created new)\n */\nclass AllowedApiOperationGen extends dxBaseClass implements IteratorAggregate {\n\n    ///////////////////////////////////////////////////////////////////////\n    // PROTECTED MEMBER VARIABLES and TEXT FIELD MAXLENGTHS (if applicable)\n    ///////////////////////////////////////////////////////////////////////\n\n    /**\n     * Protected member variable that maps to the database PK Identity column AllowedApiOperation.Id\n     * @var integer intId\n     */\n    protected $intId;\n    const IdDefault = null;\n\n\n    /**\n     * Protected member variable that maps to the database column AllowedApiOperation.IsActive\n     * @var boolean blnIsActive\n     */\n    protected $blnIsActive;\n    const IsActiveDefault = null;\n\n\n    /**\n     * Protected member variable that maps to the database column AllowedApiOperation.ApiKey\n     * @var integer intApiKey\n     */\n    protected $intApiKey;\n    const ApiKeyDefault = null;\n\n\n    /**\n     * Protected member variable that maps to the database column AllowedApiOperation.SearchMetaInfo\n     * @var string strSearchMetaInfo\n     */\n    protected $strSearchMetaInfo;\n    const SearchMetaInfoDefault = null;\n\n\n    /**\n     * Protected member variable that maps to the database column AllowedApiOperation.ApiOperation\n     * @var integer intApiOperation\n     */\n    protected $intApiOperation;\n    const ApiOperationDefault = null;\n\n\n    /**\n     * Protected member variable that maps to the database column AllowedApiOperation.LastUpdated\n     * @var string strLastUpdated\n     */\n    protected $strLastUpdated;\n    const LastUpdatedDefault = null;\n\n\n    /**\n     * Protected member variable that maps to the database column AllowedApiOperation.ObjectOwner\n     * @var integer intObjectOwner\n     */\n    protected $intObjectOwner;\n    const ObjectOwnerDefault = null;\n\n\n    /**\n     * Protected array of virtual attributes for this object (e.g. extra/other calculated and/or non-object bound\n     * columns from the run-time database query result for this object).  Used by InstantiateDbRow and\n     * GetVirtualAttribute.\n     * @var string[] $__strVirtualAttributeArray\n     */\n    protected $__strVirtualAttributeArray = array();\n\n    /**\n     * Protected internal member variable that specifies whether or not this object is Restored from the database.\n     * Used by Save() to determine if Save() should perform a db UPDATE or INSERT.\n     * @var bool __blnRestored;\n     */\n    protected $__blnRestored;\n\n    ///////////////////////////////\n    // PROTECTED MEMBER OBJECTS\n    ///////////////////////////////\n\n    /**\n     * Protected member variable that contains the object pointed by the reference\n     * in the database column AllowedApiOperation.ApiKey.\n     *\n     * NOTE: Always use the ApiKeyObject property getter to correctly retrieve this ApiKey object.\n     * (Because this class implements late binding, this variable reference MAY be null.)\n     * @var ApiKey objApiKeyObject\n     */\n    protected $objApiKeyObject;\n\n    /**\n     * Protected member variable that contains the object pointed by the reference\n     * in the database column AllowedApiOperation.ApiOperation.\n     *\n     * NOTE: Always use the ApiOperationObject property getter to correctly retrieve this ApiOperation object.\n     * (Because this class implements late binding, this variable reference MAY be null.)\n     * @var ApiOperation objApiOperationObject\n     */\n    protected $objApiOperationObject;\n\n\n    /**\n     * Initialize each property with default values from database definition\n     */\n    public function Initialize() {\n        $this->intId = AllowedApiOperation::IdDefault;\n        $this->blnIsActive = AllowedApiOperation::IsActiveDefault;\n        $this->intApiKey = AllowedApiOperation::ApiKeyDefault;\n        $this->strSearchMetaInfo = AllowedApiOperation::SearchMetaInfoDefault;\n        $this->intApiOperation = AllowedApiOperation::ApiOperationDefault;\n        $this->strLastUpdated = AllowedApiOperation::LastUpdatedDefault;\n        $this->intObjectOwner = AllowedApiOperation::ObjectOwnerDefault;\n    }\n\n    ///////////////////////////////\n    // CLASS-WIDE LOAD AND COUNT METHODS\n    ///////////////////////////////\n\n    /**\n     * Static method to retrieve the Database object that owns this class.\n     * @return dxDatabaseBase reference to the Database object that can query this class\n     */\n    public static function GetDatabase() {\n        return ProjectFunctions::$Database[1];\n    }\n\n    /**\n     * Load a AllowedApiOperation from PK Info\n     * @param integer $intId\n     * @param dxQueryClause[] $objOptionalClauses additional optional dxQueryClause objects for this query\n     * @return AllowedApiOperation\n     */\n    public static function Load($intId, $objOptionalClauses = null) {\n        $strCacheKey = false;\n        if (ProjectFunctions::$objCacheProvider && !$objOptionalClauses && ProjectFunctions::$Database[1]->Caching) {\n            $strCacheKey = ProjectFunctions::$objCacheProvider->CreateKey(ProjectFunctions::$Database[1]->Database, 'AllowedApiOperation', $intId);\n            $objCachedObject = ProjectFunctions::$objCacheProvider->Get($strCacheKey);\n            if ($objCachedObject !== false) {\n                return $objCachedObject;\n            }\n        }\n        // Use QuerySingle to Perform the Query\n        $objToReturn = AllowedApiOperation::QuerySingle(\n            dxQuery::AndCondition(\n                dxQuery::Equal(dxQueryN::AllowedApiOperation()->Id, $intId)\n            ),\n            $objOptionalClauses\n        );\n        if ($strCacheKey !== false) {\n            ProjectFunctions::$objCacheProvider->Set($strCacheKey, $objToReturn);\n        }\n        return $objToReturn;\n    }\n\n    /**\n     * Load all AllowedApiOperations\n     * @param dxQueryClause[] $objOptionalClauses additional optional dxQueryClause objects for this query\n     * @return AllowedApiOperation[]\n     */\n    public static function LoadAll($objOptionalClauses = null) {\n        if (func_num_args() > 1) {\n            throw new dxCallerException(\"LoadAll must be called with an array of optional clauses as a single argument\");\n        }\n        // Call AllowedApiOperation::QueryArray to perform the LoadAll query\n        try {\n            return AllowedApiOperation::QueryArray(dxQuery::All(), $objOptionalClauses);\n        } catch (dxCallerException $objExc) {\n            $objExc->IncrementOffset();\n            throw $objExc;\n        }\n    }\n\n    /**\n     * Count all AllowedApiOperations\n     * @return int\n     */\n    public static function CountAll() {\n        // Call AllowedApiOperation::QueryCount to perform the CountAll query\n        return AllowedApiOperation::QueryCount(dxQuery::All());\n    }\n\n    ///////////////////////////////\n    // DIVBLOX QUERY-RELATED METHODS\n    ///////////////////////////////\n\n    /**\n     * Internally called method to assist with calling divblox Query for this class\n     * on load methods.\n     * @param dxQueryBuilder &$objQueryBuilder the QueryBuilder object that will be created\n     * @param dxQueryCondition $objConditions any conditions on the query, itself\n     * @param dxQueryClause[] $objOptionalClausees additional optional dxQueryClause object or array of dxQueryClause objects for this query\n     * @param mixed[] $mixParameterArray a array of name-value pairs to perform PrepareStatement with (sending in null will skip the PrepareStatement step)\n     * @param boolean $blnCountOnly only select a rowcount\n     * @return string the query statement\n     */\n    protected static function BuildQueryStatement(&$objQueryBuilder, dxQueryCondition $objConditions, $objOptionalClauses, $mixParameterArray, $blnCountOnly) {\n        // Get the Database Object for this Class\n        $objDatabase = AllowedApiOperation::GetDatabase();\n\n        // Create/Build out the QueryBuilder object with AllowedApiOperation-specific SELET and FROM fields\n        $objQueryBuilder = new dxQueryBuilder($objDatabase, 'AllowedApiOperation');\n\n        $blnAddAllFieldsToSelect = true;\n        if ($objDatabase->OnlyFullGroupBy) {\n            // see if we have any group by or aggregation clauses, if yes, don't add the fields to select clause\n            if ($objOptionalClauses instanceof dxQueryClause) {\n                if ($objOptionalClauses instanceof dxQueryAggregationClause || $objOptionalClauses instanceof dxQueryGroupBy) {\n                    $blnAddAllFieldsToSelect = false;\n                }\n            } else if (is_array($objOptionalClauses)) {\n                foreach ($objOptionalClauses as $objClause) {\n                    if ($objClause instanceof dxQueryAggregationClause || $objClause instanceof dxQueryGroupBy) {\n                        $blnAddAllFieldsToSelect = false;\n                        break;\n                    }\n                }\n            }\n        }\n        if ($blnAddAllFieldsToSelect) {\n            AllowedApiOperation::GetSelectFields($objQueryBuilder, null, dxQuery::extractSelectClause($objOptionalClauses));\n        }\n        $objQueryBuilder->AddFromItem('AllowedApiOperation');\n\n        // Set \"CountOnly\" option (if applicable)\n        if ($blnCountOnly)\n            $objQueryBuilder->SetCountOnlyFlag();\n\n        // Apply Any Conditions\n        if ($objConditions)\n            try {\n                $objConditions->UpdateQueryBuilder($objQueryBuilder);\n            } catch (dxCallerException $objExc) {\n                $objExc->IncrementOffset();\n                throw $objExc;\n            }\n\n        // Iterate through all the Optional Clauses (if any) and perform accordingly\n        if ($objOptionalClauses) {\n            if ($objOptionalClauses instanceof dxQueryClause)\n                $objOptionalClauses->UpdateQueryBuilder($objQueryBuilder);\n            else if (is_array($objOptionalClauses))\n                foreach ($objOptionalClauses as $objClause)\n                    $objClause->UpdateQueryBuilder($objQueryBuilder);\n            else\n                throw new dxCallerException('Optional Clauses must be a dxQueryClause object or an array of dxQueryClause objects');\n        }\n\n        // Get the SQL Statement\n        $strQuery = $objQueryBuilder->GetStatement();\n\n        // Prepare the Statement with the Query Parameters (if applicable)\n        if ($mixParameterArray) {\n            if (is_array($mixParameterArray)) {\n                if (ProjectFunctions::getDataSetSize($mixParameterArray))\n                    $strQuery = $objDatabase->PrepareStatement($strQuery, $mixParameterArray);\n\n                // Ensure that there are no other Unresolved Named Parameters\n                if (strpos($strQuery, chr(dxQueryNamedValue::DelimiterCode) . '{') !== false)\n                    throw new dxCallerException('Unresolved named parameters in the query');\n            } else\n                throw new dxCallerException('Parameter Array must be an array of name-value parameter pairs');\n        }\n\n        // Return the Objects\n        return $strQuery;\n    }\n\n    /**\n     * Static divblox Query method to query for a single AllowedApiOperation object.\n     * Uses BuildQueryStatment to perform most of the work.\n     * @param dxQueryCondition $objConditions any conditions on the query, itself\n     * @param dxQueryClause[] $objOptionalClausees additional optional dxQueryClause objects for this query\n     * @param mixed[] $mixParameterArray a array of name-value pairs to perform PrepareStatement with\n     * @return AllowedApiOperation the queried object\n     */\n    public static function QuerySingle(dxQueryCondition $objConditions, $objOptionalClauses = null, $mixParameterArray = null) {\n        // Get the Query Statement\n        try {\n            $strQuery = AllowedApiOperation::BuildQueryStatement($objQueryBuilder, $objConditions, $objOptionalClauses, $mixParameterArray, false);\n        } catch (dxCallerException $objExc) {\n            $objExc->IncrementOffset();\n            throw $objExc;\n        }\n\n        // Perform the Query, Get the First Row, and Instantiate a new AllowedApiOperation object\n        $objDbResult = $objQueryBuilder->Database->Query($strQuery);\n\n        // Do we have to expand anything?\n        if ($objQueryBuilder->ExpandAsArrayNode) {\n            $objToReturn = array();\n            $objPrevItemArray = array();\n            while ($objDbRow = $objDbResult->GetNextRow()) {\n                $objItem = AllowedApiOperation::InstantiateDbRow($objDbRow, null, $objQueryBuilder->ExpandAsArrayNode, $objPrevItemArray, $objQueryBuilder->ColumnAliasArray);\n                if ($objItem) {\n                    $objToReturn[] = $objItem;\n                    $objPrevItemArray[$objItem->intId][] = $objItem;\n                }\n            }\n            if (ProjectFunctions::getDataSetSize($objToReturn)) {\n                // Since we only want the object to return, lets return the object and not the array.\n                return $objToReturn[0];\n            } else {\n                return null;\n            }\n        } else {\n            // No expands just return the first row\n            $objDbRow = $objDbResult->GetNextRow();\n            if(null === $objDbRow)\n                return null;\n            return AllowedApiOperation::InstantiateDbRow($objDbRow, null, null, null, $objQueryBuilder->ColumnAliasArray);\n        }\n    }\n\n    /**\n     * Static divblox Query method to query for an array of AllowedApiOperation objects.\n     * Uses BuildQueryStatment to perform most of the work.\n     * @param dxQueryCondition $objConditions any conditions on the query, itself\n     * @param dxQueryClause[] $objOptionalClausees additional optional dxQueryClause objects for this query\n     * @param mixed[] $mixParameterArray a array of name-value pairs to perform PrepareStatement with\n     * @return AllowedApiOperation[] the queried objects as an array\n     */\n    public static function QueryArray(dxQueryCondition $objConditions, $objOptionalClauses = null, $mixParameterArray = null) {\n        // Get the Query Statement\n        try {\n            $strQuery = AllowedApiOperation::BuildQueryStatement($objQueryBuilder, $objConditions, $objOptionalClauses, $mixParameterArray, false);\n        } catch (dxCallerException $objExc) {\n            $objExc->IncrementOffset();\n            throw $objExc;\n        }\n\n        // Perform the Query and Instantiate the Array Result\n        $objDbResult = $objQueryBuilder->Database->Query($strQuery);\n        return AllowedApiOperation::InstantiateDbResult($objDbResult, $objQueryBuilder->ExpandAsArrayNode, $objQueryBuilder->ColumnAliasArray);\n    }\n\n    /**\n     * Static divblox query method to issue a query and get a cursor to progressively fetch its results.\n     * Uses BuildQueryStatment to perform most of the work.\n     * @param dxQueryCondition $objConditions any conditions on the query, itself\n     * @param dxQueryClause[] $objOptionalClauses additional optional dxQueryClause objects for this query\n     * @param mixed[] $mixParameterArray a array of name-value pairs to perform PrepareStatement with\n     * @return dxDatabaseResultBase the cursor resource instance\n     */\n    public static function QueryCursor(dxQueryCondition $objConditions, $objOptionalClauses = null, $mixParameterArray = null) {\n        // Get the query statement\n        try {\n            $strQuery = AllowedApiOperation::BuildQueryStatement($objQueryBuilder, $objConditions, $objOptionalClauses, $mixParameterArray, false);\n        } catch (dxCallerException $objExc) {\n            $objExc->IncrementOffset();\n            throw $objExc;\n        }\n\n        // Perform the query\n        $objDbResult = $objQueryBuilder->Database->Query($strQuery);\n\n        // Return the results cursor\n        $objDbResult->QueryBuilder = $objQueryBuilder;\n        return $objDbResult;\n    }\n\n    /**\n     * Static divblox Query method to query for a count of AllowedApiOperation objects.\n     * Uses BuildQueryStatment to perform most of the work.\n     * @param dxQueryCondition $objConditions any conditions on the query, itself\n     * @param dxQueryClause[] $objOptionalClausees additional optional dxQueryClause objects for this query\n     * @param mixed[] $mixParameterArray a array of name-value pairs to perform PrepareStatement with\n     * @return integer the count of queried objects as an integer\n     */\n    public static function QueryCount(dxQueryCondition $objConditions, $objOptionalClauses = null, $mixParameterArray = null) {\n        // Get the Query Statement\n        try {\n            $strQuery = AllowedApiOperation::BuildQueryStatement($objQueryBuilder, $objConditions, $objOptionalClauses, $mixParameterArray, true);\n        } catch (dxCallerException $objExc) {\n            $objExc->IncrementOffset();\n            throw $objExc;\n        }\n\n        // Perform the Query and return the row_count\n        $objDbResult = $objQueryBuilder->Database->Query($strQuery);\n\n        // Figure out if the query is using GroupBy\n        $blnGrouped = false;\n\n        if ($objOptionalClauses) {\n            if ($objOptionalClauses instanceof dxQueryClause) {\n                if ($objOptionalClauses instanceof dxQueryGroupBy) {\n                    $blnGrouped = true;\n                }\n            } else if (is_array($objOptionalClauses)) {\n                foreach ($objOptionalClauses as $objClause) {\n                    if ($objClause instanceof dxQueryGroupBy) {\n                        $blnGrouped = true;\n                        break;\n                    }\n                }\n            } else {\n                throw new dxCallerException('Optional Clauses must be a dxQueryClause object or an array of dxQueryClause objects');\n            }\n        }\n\n        if ($blnGrouped)\n            // Groups in this query - return the count of Groups (which is the count of all rows)\n            return $objDbResult->CountRows();\n        else {\n            // No Groups - return the sql-calculated count(*) value\n            $strDbRow = $objDbResult->FetchRow();\n            return dxType::Cast($strDbRow[0], dxType::Integer);\n        }\n    }\n\n    public static function QueryArrayCached(dxQueryCondition $objConditions, $objOptionalClauses = null, $mixParameterArray = null, $blnForceUpdate = false) {\n        // Get the Database Object for this Class\n        $objDatabase = AllowedApiOperation::GetDatabase();\n\n        $strQuery = AllowedApiOperation::BuildQueryStatement($objQueryBuilder, $objConditions, $objOptionalClauses, $mixParameterArray, false);\n\n        $objCache = new dxCache('dxquery/allowedapioperation', $strQuery);\n        $cacheData = $objCache->GetData();\n\n        if (!$cacheData || $blnForceUpdate) {\n            $objDbResult = $objQueryBuilder->Database->Query($strQuery);\n            $arrResult = AllowedApiOperation::InstantiateDbResult($objDbResult, $objQueryBuilder->ExpandAsArrayNode, $objQueryBuilder->ColumnAliasArray);\n            $objCache->SaveData(serialize($arrResult));\n        } else {\n            $arrResult = unserialize($cacheData);\n        }\n\n        return $arrResult;\n    }\n\n    /**\n     * Updates a dxQueryBuilder with the SELECT fields for this AllowedApiOperation\n     * @param dxQueryBuilder $objBuilder the Query Builder object to update\n     * @param string $strPrefix optional prefix to add to the SELECT fields\n     */\n    public static function GetSelectFields(dxQueryBuilder $objBuilder, $strPrefix = null, dxQuerySelect $objSelect = null) {\n        if ($strPrefix) {\n            $strTableName = $strPrefix;\n            $strAliasPrefix = $strPrefix . '__';\n        } else {\n            $strTableName = 'AllowedApiOperation';\n            $strAliasPrefix = '';\n        }\n\n        if ($objSelect) {\n            $objBuilder->AddSelectItem($strTableName, 'Id', $strAliasPrefix . 'Id');\n            $objSelect->AddSelectItems($objBuilder, $strTableName, $strAliasPrefix);\n        } else {\n            $objBuilder->AddSelectItem($strTableName, 'Id', $strAliasPrefix . 'Id');\n            $objBuilder->AddSelectItem($strTableName, 'IsActive', $strAliasPrefix . 'IsActive');\n            $objBuilder->AddSelectItem($strTableName, 'ApiKey', $strAliasPrefix . 'ApiKey');\n            $objBuilder->AddSelectItem($strTableName, 'SearchMetaInfo', $strAliasPrefix . 'SearchMetaInfo');\n            $objBuilder->AddSelectItem($strTableName, 'ApiOperation', $strAliasPrefix . 'ApiOperation');\n            $objBuilder->AddSelectItem($strTableName, 'LastUpdated', $strAliasPrefix . 'LastUpdated');\n            $objBuilder->AddSelectItem($strTableName, 'ObjectOwner', $strAliasPrefix . 'ObjectOwner');\n        }\n    }\n    ///////////////////////////////\n    // INSTANTIATION-RELATED METHODS\n    ///////////////////////////////\n\n    /**\n     * Do a possible array expansion on the given node. If the node is an ExpandAsArray node,\n     * it will add to the corresponding array in the object. Otherwise, it will follow the node\n     * so that any leaf expansions can be handled.\n     *\n     * @param DatabaseRowBase $objDbRow\n     * @param dxQueryBaseNode $objChildNode\n     * @param dxBaseClass $objPreviousItem\n     * @param string[] $strColumnAliasArray\n     */\n\n    public static function ExpandArray ($objDbRow, $strAliasPrefix, $objNode, $objPreviousItemArray, $strColumnAliasArray) {\n        if (!$objNode->ChildNodeArray) {\n            return false;\n        }\n\n        $strAlias = $strAliasPrefix . 'Id';\n        $strColumnAlias = !empty($strColumnAliasArray[$strAlias]) ? $strColumnAliasArray[$strAlias] : $strAlias;\n        $blnExpanded = false;\n\n        foreach ($objPreviousItemArray as $objPreviousItem) {\n            if ($objPreviousItem->intId != $objDbRow->GetColumn($strColumnAlias, 'Integer')) {\n                continue;\n            }\n\n            foreach ($objNode->ChildNodeArray as $objChildNode) {\n                $strPropName = $objChildNode->_PropertyName;\n                $strClassName = $objChildNode->_ClassName;\n                $blnExpanded = false;\n                $strLongAlias = $objChildNode->ExtendedAlias();\n\n                if ($objChildNode->ExpandAsArray) {\n                    $strVarName = '_obj' . $strPropName . 'Array';\n                    if (null === $objPreviousItem->$strVarName) {\n                        $objPreviousItem->$strVarName = array();\n                    }\n                    if ($intPreviousChildItemCount = ProjectFunctions::getDataSetSize($objPreviousItem->$strVarName)) {\n                        $objPreviousChildItems = $objPreviousItem->$strVarName;\n                        if ($objChildNode->_Type == \"association\") {\n                            $objChildNode = $objChildNode->FirstChild();\n                        }\n                        $nextAlias = $objChildNode->ExtendedAlias() . '__';\n\n                        $objChildItem = call_user_func(array ($strClassName, 'InstantiateDbRow'), $objDbRow, $nextAlias, $objChildNode, $objPreviousChildItems, $strColumnAliasArray);\n                        if ($objChildItem) {\n                            $objPreviousItem->{$strVarName}[] = $objChildItem;\n                            $blnExpanded = true;\n                        } elseif ($objChildItem === false) {\n                            $blnExpanded = true;\n                        }\n                    }\n                } else {\n\n                    // Follow single node if keys match\n                    $nodeType = $objChildNode->_Type;\n                    if ($nodeType == 'reverse_reference' || $nodeType == 'association') {\n                        $strVarName = '_obj' . $strPropName;\n                    } else {\n                        $strVarName = 'obj' . $strPropName;\n                    }\n\n                    if (null === $objPreviousItem->$strVarName) {\n                        return false;\n                    }\n\n                    $objPreviousChildItems = array($objPreviousItem->$strVarName);\n                    $blnResult = call_user_func(array ($strClassName, 'ExpandArray'), $objDbRow, $strLongAlias . '__', $objChildNode, $objPreviousChildItems, $strColumnAliasArray);\n\n                    if ($blnResult) {\n                        $blnExpanded = true;\n                    }\n                }\n            }\n        }\n        return $blnExpanded;\n    }\n\n    /**\n     * Instantiate a AllowedApiOperation from a Database Row.\n     * Takes in an optional strAliasPrefix, used in case another Object::InstantiateDbRow\n     * is calling this AllowedApiOperation::InstantiateDbRow in order to perform\n     * early binding on referenced objects.\n     * @param DatabaseRowBase $objDbRow\n     * @param string $strAliasPrefix\n     * @param dxQueryBaseNode $objExpandAsArrayNode\n     * @param dxBaseClass $arrPreviousItem\n     * @param string[] $strColumnAliasArray\n     * @return mixed Either a AllowedApiOperation, or false to indicate the dbrow was used in an expansion, or null to indicate that this leaf is a duplicate.\n    */\n    public static function InstantiateDbRow($objDbRow, $strAliasPrefix = null, $objExpandAsArrayNode = null, $objPreviousItemArray = null, $strColumnAliasArray = array()) {\n        // If blank row, return null\n        if (!$objDbRow) {\n            return null;\n        }\n\n        if (empty ($strAliasPrefix) && $objPreviousItemArray) {\n            $strColumnAlias = !empty($strColumnAliasArray['Id']) ? $strColumnAliasArray['Id'] : 'Id';\n            $key = $objDbRow->GetColumn($strColumnAlias, 'Integer');\n            $objPreviousItemArray = (!empty ($objPreviousItemArray[$key]) ? $objPreviousItemArray[$key] : null);\n        }\n\n        // See if we're doing an array expansion on the previous item\n        if ($objExpandAsArrayNode &&\n                is_array($objPreviousItemArray) &&\n                ProjectFunctions::getDataSetSize($objPreviousItemArray)) {\n\n            if (AllowedApiOperation::ExpandArray ($objDbRow, $strAliasPrefix, $objExpandAsArrayNode, $objPreviousItemArray, $strColumnAliasArray)) {\n                return false; // db row was used but no new object was created\n            }\n        }\n\n        // Create a new instance of the AllowedApiOperation object\n        $objToReturn = new AllowedApiOperation();\n        $objToReturn->__blnRestored = true;\n\n        $strAlias = $strAliasPrefix . 'Id';\n        $strAliasName = !empty($strColumnAliasArray[$strAlias]) ? $strColumnAliasArray[$strAlias] : $strAlias;\n        $objToReturn->intId = $objDbRow->GetColumn($strAliasName, 'Integer');\n        $strAlias = $strAliasPrefix . 'IsActive';\n        $strAliasName = !empty($strColumnAliasArray[$strAlias]) ? $strColumnAliasArray[$strAlias] : $strAlias;\n        $objToReturn->blnIsActive = $objDbRow->GetColumn($strAliasName, 'Bit');\n        $strAlias = $strAliasPrefix . 'ApiKey';\n        $strAliasName = !empty($strColumnAliasArray[$strAlias]) ? $strColumnAliasArray[$strAlias] : $strAlias;\n        $objToReturn->intApiKey = $objDbRow->GetColumn($strAliasName, 'Integer');\n        $strAlias = $strAliasPrefix . 'SearchMetaInfo';\n        $strAliasName = !empty($strColumnAliasArray[$strAlias]) ? $strColumnAliasArray[$strAlias] : $strAlias;\n        $objToReturn->strSearchMetaInfo = $objDbRow->GetColumn($strAliasName, 'Blob');\n        $strAlias = $strAliasPrefix . 'ApiOperation';\n        $strAliasName = !empty($strColumnAliasArray[$strAlias]) ? $strColumnAliasArray[$strAlias] : $strAlias;\n        $objToReturn->intApiOperation = $objDbRow->GetColumn($strAliasName, 'Integer');\n        $strAlias = $strAliasPrefix . 'LastUpdated';\n        $strAliasName = !empty($strColumnAliasArray[$strAlias]) ? $strColumnAliasArray[$strAlias] : $strAlias;\n        $objToReturn->strLastUpdated = $objDbRow->GetColumn($strAliasName, 'VarChar');\n        $strAlias = $strAliasPrefix . 'ObjectOwner';\n        $strAliasName = !empty($strColumnAliasArray[$strAlias]) ? $strColumnAliasArray[$strAlias] : $strAlias;\n        $objToReturn->intObjectOwner = $objDbRow->GetColumn($strAliasName, 'Integer');\n\n        if (isset($objPreviousItemArray) && is_array($objPreviousItemArray)) {\n            foreach ($objPreviousItemArray as $objPreviousItem) {\n                if ($objToReturn->Id != $objPreviousItem->Id) {\n                    continue;\n                }\n                // this is a duplicate leaf in a complex join\n                return null; // indicates no object created and the db row has not been used\n            }\n        }\n\n        // Instantiate Virtual Attributes\n        $strVirtualPrefix = $strAliasPrefix . '__';\n        $strVirtualPrefixLength = strlen($strVirtualPrefix);\n        foreach ($objDbRow->GetColumnNameArray() as $strColumnName => $mixValue) {\n            if (strncmp($strColumnName, $strVirtualPrefix, $strVirtualPrefixLength) == 0)\n                $objToReturn->__strVirtualAttributeArray[substr($strColumnName, $strVirtualPrefixLength)] = $mixValue;\n        }\n\n\n        // Prepare to Check for Early/Virtual Binding\n\n        $objExpansionAliasArray = array();\n        if ($objExpandAsArrayNode) {\n            $objExpansionAliasArray = $objExpandAsArrayNode->ChildNodeArray;\n        }\n\n        if (!$strAliasPrefix)\n            $strAliasPrefix = 'AllowedApiOperation__';\n\n        // Check for ApiKeyObject Early Binding\n        $strAlias = $strAliasPrefix . 'ApiKey__Id';\n        $strAliasName = !empty($strColumnAliasArray[$strAlias]) ? $strColumnAliasArray[$strAlias] : $strAlias;\n        if (!is_null($objDbRow->GetColumn($strAliasName))) {\n            $objExpansionNode = (empty($objExpansionAliasArray['ApiKey']) ? null : $objExpansionAliasArray['ApiKey']);\n            $objToReturn->objApiKeyObject = ApiKey::InstantiateDbRow($objDbRow, $strAliasPrefix . 'ApiKey__', $objExpansionNode, null, $strColumnAliasArray);\n        }\n        // Check for ApiOperationObject Early Binding\n        $strAlias = $strAliasPrefix . 'ApiOperation__Id';\n        $strAliasName = !empty($strColumnAliasArray[$strAlias]) ? $strColumnAliasArray[$strAlias] : $strAlias;\n        if (!is_null($objDbRow->GetColumn($strAliasName))) {\n            $objExpansionNode = (empty($objExpansionAliasArray['ApiOperation']) ? null : $objExpansionAliasArray['ApiOperation']);\n            $objToReturn->objApiOperationObject = ApiOperation::InstantiateDbRow($objDbRow, $strAliasPrefix . 'ApiOperation__', $objExpansionNode, null, $strColumnAliasArray);\n        }\n\n\n\n        return $objToReturn;\n    }\n\n    /**\n     * Instantiate an array of AllowedApiOperations from a Database Result\n     * @param DatabaseResultBase $objDbResult\n     * @param dxQueryBaseNode $objExpandAsArrayNode\n     * @param string[] $strColumnAliasArray\n     * @return AllowedApiOperation[]\n     */\n    public static function InstantiateDbResult(dxDatabaseResultBase $objDbResult, $objExpandAsArrayNode = null, $strColumnAliasArray = null) {\n        $objToReturn = array();\n\n        if (!$strColumnAliasArray)\n            $strColumnAliasArray = array();\n\n        // If blank resultset, then return empty array\n        if (!$objDbResult)\n            return $objToReturn;\n\n        // Load up the return array with each row\n        if ($objExpandAsArrayNode) {\n            $objToReturn = array();\n            $objPrevItemArray = array();\n            while ($objDbRow = $objDbResult->GetNextRow()) {\n                $objItem = AllowedApiOperation::InstantiateDbRow($objDbRow, null, $objExpandAsArrayNode, $objPrevItemArray, $strColumnAliasArray);\n                if ($objItem) {\n                    $objToReturn[] = $objItem;\n                    $objPrevItemArray[$objItem->intId][] = $objItem;\n                }\n            }\n        } else {\n            while ($objDbRow = $objDbResult->GetNextRow())\n                $objToReturn[] = AllowedApiOperation::InstantiateDbRow($objDbRow, null, null, null, $strColumnAliasArray);\n        }\n\n        return $objToReturn;\n    }\n\n\n    /**\n     * Instantiate a single AllowedApiOperation object from a query cursor (e.g. a DB ResultSet).\n     * Cursor is automatically moved to the \"next row\" of the result set.\n     * Will return NULL if no cursor or if the cursor has no more rows in the resultset.\n     * @param dxDatabaseResultBase $objDbResult cursor resource\n     * @return AllowedApiOperation next row resulting from the query\n     */\n    public static function InstantiateCursor(dxDatabaseResultBase $objDbResult) {\n        // If blank resultset, then return empty result\n        if (!$objDbResult) return null;\n\n        // If empty resultset, then return empty result\n        $objDbRow = $objDbResult->GetNextRow();\n        if (!$objDbRow) return null;\n\n        // We need the Column Aliases\n        $strColumnAliasArray = $objDbResult->QueryBuilder->ColumnAliasArray;\n        if (!$strColumnAliasArray) $strColumnAliasArray = array();\n\n        // Pull Expansions\n        $objExpandAsArrayNode = $objDbResult->QueryBuilder->ExpandAsArrayNode;\n        if (!empty ($objExpandAsArrayNode)) {\n            throw new dxCallerException (\"Cannot use InstantiateCursor with ExpandAsArray\");\n        }\n\n        // Load up the return result with a row and return it\n        return AllowedApiOperation::InstantiateDbRow($objDbRow, null, null, null, $strColumnAliasArray);\n    }\n\n    ///////////////////////////////////////////////////\n    // INDEX-BASED LOAD METHODS (Single Load and Array)\n    ///////////////////////////////////////////////////\n\n    /**\n     * Load a single AllowedApiOperation object,\n     * by Id Index(es)\n     * @param integer $intId\n     * @param dxQueryClause[] $objOptionalClauses additional optional dxQueryClause objects for this query\n     * @return AllowedApiOperation\n    */\n    public static function LoadById($intId, $objOptionalClauses = null) {\n        return AllowedApiOperation::QuerySingle(\n            dxQuery::AndCondition(\n                dxQuery::Equal(dxQueryN::AllowedApiOperation()->Id, $intId)\n            ),\n            $objOptionalClauses\n        );\n    }\n\n    /**\n     * Load an array of AllowedApiOperation objects,\n     * by ApiKey Index(es)\n     * @param integer $intApiKey\n     * @param dxQueryClause[] $objOptionalClauses additional optional dxQueryClause objects for this query\n     * @return AllowedApiOperation[]\n    */\n    public static function LoadArrayByApiKey($intApiKey, $objOptionalClauses = null) {\n        // Call AllowedApiOperation::QueryArray to perform the LoadArrayByApiKey query\n        try {\n            return AllowedApiOperation::QueryArray(\n                dxQuery::Equal(dxQueryN::AllowedApiOperation()->ApiKey, $intApiKey),\n                $objOptionalClauses);\n        } catch (dxCallerException $objExc) {\n            $objExc->IncrementOffset();\n            throw $objExc;\n        }\n    }\n\n    /**\n     * Count AllowedApiOperations\n     * by ApiKey Index(es)\n     * @param integer $intApiKey\n     * @return int\n    */\n    public static function CountByApiKey($intApiKey) {\n        // Call AllowedApiOperation::QueryCount to perform the CountByApiKey query\n        return AllowedApiOperation::QueryCount(\n            dxQuery::Equal(dxQueryN::AllowedApiOperation()->ApiKey, $intApiKey)\n        );\n    }\n\n    /**\n     * Load an array of AllowedApiOperation objects,\n     * by ApiOperation Index(es)\n     * @param integer $intApiOperation\n     * @param dxQueryClause[] $objOptionalClauses additional optional dxQueryClause objects for this query\n     * @return AllowedApiOperation[]\n    */\n    public static function LoadArrayByApiOperation($intApiOperation, $objOptionalClauses = null) {\n        // Call AllowedApiOperation::QueryArray to perform the LoadArrayByApiOperation query\n        try {\n            return AllowedApiOperation::QueryArray(\n                dxQuery::Equal(dxQueryN::AllowedApiOperation()->ApiOperation, $intApiOperation),\n                $objOptionalClauses);\n        } catch (dxCallerException $objExc) {\n            $objExc->IncrementOffset();\n            throw $objExc;\n        }\n    }\n\n    /**\n     * Count AllowedApiOperations\n     * by ApiOperation Index(es)\n     * @param integer $intApiOperation\n     * @return int\n    */\n    public static function CountByApiOperation($intApiOperation) {\n        // Call AllowedApiOperation::QueryCount to perform the CountByApiOperation query\n        return AllowedApiOperation::QueryCount(\n            dxQuery::Equal(dxQueryN::AllowedApiOperation()->ApiOperation, $intApiOperation)\n        );\n    }\n    ////////////////////////////////////////////////////\n    // INDEX-BASED LOAD METHODS (Array via Many to Many)\n    ////////////////////////////////////////////////////\n\n\n    //////////////////////////\n    // SAVE, DELETE AND RELOAD\n    //////////////////////////\n\n    /**\n    * Save this AllowedApiOperation\n    * @param bool $blnForceInsert\n    * @param bool $blnForceUpdate\n    * @return int\n    */\n    public function Save($blnForceInsert = false, $blnForceUpdate = false) {\n        $ObjectAccessArray = ProjectAccessManager::getObjectAccess(ProjectFunctions::getCurrentAccountId(),\"AllowedApiOperation\",$this->intId);\n        // Get the Database Object for this Class\n        $objDatabase = AllowedApiOperation::GetDatabase();\n        $mixToReturn = null;\n        if (!is_numeric($this->intObjectOwner)) {\n            $this->intObjectOwner = ProjectFunctions::getCurrentAccountId();\n        }\n        $ExistingObj = AllowedApiOperation::Load($this->intId);\n        $newAuditLogEntry = new AuditLogEntry();\n        $ChangedArray = array();\n        $newAuditLogEntry->EntryTimeStamp = dxDateTime::Now();\n        $newAuditLogEntry->ObjectId = $this->intId;\n        $newAuditLogEntry->ObjectName = 'AllowedApiOperation';\n        $newAuditLogEntry->UserEmail = ProjectFunctions::getCurrentUserEmailForAudit();\n        if (!$ExistingObj) {\n            $newAuditLogEntry->ModificationType = 'Create';\n            $ChangedArray = array_merge($ChangedArray,array(\"Id\" => $this->intId));\n            $ChangedArray = array_merge($ChangedArray,array(\"IsActive\" => $this->blnIsActive));\n            $ChangedArray = array_merge($ChangedArray,array(\"ApiKey\" => $this->intApiKey));\n            $ChangedArray = array_merge($ChangedArray,array(\"SearchMetaInfo\" => $this->strSearchMetaInfo));\n            $ChangedArray = array_merge($ChangedArray,array(\"ApiOperation\" => $this->intApiOperation));\n            $ChangedArray = array_merge($ChangedArray,array(\"LastUpdated\" => $this->strLastUpdated));\n            $ChangedArray = array_merge($ChangedArray,array(\"ObjectOwner\" => $this->intObjectOwner));\n            $newAuditLogEntry->AuditLogEntryDetail = json_encode($ChangedArray);\n        } else {\n            $newAuditLogEntry->ModificationType = 'Update';\n            $ExistingValueStr = \"NULL\";\n            if (!is_null($ExistingObj->Id)) {\n                $ExistingValueStr = $ExistingObj->Id;\n            }\n            if ($ExistingObj->Id != $this->intId) {\n                $ChangedArray = array_merge($ChangedArray,array(\"Id\" => array(\"Before\" => $ExistingValueStr,\"After\" => $this->intId)));\n                //$ChangedArray = array_merge($ChangedArray,array(\"Id\" => \"From: \".$ExistingValueStr.\" to: \".$this->intId));\n            }\n            $ExistingValueStr = \"NULL\";\n            if (!is_null($ExistingObj->IsActive)) {\n                $ExistingValueStr = $ExistingObj->IsActive;\n            }\n            if ($ExistingObj->IsActive != $this->blnIsActive) {\n                $ChangedArray = array_merge($ChangedArray,array(\"IsActive\" => array(\"Before\" => $ExistingValueStr,\"After\" => $this->blnIsActive)));\n                //$ChangedArray = array_merge($ChangedArray,array(\"IsActive\" => \"From: \".$ExistingValueStr.\" to: \".$this->blnIsActive));\n            }\n            $ExistingValueStr = \"NULL\";\n            if (!is_null($ExistingObj->ApiKey)) {\n                $ExistingValueStr = $ExistingObj->ApiKey;\n            }\n            if ($ExistingObj->ApiKey != $this->intApiKey) {\n                $ChangedArray = array_merge($ChangedArray,array(\"ApiKey\" => array(\"Before\" => $ExistingValueStr,\"After\" => $this->intApiKey)));\n                //$ChangedArray = array_merge($ChangedArray,array(\"ApiKey\" => \"From: \".$ExistingValueStr.\" to: \".$this->intApiKey));\n            }\n            $ExistingValueStr = \"NULL\";\n            if (!is_null($ExistingObj->SearchMetaInfo)) {\n                $ExistingValueStr = $ExistingObj->SearchMetaInfo;\n            }\n            if ($ExistingObj->SearchMetaInfo != $this->strSearchMetaInfo) {\n                $ChangedArray = array_merge($ChangedArray,array(\"SearchMetaInfo\" => array(\"Before\" => $ExistingValueStr,\"After\" => $this->strSearchMetaInfo)));\n                //$ChangedArray = array_merge($ChangedArray,array(\"SearchMetaInfo\" => \"From: \".$ExistingValueStr.\" to: \".$this->strSearchMetaInfo));\n            }\n            $ExistingValueStr = \"NULL\";\n            if (!is_null($ExistingObj->ApiOperation)) {\n                $ExistingValueStr = $ExistingObj->ApiOperation;\n            }\n            if ($ExistingObj->ApiOperation != $this->intApiOperation) {\n                $ChangedArray = array_merge($ChangedArray,array(\"ApiOperation\" => array(\"Before\" => $ExistingValueStr,\"After\" => $this->intApiOperation)));\n                //$ChangedArray = array_merge($ChangedArray,array(\"ApiOperation\" => \"From: \".$ExistingValueStr.\" to: \".$this->intApiOperation));\n            }\n            $ExistingValueStr = \"NULL\";\n            if (!is_null($ExistingObj->LastUpdated)) {\n                $ExistingValueStr = $ExistingObj->LastUpdated;\n            }\n            if ($ExistingObj->LastUpdated != $this->strLastUpdated) {\n                $ChangedArray = array_merge($ChangedArray,array(\"LastUpdated\" => array(\"Before\" => $ExistingValueStr,\"After\" => $this->strLastUpdated)));\n                //$ChangedArray = array_merge($ChangedArray,array(\"LastUpdated\" => \"From: \".$ExistingValueStr.\" to: \".$this->strLastUpdated));\n            }\n            $ExistingValueStr = \"NULL\";\n            if (!is_null($ExistingObj->ObjectOwner)) {\n                $ExistingValueStr = $ExistingObj->ObjectOwner;\n            }\n            if ($ExistingObj->ObjectOwner != $this->intObjectOwner) {\n                $ChangedArray = array_merge($ChangedArray,array(\"ObjectOwner\" => array(\"Before\" => $ExistingValueStr,\"After\" => $this->intObjectOwner)));\n                //$ChangedArray = array_merge($ChangedArray,array(\"ObjectOwner\" => \"From: \".$ExistingValueStr.\" to: \".$this->intObjectOwner));\n            }\n            $newAuditLogEntry->AuditLogEntryDetail = json_encode($ChangedArray);\n        }\n        try {\n            if ((!$this->__blnRestored) || ($blnForceInsert)) {\n                if (!in_array(AccessOperation::CREATE_STR,$ObjectAccessArray)) {\n                    // This user is not allowed to create an object of this type\n                    throw new Exception(\"User is not allowed to perform operation \".AccessOperation::CREATE_STR.\" on entity of type 'AllowedApiOperation'. Allowed access is \".json_encode($ObjectAccessArray));\n                }\n                // Perform an INSERT query\n                $objDatabase->NonQuery('\n                INSERT INTO `AllowedApiOperation` (\n\t\t\t\t\t\t\t`IsActive`,\n\t\t\t\t\t\t\t`ApiKey`,\n\t\t\t\t\t\t\t`SearchMetaInfo`,\n\t\t\t\t\t\t\t`ApiOperation`,\n\t\t\t\t\t\t\t`ObjectOwner`\n\t\t\t\t\t\t) VALUES (\n\t\t\t\t\t\t\t' . $objDatabase->SqlVariable($this->blnIsActive) . ',\n\t\t\t\t\t\t\t' . $objDatabase->SqlVariable($this->intApiKey) . ',\n\t\t\t\t\t\t\t' . $objDatabase->SqlVariable($this->strSearchMetaInfo) . ',\n\t\t\t\t\t\t\t' . $objDatabase->SqlVariable($this->intApiOperation) . ',\n\t\t\t\t\t\t\t' . $objDatabase->SqlVariable($this->intObjectOwner) . '\n\t\t\t\t\t\t)\n                ');\n\t\t\t\t\t// Update Identity column and return its value\n                $mixToReturn = $this->intId = $objDatabase->InsertId('AllowedApiOperation', 'Id');\n            } else {\n                // Perform an UPDATE query\n                // First checking for Optimistic Locking constraints (if applicable)\n                if (!in_array(AccessOperation::UPDATE_STR,$ObjectAccessArray)) {\n                    // This user is not allowed to create an object of this type\n                    throw new Exception(\"User is not allowed to perform operation \".AccessOperation::UPDATE_STR.\" on entity of type 'AllowedApiOperation'. Allowed access is \".json_encode($ObjectAccessArray));\n                }\n                if (!$blnForceUpdate) {\n                    // Perform the Optimistic Locking check\n                    $objResult = $objDatabase->Query('\n                    SELECT `LastUpdated` FROM `AllowedApiOperation` WHERE\n\t\t\t\t\t\t\t`Id` = ' . $objDatabase->SqlVariable($this->intId) . '');\n\n                $objRow = $objResult->FetchArray();\n                if ($objRow[0] != $this->strLastUpdated)\n                    throw new dxOptimisticLockingException('AllowedApiOperation');\n            }\n\n            // Perform the UPDATE query\n            $objDatabase->NonQuery('\n            UPDATE `AllowedApiOperation` SET\n\t\t\t\t\t\t\t`IsActive` = ' . $objDatabase->SqlVariable($this->blnIsActive) . ',\n\t\t\t\t\t\t\t`ApiKey` = ' . $objDatabase->SqlVariable($this->intApiKey) . ',\n\t\t\t\t\t\t\t`SearchMetaInfo` = ' . $objDatabase->SqlVariable($this->strSearchMetaInfo) . ',\n\t\t\t\t\t\t\t`ApiOperation` = ' . $objDatabase->SqlVariable($this->intApiOperation) . ',\n\t\t\t\t\t\t\t`ObjectOwner` = ' . $objDatabase->SqlVariable($this->intObjectOwner) . '\n            WHERE\n\t\t\t\t\t\t\t`Id` = ' . $objDatabase->SqlVariable($this->intId) . '');\n            }\n\n        } catch (dxCallerException $objExc) {\n            $objExc->IncrementOffset();\n            throw $objExc;\n        }\n        try {\n            $newAuditLogEntry->ObjectId = $this->intId;\n            $newAuditLogEntry->Save();\n        } catch(dxCallerException $e) {\n            error_log('Could not save audit log while saving AllowedApiOperation. Details: '.$newAuditLogEntry->getJson().'<br>Error details: '.$e->getMessage());\n        }\n        // Update __blnRestored and any Non-Identity PK Columns (if applicable)\n        $this->__blnRestored = true;\n\n        // Update Local Timestamp\n        $objResult = $objDatabase->Query('SELECT `LastUpdated` FROM\n                                            `AllowedApiOperation` WHERE\n                \t\t\t\t\t\t\t`Id` = ' . $objDatabase->SqlVariable($this->intId) . '');\n\n        $objRow = $objResult->FetchArray();\n        $this->strLastUpdated = $objRow[0];\n\n        $this->DeleteCache();\n\n        // Return\n        return $mixToReturn;\n    }\n    /**\n     * Delete this AllowedApiOperation\n     * @return void\n     */\n    public function Delete() {\n        if ((is_null($this->intId)))\n            throw new dxUndefinedPrimaryKeyException('Cannot delete this AllowedApiOperation with an unset primary key.');\n\n        $ObjectAccessArray = ProjectAccessManager::getObjectAccess(ProjectFunctions::getCurrentAccountId(),\"AllowedApiOperation\",$this->intId);\n        if (!in_array(AccessOperation::DELETE_STR,$ObjectAccessArray)) {\n            // This user is not allowed to delete an object of this type\n            throw new Exception(\"User is not allowed to perform operation \".AccessOperation::DELETE_STR.\" on entity of type 'AllowedApiOperation'. Allowed access is \".json_encode($ObjectAccessArray));\n        }\n\n        // Get the Database Object for this Class\n        $objDatabase = AllowedApiOperation::GetDatabase();\n        $newAuditLogEntry = new AuditLogEntry();\n        $ChangedArray = array();\n        $newAuditLogEntry->EntryTimeStamp = dxDateTime::Now();\n        $newAuditLogEntry->ObjectId = $this->intId;\n        $newAuditLogEntry->ObjectName = 'AllowedApiOperation';\n        $newAuditLogEntry->UserEmail = ProjectFunctions::getCurrentUserEmailForAudit();\n        $newAuditLogEntry->ModificationType = 'Delete';\n        $ChangedArray = array_merge($ChangedArray,array(\"Id\" => $this->intId));\n        $ChangedArray = array_merge($ChangedArray,array(\"IsActive\" => $this->blnIsActive));\n        $ChangedArray = array_merge($ChangedArray,array(\"ApiKey\" => $this->intApiKey));\n        $ChangedArray = array_merge($ChangedArray,array(\"SearchMetaInfo\" => $this->strSearchMetaInfo));\n        $ChangedArray = array_merge($ChangedArray,array(\"ApiOperation\" => $this->intApiOperation));\n        $ChangedArray = array_merge($ChangedArray,array(\"LastUpdated\" => $this->strLastUpdated));\n        $ChangedArray = array_merge($ChangedArray,array(\"ObjectOwner\" => $this->intObjectOwner));\n        $newAuditLogEntry->AuditLogEntryDetail = json_encode($ChangedArray);\n        try {\n            $newAuditLogEntry->Save();\n        } catch(dxCallerException $e) {\n            error_log('Could not save audit log while deleting AllowedApiOperation. Details: '.$newAuditLogEntry->getJson().'<br>Error details: '.$e->getMessage());\n        }\n\n        // Perform the SQL Query\n        $objDatabase->NonQuery('\n            DELETE FROM\n                `AllowedApiOperation`\n            WHERE\n                `Id` = ' . $objDatabase->SqlVariable($this->intId) . '');\n\n        $this->DeleteCache();\n    }\n\n    /**\n     * Delete this AllowedApiOperation ONLY from the cache\n     * @return void\n     */\n    public function DeleteCache() {\n        if (ProjectFunctions::$objCacheProvider && ProjectFunctions::$Database[1]->Caching) {\n            $strCacheKey = ProjectFunctions::$objCacheProvider->CreateKey(ProjectFunctions::$Database[1]->Database, 'AllowedApiOperation', $this->intId);\n            ProjectFunctions::$objCacheProvider->Delete($strCacheKey);\n        }\n    }\n\n    /**\n     * Delete all AllowedApiOperations\n     * @return void\n     */\n    public static function DeleteAll() {\n        // Get the Database Object for this Class\n        $objDatabase = AllowedApiOperation::GetDatabase();\n\n        // Perform the Query\n        $objDatabase->NonQuery('\n            DELETE FROM\n                `AllowedApiOperation`');\n\n        if (ProjectFunctions::$objCacheProvider && ProjectFunctions::$Database[1]->Caching) {\n            ProjectFunctions::$objCacheProvider->DeleteAll();\n        }\n    }\n\n    /**\n     * Truncate AllowedApiOperation table\n     * @return void\n     */\n    public static function Truncate() {\n        // Get the Database Object for this Class\n        $objDatabase = AllowedApiOperation::GetDatabase();\n\n        // Perform the Query\n        $objDatabase->NonQuery('\n            TRUNCATE `AllowedApiOperation`');\n\n        if (ProjectFunctions::$objCacheProvider && ProjectFunctions::$Database[1]->Caching) {\n            ProjectFunctions::$objCacheProvider->DeleteAll();\n        }\n    }\n    /**\n     * Reload this AllowedApiOperation from the database.\n     * @return void\n     */\n    public function Reload() {\n        // Make sure we are actually Restored from the database\n        if (!$this->__blnRestored)\n            throw new dxCallerException('Cannot call Reload() on a new, unsaved AllowedApiOperation object.');\n\n        $this->DeleteCache();\n\n        // Reload the Object\n        $objReloaded = AllowedApiOperation::Load($this->intId);\n\n        // Update $this's local variables to match\n        $this->blnIsActive = $objReloaded->blnIsActive;\n        $this->ApiKey = $objReloaded->ApiKey;\n        $this->strSearchMetaInfo = $objReloaded->strSearchMetaInfo;\n        $this->ApiOperation = $objReloaded->ApiOperation;\n        $this->strLastUpdated = $objReloaded->strLastUpdated;\n        $this->intObjectOwner = $objReloaded->intObjectOwner;\n    }\n    ////////////////////\n    // PUBLIC OVERRIDERS\n    ////////////////////\n\n        /**\n     * Override method to perform a property \"Get\"\n     * This will get the value of $strName\n     *\n     * @param string $strName Name of the property to get\n     * @return mixed\n     */\n    public function __get($strName) {\n        switch ($strName) {\n            ///////////////////\n            // Member Variables\n            ///////////////////\n            case 'Id':\n                /**\n                 * Gets the value for intId (Read-Only PK)\n                 * @return integer\n                 */\n                return $this->intId;\n\n            case 'IsActive':\n                /**\n                 * Gets the value for blnIsActive \n                 * @return boolean\n                 */\n                return $this->blnIsActive;\n\n            case 'ApiKey':\n                /**\n                 * Gets the value for intApiKey \n                 * @return integer\n                 */\n                return $this->intApiKey;\n\n            case 'SearchMetaInfo':\n                /**\n                 * Gets the value for strSearchMetaInfo \n                 * @return string\n                 */\n                return $this->strSearchMetaInfo;\n\n            case 'ApiOperation':\n                /**\n                 * Gets the value for intApiOperation \n                 * @return integer\n                 */\n                return $this->intApiOperation;\n\n            case 'LastUpdated':\n                /**\n                 * Gets the value for strLastUpdated (Read-Only Timestamp)\n                 * @return string\n                 */\n                return $this->strLastUpdated;\n\n            case 'ObjectOwner':\n                /**\n                 * Gets the value for intObjectOwner \n                 * @return integer\n                 */\n                return $this->intObjectOwner;\n\n\n            ///////////////////\n            // Member Objects\n            ///////////////////\n            case 'ApiKeyObject':\n                /**\n                 * Gets the value for the ApiKey object referenced by intApiKey \n                 * @return ApiKey\n                 */\n                try {\n                    if ((!$this->objApiKeyObject) && (!is_null($this->intApiKey)))\n                        $this->objApiKeyObject = ApiKey::Load($this->intApiKey);\n                    return $this->objApiKeyObject;\n                } catch (dxCallerException $objExc) {\n                    $objExc->IncrementOffset();\n                    throw $objExc;\n                }\n\n            case 'ApiOperationObject':\n                /**\n                 * Gets the value for the ApiOperation object referenced by intApiOperation \n                 * @return ApiOperation\n                 */\n                try {\n                    if ((!$this->objApiOperationObject) && (!is_null($this->intApiOperation)))\n                        $this->objApiOperationObject = ApiOperation::Load($this->intApiOperation);\n                    return $this->objApiOperationObject;\n                } catch (dxCallerException $objExc) {\n                    $objExc->IncrementOffset();\n                    throw $objExc;\n                }\n\n\n            ////////////////////////////\n            // Virtual Object References (Many to Many and Reverse References)\n            // (If restored via a \"Many-to\" expansion)\n            ////////////////////////////\n\n\n            case '__Restored':\n                return $this->__blnRestored;\n\n            default:\n                try {\n                    return parent::__get($strName);\n                } catch (dxCallerException $objExc) {\n                    $objExc->IncrementOffset();\n                    throw $objExc;\n                }\n        }\n    }\n        /**\n     * Override method to perform a property \"Set\"\n     * This will set the property $strName to be $mixValue\n     *\n     * @param string $strName Name of the property to set\n     * @param string $mixValue New value of the property\n     * @return mixed\n     */\n    public function __set($strName, $mixValue) {\n        switch ($strName) {\n            ///////////////////\n            // Member Variables\n            ///////////////////\n            case 'IsActive':\n                /**\n                 * Sets the value for blnIsActive \n                 * @param boolean $mixValue\n                 * @return boolean\n                 */\n                try {\n                    return ($this->blnIsActive = dxType::Cast($mixValue, dxType::Boolean));\n                } catch (dxCallerException $objExc) {\n                    $objExc->IncrementOffset();\n                    throw $objExc;\n                }\n\n            case 'ApiKey':\n                /**\n                 * Sets the value for intApiKey \n                 * @param integer $mixValue\n                 * @return integer\n                 */\n                try {\n                    $this->objApiKeyObject = null;\n                    return ($this->intApiKey = dxType::Cast($mixValue, dxType::Integer));\n                } catch (dxCallerException $objExc) {\n                    $objExc->IncrementOffset();\n                    throw $objExc;\n                }\n\n            case 'SearchMetaInfo':\n                /**\n                 * Sets the value for strSearchMetaInfo \n                 * @param string $mixValue\n                 * @return string\n                 */\n                try {\n                    return ($this->strSearchMetaInfo = dxType::Cast($mixValue, dxType::String));\n                } catch (dxCallerException $objExc) {\n                    $objExc->IncrementOffset();\n                    throw $objExc;\n                }\n\n            case 'ApiOperation':\n                /**\n                 * Sets the value for intApiOperation \n                 * @param integer $mixValue\n                 * @return integer\n                 */\n                try {\n                    $this->objApiOperationObject = null;\n                    return ($this->intApiOperation = dxType::Cast($mixValue, dxType::Integer));\n                } catch (dxCallerException $objExc) {\n                    $objExc->IncrementOffset();\n                    throw $objExc;\n                }\n\n            case 'ObjectOwner':\n                /**\n                 * Sets the value for intObjectOwner \n                 * @param integer $mixValue\n                 * @return integer\n                 */\n                try {\n                    return ($this->intObjectOwner = dxType::Cast($mixValue, dxType::Integer));\n                } catch (dxCallerException $objExc) {\n                    $objExc->IncrementOffset();\n                    throw $objExc;\n                }\n\n\n            ///////////////////\n            // Member Objects\n            ///////////////////\n            case 'ApiKeyObject':\n                /**\n                 * Sets the value for the ApiKey object referenced by intApiKey \n                 * @param ApiKey $mixValue\n                 * @return ApiKey\n                 */\n                if (is_null($mixValue)) {\n                    $this->intApiKey = null;\n                    $this->objApiKeyObject = null;\n                    return null;\n                } else {\n                    // Make sure $mixValue actually is a ApiKey object\n                    try {\n                        $mixValue = dxType::Cast($mixValue, 'ApiKey');\n                    } catch (dxInvalidCastException $objExc) {\n                        $objExc->IncrementOffset();\n                        throw $objExc;\n                    }\n\n                    // Make sure $mixValue is a SAVED ApiKey object\n                    if (is_null($mixValue->Id))\n                        throw new dxCallerException('Unable to set an unsaved ApiKeyObject for this AllowedApiOperation');\n\n                    // Update Local Member Variables\n                    $this->objApiKeyObject = $mixValue;\n                    $this->intApiKey = $mixValue->Id;\n\n                    // Return $mixValue\n                    return $mixValue;\n                }\n                break;\n\n            case 'ApiOperationObject':\n                /**\n                 * Sets the value for the ApiOperation object referenced by intApiOperation \n                 * @param ApiOperation $mixValue\n                 * @return ApiOperation\n                 */\n                if (is_null($mixValue)) {\n                    $this->intApiOperation = null;\n                    $this->objApiOperationObject = null;\n                    return null;\n                } else {\n                    // Make sure $mixValue actually is a ApiOperation object\n                    try {\n                        $mixValue = dxType::Cast($mixValue, 'ApiOperation');\n                    } catch (dxInvalidCastException $objExc) {\n                        $objExc->IncrementOffset();\n                        throw $objExc;\n                    }\n\n                    // Make sure $mixValue is a SAVED ApiOperation object\n                    if (is_null($mixValue->Id))\n                        throw new dxCallerException('Unable to set an unsaved ApiOperationObject for this AllowedApiOperation');\n\n                    // Update Local Member Variables\n                    $this->objApiOperationObject = $mixValue;\n                    $this->intApiOperation = $mixValue->Id;\n\n                    // Return $mixValue\n                    return $mixValue;\n                }\n                break;\n\n            default:\n                try {\n                    return parent::__set($strName, $mixValue);\n                } catch (dxCallerException $objExc) {\n                    $objExc->IncrementOffset();\n                    throw $objExc;\n                }\n        }\n    }\n    /**\n     * Lookup a VirtualAttribute value (if applicable).  Returns NULL if none found.\n     * @param string $strName\n     * @return string\n     */\n    public function GetVirtualAttribute($strName) {\n        if (array_key_exists($strName, $this->__strVirtualAttributeArray))\n            return $this->__strVirtualAttributeArray[$strName];\n        return null;\n    }\n\n    ///////////////////////////////\n    // ASSOCIATED OBJECTS' METHODS\n    ///////////////////////////////\n\n\n\n    \n///////////////////////////////\n    // METHODS TO EXTRACT INFO ABOUT THE CLASS\n    ///////////////////////////////\n\n    /**\n     * Static method to retrieve the Database object that owns this class.\n     * @return string Name of the table from which this class has been created.\n     */\n    public static function GetTableName() {\n        return \"AllowedApiOperation\";\n    }\n\n    /**\n     * Static method to retrieve the Table name from which this class has been created.\n     * @return string Name of the table from which this class has been created.\n     */\n    public static function GetDatabaseName() {\n        return ProjectFunctions::$Database[AllowedApiOperation::GetDatabaseIndex()]->Database;\n    }\n\n    /**\n     * Static method to retrieve the Database index in the configuration.inc.php file.\n     * This can be useful when there are two databases of the same name which create\n     * confusion for the developer. There are no internal uses of this function but are\n     * here to help retrieve info if need be!\n     * @return int position or index of the database in the config file.\n     */\n    public static function GetDatabaseIndex() {\n        return 1;\n    }\n\n    ////////////////////////////////////////\n    // METHODS for SOAP-BASED WEB SERVICES\n    ////////////////////////////////////////\n\n    public static function GetSoapComplexTypeXml() {\n        $strToReturn = '<complexType name=\"AllowedApiOperation\"><sequence>';\n        $strToReturn .= '<element name=\"Id\" type=\"xsd:int\"/>';\n        $strToReturn .= '<element name=\"IsActive\" type=\"xsd:boolean\"/>';\n        $strToReturn .= '<element name=\"ApiKeyObject\" type=\"xsd1:ApiKey\"/>';\n        $strToReturn .= '<element name=\"SearchMetaInfo\" type=\"xsd:string\"/>';\n        $strToReturn .= '<element name=\"ApiOperationObject\" type=\"xsd1:ApiOperation\"/>';\n        $strToReturn .= '<element name=\"LastUpdated\" type=\"xsd:string\"/>';\n        $strToReturn .= '<element name=\"ObjectOwner\" type=\"xsd:int\"/>';\n        $strToReturn .= '<element name=\"__blnRestored\" type=\"xsd:boolean\"/>';\n        $strToReturn .= '</sequence></complexType>';\n        return $strToReturn;\n    }\n\n    public static function AlterSoapComplexTypeArray(&$strComplexTypeArray) {\n        if (!array_key_exists('AllowedApiOperation', $strComplexTypeArray)) {\n            $strComplexTypeArray['AllowedApiOperation'] = AllowedApiOperation::GetSoapComplexTypeXml();\n            ApiKey::AlterSoapComplexTypeArray($strComplexTypeArray);\n            ApiOperation::AlterSoapComplexTypeArray($strComplexTypeArray);\n        }\n    }\n\n    public static function GetArrayFromSoapArray($objSoapArray) {\n        $objArrayToReturn = array();\n\n        foreach ($objSoapArray as $objSoapObject)\n            array_push($objArrayToReturn, AllowedApiOperation::GetObjectFromSoapObject($objSoapObject));\n\n        return $objArrayToReturn;\n    }\n\n    public static function GetObjectFromSoapObject($objSoapObject) {\n        $objToReturn = new AllowedApiOperation();\n        if (property_exists($objSoapObject, 'Id'))\n            $objToReturn->intId = $objSoapObject->Id;\n        if (property_exists($objSoapObject, 'IsActive'))\n            $objToReturn->blnIsActive = $objSoapObject->IsActive;\n        if ((property_exists($objSoapObject, 'ApiKeyObject')) &&\n            ($objSoapObject->ApiKeyObject))\n            $objToReturn->ApiKeyObject = ApiKey::GetObjectFromSoapObject($objSoapObject->ApiKeyObject);\n        if (property_exists($objSoapObject, 'SearchMetaInfo'))\n            $objToReturn->strSearchMetaInfo = $objSoapObject->SearchMetaInfo;\n        if ((property_exists($objSoapObject, 'ApiOperationObject')) &&\n            ($objSoapObject->ApiOperationObject))\n            $objToReturn->ApiOperationObject = ApiOperation::GetObjectFromSoapObject($objSoapObject->ApiOperationObject);\n        if (property_exists($objSoapObject, 'LastUpdated'))\n            $objToReturn->strLastUpdated = $objSoapObject->LastUpdated;\n        if (property_exists($objSoapObject, 'ObjectOwner'))\n            $objToReturn->intObjectOwner = $objSoapObject->ObjectOwner;\n        if (property_exists($objSoapObject, '__blnRestored'))\n            $objToReturn->__blnRestored = $objSoapObject->__blnRestored;\n        return $objToReturn;\n    }\n\n    public static function GetSoapArrayFromArray($objArray) {\n        if (!$objArray)\n            return null;\n\n        $objArrayToReturn = array();\n\n        foreach ($objArray as $objObject)\n            array_push($objArrayToReturn, AllowedApiOperation::GetSoapObjectFromObject($objObject, true));\n\n        return unserialize(serialize($objArrayToReturn));\n    }\n\n    public static function GetSoapObjectFromObject($objObject, $blnBindRelatedObjects) {\n        if ($objObject->objApiKeyObject)\n            $objObject->objApiKeyObject = ApiKey::GetSoapObjectFromObject($objObject->objApiKeyObject, false);\n        else if (!$blnBindRelatedObjects)\n            $objObject->intApiKey = null;\n        if ($objObject->objApiOperationObject)\n            $objObject->objApiOperationObject = ApiOperation::GetSoapObjectFromObject($objObject->objApiOperationObject, false);\n        else if (!$blnBindRelatedObjects)\n            $objObject->intApiOperation = null;\n        return $objObject;\n    }\n\n\n    ////////////////////////////////////////\n    // METHODS for JSON Object Translation\n    ////////////////////////////////////////\n\n    // this function is required for objects that implement the\n    // IteratorAggregate interface\n    public function getIterator() {\n        ///////////////////\n        // Member Variables\n        ///////////////////\n        $iArray['Id'] = $this->intId;\n        $iArray['IsActive'] = $this->blnIsActive;\n        $iArray['ApiKey'] = $this->intApiKey;\n        $iArray['SearchMetaInfo'] = $this->strSearchMetaInfo;\n        $iArray['ApiOperation'] = $this->intApiOperation;\n        $iArray['LastUpdated'] = $this->strLastUpdated;\n        $iArray['ObjectOwner'] = $this->intObjectOwner;\n        return new ArrayIterator($iArray);\n    }\n\n    // this function returns a Json formatted string using the\n    // IteratorAggregate interface\n    public function getJson() {\n        return json_encode($this->getIterator());\n    }\n\n    /**\n     * Default \"toJsObject\" handler\n     * Specifies how the object should be displayed in JQuery UI lists and menus. Note that these lists use\n     * value and label differently.\n     *\n     * value \t= The short form of what to display in the list and selection.\n     * label \t= [optional] If defined, is what is displayed in the menu\n     * id \t\t= Primary key of object.\n     *\n     * @return an array that specifies how to display the object\n     */\n    public function toJsObject () {\n        return JavaScriptHelper::toJsObject(array('value' => $this->__toString(), 'id' =>  $this->intId ));\n    }\n\n\n}\n\n/////////////////////////////////////\n\t// ADDITIONAL CLASSES for DIVBLOX QUERY\n\t/////////////////////////////////////\n\n    /**\n     * @uses dxQueryNode\n     *\n     * @property-read dxQueryNode $Id\n     * @property-read dxQueryNode $IsActive\n     * @property-read dxQueryNode $ApiKey\n     * @property-read dxQueryNodeApiKey $ApiKeyObject\n     * @property-read dxQueryNode $SearchMetaInfo\n     * @property-read dxQueryNode $ApiOperation\n     * @property-read dxQueryNodeApiOperation $ApiOperationObject\n     * @property-read dxQueryNode $LastUpdated\n     * @property-read dxQueryNode $ObjectOwner\n     *\n     *\n\n     * @property-read dxQueryNode $_PrimaryKeyNode\n     **/\n\tclass dxQueryNodeAllowedApiOperation extends dxQueryNode {\n\t\tprotected $strTableName = 'AllowedApiOperation';\n\t\tprotected $strPrimaryKey = 'Id';\n\t\tprotected $strClassName = 'AllowedApiOperation';\n\t\tpublic function __get($strName) {\n\t\t\tswitch ($strName) {\n\t\t\t\tcase 'Id':\n\t\t\t\t\treturn new dxQueryNode('Id', 'Id', 'Integer', $this);\n\t\t\t\tcase 'IsActive':\n\t\t\t\t\treturn new dxQueryNode('IsActive', 'IsActive', 'Bit', $this);\n\t\t\t\tcase 'ApiKey':\n\t\t\t\t\treturn new dxQueryNode('ApiKey', 'ApiKey', 'Integer', $this);\n\t\t\t\tcase 'ApiKeyObject':\n\t\t\t\t\treturn new dxQueryNodeApiKey('ApiKey', 'ApiKeyObject', 'Integer', $this);\n\t\t\t\tcase 'SearchMetaInfo':\n\t\t\t\t\treturn new dxQueryNode('SearchMetaInfo', 'SearchMetaInfo', 'Blob', $this);\n\t\t\t\tcase 'ApiOperation':\n\t\t\t\t\treturn new dxQueryNode('ApiOperation', 'ApiOperation', 'Integer', $this);\n\t\t\t\tcase 'ApiOperationObject':\n\t\t\t\t\treturn new dxQueryNodeApiOperation('ApiOperation', 'ApiOperationObject', 'Integer', $this);\n\t\t\t\tcase 'LastUpdated':\n\t\t\t\t\treturn new dxQueryNode('LastUpdated', 'LastUpdated', 'VarChar', $this);\n\t\t\t\tcase 'ObjectOwner':\n\t\t\t\t\treturn new dxQueryNode('ObjectOwner', 'ObjectOwner', 'Integer', $this);\n\n\t\t\t\tcase '_PrimaryKeyNode':\n\t\t\t\t\treturn new dxQueryNode('Id', 'Id', 'Integer', $this);\n\t\t\t\tdefault:\n\t\t\t\t\ttry {\n\t\t\t\t\t\treturn parent::__get($strName);\n\t\t\t\t\t} catch (dxCallerException $objExc) {\n\t\t\t\t\t\t$objExc->IncrementOffset();\n\t\t\t\t\t\tthrow $objExc;\n\t\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n    /**\n     * @property-read dxQueryNode $Id\n     * @property-read dxQueryNode $IsActive\n     * @property-read dxQueryNode $ApiKey\n     * @property-read dxQueryNodeApiKey $ApiKeyObject\n     * @property-read dxQueryNode $SearchMetaInfo\n     * @property-read dxQueryNode $ApiOperation\n     * @property-read dxQueryNodeApiOperation $ApiOperationObject\n     * @property-read dxQueryNode $LastUpdated\n     * @property-read dxQueryNode $ObjectOwner\n     *\n     *\n\n     * @property-read dxQueryNode $_PrimaryKeyNode\n     **/\n\tclass dxQueryReverseReferenceNodeAllowedApiOperation extends dxQueryReverseReferenceNode {\n\t\tprotected $strTableName = 'AllowedApiOperation';\n\t\tprotected $strPrimaryKey = 'Id';\n\t\tprotected $strClassName = 'AllowedApiOperation';\n\t\tpublic function __get($strName) {\n\t\t\tswitch ($strName) {\n\t\t\t\tcase 'Id':\n\t\t\t\t\treturn new dxQueryNode('Id', 'Id', 'integer', $this);\n\t\t\t\tcase 'IsActive':\n\t\t\t\t\treturn new dxQueryNode('IsActive', 'IsActive', 'boolean', $this);\n\t\t\t\tcase 'ApiKey':\n\t\t\t\t\treturn new dxQueryNode('ApiKey', 'ApiKey', 'integer', $this);\n\t\t\t\tcase 'ApiKeyObject':\n\t\t\t\t\treturn new dxQueryNodeApiKey('ApiKey', 'ApiKeyObject', 'integer', $this);\n\t\t\t\tcase 'SearchMetaInfo':\n\t\t\t\t\treturn new dxQueryNode('SearchMetaInfo', 'SearchMetaInfo', 'string', $this);\n\t\t\t\tcase 'ApiOperation':\n\t\t\t\t\treturn new dxQueryNode('ApiOperation', 'ApiOperation', 'integer', $this);\n\t\t\t\tcase 'ApiOperationObject':\n\t\t\t\t\treturn new dxQueryNodeApiOperation('ApiOperation', 'ApiOperationObject', 'integer', $this);\n\t\t\t\tcase 'LastUpdated':\n\t\t\t\t\treturn new dxQueryNode('LastUpdated', 'LastUpdated', 'string', $this);\n\t\t\t\tcase 'ObjectOwner':\n\t\t\t\t\treturn new dxQueryNode('ObjectOwner', 'ObjectOwner', 'integer', $this);\n\n\t\t\t\tcase '_PrimaryKeyNode':\n\t\t\t\t\treturn new dxQueryNode('Id', 'Id', 'integer', $this);\n\t\t\t\tdefault:\n\t\t\t\t\ttry {\n\t\t\t\t\t\treturn parent::__get($strName);\n\t\t\t\t\t} catch (dxCallerException $objExc) {\n\t\t\t\t\t\t$objExc->IncrementOffset();\n\t\t\t\t\t\tthrow $objExc;\n\t\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n?>\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- divblox/config/database/data_model_orm/generated/AllowedApiOperationGen.class.php	(revision 8088b90ea0ab6ee30e69c949666fde75c4664610)
+++ divblox/config/database/data_model_orm/generated/AllowedApiOperationGen.class.php	(date 1589789351202)
@@ -17,10 +17,10 @@
  * @subpackage GeneratedDataObjects
  * @property-read integer $Id the value for intId (Read-Only PK)
  * @property boolean $IsActive the value for blnIsActive 
+ * @property-read string $LastUpdated the value for strLastUpdated (Read-Only Timestamp)
  * @property integer $ApiKey the value for intApiKey 
  * @property string $SearchMetaInfo the value for strSearchMetaInfo 
  * @property integer $ApiOperation the value for intApiOperation 
- * @property-read string $LastUpdated the value for strLastUpdated (Read-Only Timestamp)
  * @property integer $ObjectOwner the value for intObjectOwner 
  * @property ApiKey $ApiKeyObject the value for the ApiKey object referenced by intApiKey 
  * @property ApiOperation $ApiOperationObject the value for the ApiOperation object referenced by intApiOperation 
@@ -48,6 +48,14 @@
     const IsActiveDefault = null;
 
 
+    /**
+     * Protected member variable that maps to the database column AllowedApiOperation.LastUpdated
+     * @var string strLastUpdated
+     */
+    protected $strLastUpdated;
+    const LastUpdatedDefault = null;
+
+
     /**
      * Protected member variable that maps to the database column AllowedApiOperation.ApiKey
      * @var integer intApiKey
@@ -72,14 +80,6 @@
     const ApiOperationDefault = null;
 
 
-    /**
-     * Protected member variable that maps to the database column AllowedApiOperation.LastUpdated
-     * @var string strLastUpdated
-     */
-    protected $strLastUpdated;
-    const LastUpdatedDefault = null;
-
-
     /**
      * Protected member variable that maps to the database column AllowedApiOperation.ObjectOwner
      * @var integer intObjectOwner
@@ -134,10 +134,10 @@
     public function Initialize() {
         $this->intId = AllowedApiOperation::IdDefault;
         $this->blnIsActive = AllowedApiOperation::IsActiveDefault;
+        $this->strLastUpdated = AllowedApiOperation::LastUpdatedDefault;
         $this->intApiKey = AllowedApiOperation::ApiKeyDefault;
         $this->strSearchMetaInfo = AllowedApiOperation::SearchMetaInfoDefault;
         $this->intApiOperation = AllowedApiOperation::ApiOperationDefault;
-        $this->strLastUpdated = AllowedApiOperation::LastUpdatedDefault;
         $this->intObjectOwner = AllowedApiOperation::ObjectOwnerDefault;
     }
 
@@ -477,10 +477,10 @@
         } else {
             $objBuilder->AddSelectItem($strTableName, 'Id', $strAliasPrefix . 'Id');
             $objBuilder->AddSelectItem($strTableName, 'IsActive', $strAliasPrefix . 'IsActive');
+            $objBuilder->AddSelectItem($strTableName, 'LastUpdated', $strAliasPrefix . 'LastUpdated');
             $objBuilder->AddSelectItem($strTableName, 'ApiKey', $strAliasPrefix . 'ApiKey');
             $objBuilder->AddSelectItem($strTableName, 'SearchMetaInfo', $strAliasPrefix . 'SearchMetaInfo');
             $objBuilder->AddSelectItem($strTableName, 'ApiOperation', $strAliasPrefix . 'ApiOperation');
-            $objBuilder->AddSelectItem($strTableName, 'LastUpdated', $strAliasPrefix . 'LastUpdated');
             $objBuilder->AddSelectItem($strTableName, 'ObjectOwner', $strAliasPrefix . 'ObjectOwner');
         }
     }
@@ -609,6 +609,9 @@
         $strAlias = $strAliasPrefix . 'IsActive';
         $strAliasName = !empty($strColumnAliasArray[$strAlias]) ? $strColumnAliasArray[$strAlias] : $strAlias;
         $objToReturn->blnIsActive = $objDbRow->GetColumn($strAliasName, 'Bit');
+        $strAlias = $strAliasPrefix . 'LastUpdated';
+        $strAliasName = !empty($strColumnAliasArray[$strAlias]) ? $strColumnAliasArray[$strAlias] : $strAlias;
+        $objToReturn->strLastUpdated = $objDbRow->GetColumn($strAliasName, 'VarChar');
         $strAlias = $strAliasPrefix . 'ApiKey';
         $strAliasName = !empty($strColumnAliasArray[$strAlias]) ? $strColumnAliasArray[$strAlias] : $strAlias;
         $objToReturn->intApiKey = $objDbRow->GetColumn($strAliasName, 'Integer');
@@ -618,9 +621,6 @@
         $strAlias = $strAliasPrefix . 'ApiOperation';
         $strAliasName = !empty($strColumnAliasArray[$strAlias]) ? $strColumnAliasArray[$strAlias] : $strAlias;
         $objToReturn->intApiOperation = $objDbRow->GetColumn($strAliasName, 'Integer');
-        $strAlias = $strAliasPrefix . 'LastUpdated';
-        $strAliasName = !empty($strColumnAliasArray[$strAlias]) ? $strColumnAliasArray[$strAlias] : $strAlias;
-        $objToReturn->strLastUpdated = $objDbRow->GetColumn($strAliasName, 'VarChar');
         $strAlias = $strAliasPrefix . 'ObjectOwner';
         $strAliasName = !empty($strColumnAliasArray[$strAlias]) ? $strColumnAliasArray[$strAlias] : $strAlias;
         $objToReturn->intObjectOwner = $objDbRow->GetColumn($strAliasName, 'Integer');
@@ -857,10 +857,10 @@
             $newAuditLogEntry->ModificationType = 'Create';
             $ChangedArray = array_merge($ChangedArray,array("Id" => $this->intId));
             $ChangedArray = array_merge($ChangedArray,array("IsActive" => $this->blnIsActive));
+            $ChangedArray = array_merge($ChangedArray,array("LastUpdated" => $this->strLastUpdated));
             $ChangedArray = array_merge($ChangedArray,array("ApiKey" => $this->intApiKey));
             $ChangedArray = array_merge($ChangedArray,array("SearchMetaInfo" => $this->strSearchMetaInfo));
             $ChangedArray = array_merge($ChangedArray,array("ApiOperation" => $this->intApiOperation));
-            $ChangedArray = array_merge($ChangedArray,array("LastUpdated" => $this->strLastUpdated));
             $ChangedArray = array_merge($ChangedArray,array("ObjectOwner" => $this->intObjectOwner));
             $newAuditLogEntry->AuditLogEntryDetail = json_encode($ChangedArray);
         } else {
@@ -881,6 +881,14 @@
                 $ChangedArray = array_merge($ChangedArray,array("IsActive" => array("Before" => $ExistingValueStr,"After" => $this->blnIsActive)));
                 //$ChangedArray = array_merge($ChangedArray,array("IsActive" => "From: ".$ExistingValueStr." to: ".$this->blnIsActive));
             }
+            $ExistingValueStr = "NULL";
+            if (!is_null($ExistingObj->LastUpdated)) {
+                $ExistingValueStr = $ExistingObj->LastUpdated;
+            }
+            if ($ExistingObj->LastUpdated != $this->strLastUpdated) {
+                $ChangedArray = array_merge($ChangedArray,array("LastUpdated" => array("Before" => $ExistingValueStr,"After" => $this->strLastUpdated)));
+                //$ChangedArray = array_merge($ChangedArray,array("LastUpdated" => "From: ".$ExistingValueStr." to: ".$this->strLastUpdated));
+            }
             $ExistingValueStr = "NULL";
             if (!is_null($ExistingObj->ApiKey)) {
                 $ExistingValueStr = $ExistingObj->ApiKey;
@@ -905,14 +913,6 @@
                 $ChangedArray = array_merge($ChangedArray,array("ApiOperation" => array("Before" => $ExistingValueStr,"After" => $this->intApiOperation)));
                 //$ChangedArray = array_merge($ChangedArray,array("ApiOperation" => "From: ".$ExistingValueStr." to: ".$this->intApiOperation));
             }
-            $ExistingValueStr = "NULL";
-            if (!is_null($ExistingObj->LastUpdated)) {
-                $ExistingValueStr = $ExistingObj->LastUpdated;
-            }
-            if ($ExistingObj->LastUpdated != $this->strLastUpdated) {
-                $ChangedArray = array_merge($ChangedArray,array("LastUpdated" => array("Before" => $ExistingValueStr,"After" => $this->strLastUpdated)));
-                //$ChangedArray = array_merge($ChangedArray,array("LastUpdated" => "From: ".$ExistingValueStr." to: ".$this->strLastUpdated));
-            }
             $ExistingValueStr = "NULL";
             if (!is_null($ExistingObj->ObjectOwner)) {
                 $ExistingValueStr = $ExistingObj->ObjectOwner;
@@ -1028,10 +1028,10 @@
         $newAuditLogEntry->ModificationType = 'Delete';
         $ChangedArray = array_merge($ChangedArray,array("Id" => $this->intId));
         $ChangedArray = array_merge($ChangedArray,array("IsActive" => $this->blnIsActive));
+        $ChangedArray = array_merge($ChangedArray,array("LastUpdated" => $this->strLastUpdated));
         $ChangedArray = array_merge($ChangedArray,array("ApiKey" => $this->intApiKey));
         $ChangedArray = array_merge($ChangedArray,array("SearchMetaInfo" => $this->strSearchMetaInfo));
         $ChangedArray = array_merge($ChangedArray,array("ApiOperation" => $this->intApiOperation));
-        $ChangedArray = array_merge($ChangedArray,array("LastUpdated" => $this->strLastUpdated));
         $ChangedArray = array_merge($ChangedArray,array("ObjectOwner" => $this->intObjectOwner));
         $newAuditLogEntry->AuditLogEntryDetail = json_encode($ChangedArray);
         try {
@@ -1111,10 +1111,10 @@
 
         // Update $this's local variables to match
         $this->blnIsActive = $objReloaded->blnIsActive;
+        $this->strLastUpdated = $objReloaded->strLastUpdated;
         $this->ApiKey = $objReloaded->ApiKey;
         $this->strSearchMetaInfo = $objReloaded->strSearchMetaInfo;
         $this->ApiOperation = $objReloaded->ApiOperation;
-        $this->strLastUpdated = $objReloaded->strLastUpdated;
         $this->intObjectOwner = $objReloaded->intObjectOwner;
     }
     ////////////////////
@@ -1147,6 +1147,13 @@
                  */
                 return $this->blnIsActive;
 
+            case 'LastUpdated':
+                /**
+                 * Gets the value for strLastUpdated (Read-Only Timestamp)
+                 * @return string
+                 */
+                return $this->strLastUpdated;
+
             case 'ApiKey':
                 /**
                  * Gets the value for intApiKey 
@@ -1168,13 +1175,6 @@
                  */
                 return $this->intApiOperation;
 
-            case 'LastUpdated':
-                /**
-                 * Gets the value for strLastUpdated (Read-Only Timestamp)
-                 * @return string
-                 */
-                return $this->strLastUpdated;
-
             case 'ObjectOwner':
                 /**
                  * Gets the value for intObjectOwner 
@@ -1447,10 +1447,10 @@
         $strToReturn = '<complexType name="AllowedApiOperation"><sequence>';
         $strToReturn .= '<element name="Id" type="xsd:int"/>';
         $strToReturn .= '<element name="IsActive" type="xsd:boolean"/>';
+        $strToReturn .= '<element name="LastUpdated" type="xsd:string"/>';
         $strToReturn .= '<element name="ApiKeyObject" type="xsd1:ApiKey"/>';
         $strToReturn .= '<element name="SearchMetaInfo" type="xsd:string"/>';
         $strToReturn .= '<element name="ApiOperationObject" type="xsd1:ApiOperation"/>';
-        $strToReturn .= '<element name="LastUpdated" type="xsd:string"/>';
         $strToReturn .= '<element name="ObjectOwner" type="xsd:int"/>';
         $strToReturn .= '<element name="__blnRestored" type="xsd:boolean"/>';
         $strToReturn .= '</sequence></complexType>';
@@ -1480,6 +1480,8 @@
             $objToReturn->intId = $objSoapObject->Id;
         if (property_exists($objSoapObject, 'IsActive'))
             $objToReturn->blnIsActive = $objSoapObject->IsActive;
+        if (property_exists($objSoapObject, 'LastUpdated'))
+            $objToReturn->strLastUpdated = $objSoapObject->LastUpdated;
         if ((property_exists($objSoapObject, 'ApiKeyObject')) &&
             ($objSoapObject->ApiKeyObject))
             $objToReturn->ApiKeyObject = ApiKey::GetObjectFromSoapObject($objSoapObject->ApiKeyObject);
@@ -1488,8 +1490,6 @@
         if ((property_exists($objSoapObject, 'ApiOperationObject')) &&
             ($objSoapObject->ApiOperationObject))
             $objToReturn->ApiOperationObject = ApiOperation::GetObjectFromSoapObject($objSoapObject->ApiOperationObject);
-        if (property_exists($objSoapObject, 'LastUpdated'))
-            $objToReturn->strLastUpdated = $objSoapObject->LastUpdated;
         if (property_exists($objSoapObject, 'ObjectOwner'))
             $objToReturn->intObjectOwner = $objSoapObject->ObjectOwner;
         if (property_exists($objSoapObject, '__blnRestored'))
@@ -1534,10 +1534,10 @@
         ///////////////////
         $iArray['Id'] = $this->intId;
         $iArray['IsActive'] = $this->blnIsActive;
+        $iArray['LastUpdated'] = $this->strLastUpdated;
         $iArray['ApiKey'] = $this->intApiKey;
         $iArray['SearchMetaInfo'] = $this->strSearchMetaInfo;
         $iArray['ApiOperation'] = $this->intApiOperation;
-        $iArray['LastUpdated'] = $this->strLastUpdated;
         $iArray['ObjectOwner'] = $this->intObjectOwner;
         return new ArrayIterator($iArray);
     }
@@ -1575,12 +1575,12 @@
      *
      * @property-read dxQueryNode $Id
      * @property-read dxQueryNode $IsActive
+     * @property-read dxQueryNode $LastUpdated
      * @property-read dxQueryNode $ApiKey
      * @property-read dxQueryNodeApiKey $ApiKeyObject
      * @property-read dxQueryNode $SearchMetaInfo
      * @property-read dxQueryNode $ApiOperation
      * @property-read dxQueryNodeApiOperation $ApiOperationObject
-     * @property-read dxQueryNode $LastUpdated
      * @property-read dxQueryNode $ObjectOwner
      *
      *
@@ -1597,6 +1597,8 @@
 					return new dxQueryNode('Id', 'Id', 'Integer', $this);
 				case 'IsActive':
 					return new dxQueryNode('IsActive', 'IsActive', 'Bit', $this);
+				case 'LastUpdated':
+					return new dxQueryNode('LastUpdated', 'LastUpdated', 'VarChar', $this);
 				case 'ApiKey':
 					return new dxQueryNode('ApiKey', 'ApiKey', 'Integer', $this);
 				case 'ApiKeyObject':
@@ -1607,8 +1609,6 @@
 					return new dxQueryNode('ApiOperation', 'ApiOperation', 'Integer', $this);
 				case 'ApiOperationObject':
 					return new dxQueryNodeApiOperation('ApiOperation', 'ApiOperationObject', 'Integer', $this);
-				case 'LastUpdated':
-					return new dxQueryNode('LastUpdated', 'LastUpdated', 'VarChar', $this);
 				case 'ObjectOwner':
 					return new dxQueryNode('ObjectOwner', 'ObjectOwner', 'Integer', $this);
 
@@ -1628,12 +1628,12 @@
     /**
      * @property-read dxQueryNode $Id
      * @property-read dxQueryNode $IsActive
+     * @property-read dxQueryNode $LastUpdated
      * @property-read dxQueryNode $ApiKey
      * @property-read dxQueryNodeApiKey $ApiKeyObject
      * @property-read dxQueryNode $SearchMetaInfo
      * @property-read dxQueryNode $ApiOperation
      * @property-read dxQueryNodeApiOperation $ApiOperationObject
-     * @property-read dxQueryNode $LastUpdated
      * @property-read dxQueryNode $ObjectOwner
      *
      *
@@ -1650,6 +1650,8 @@
 					return new dxQueryNode('Id', 'Id', 'integer', $this);
 				case 'IsActive':
 					return new dxQueryNode('IsActive', 'IsActive', 'boolean', $this);
+				case 'LastUpdated':
+					return new dxQueryNode('LastUpdated', 'LastUpdated', 'string', $this);
 				case 'ApiKey':
 					return new dxQueryNode('ApiKey', 'ApiKey', 'integer', $this);
 				case 'ApiKeyObject':
@@ -1660,8 +1662,6 @@
 					return new dxQueryNode('ApiOperation', 'ApiOperation', 'integer', $this);
 				case 'ApiOperationObject':
 					return new dxQueryNodeApiOperation('ApiOperation', 'ApiOperationObject', 'integer', $this);
-				case 'LastUpdated':
-					return new dxQueryNode('LastUpdated', 'LastUpdated', 'string', $this);
 				case 'ObjectOwner':
 					return new dxQueryNode('ObjectOwner', 'ObjectOwner', 'integer', $this);
 
Index: divblox/config/database/data_model_orm/generated/AdditionalAccountInformationGen.class.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?php\n/**\n * The abstract AdditionalAccountInformationGen class defined here is\n * code-generated and contains all the basic CRUD-type functionality as well as\n * basic methods to handle relationships and index-based loading.\n *\n * To use, you should use the AdditionalAccountInformation subclass which\n * extends this AdditionalAccountInformationGen class.\n *\n * Because subsequent re-code generations will overwrite any changes to this\n * file, you should leave this file unaltered to prevent yourself from losing\n * any information or code changes.  All customizations should be done by\n * overriding existing or implementing new methods, properties and variables\n * in the AdditionalAccountInformation class.\n *\n * @package divblox_app\n * @subpackage GeneratedDataObjects\n * @property-read integer $Id the value for intId (Read-Only PK)\n * @property string $Type the value for strType \n * @property string $Label the value for strLabel \n * @property string $Value the value for strValue \n * @property integer $Account the value for intAccount \n * @property string $SearchMetaInfo the value for strSearchMetaInfo \n * @property-read string $LastUpdated the value for strLastUpdated (Read-Only Timestamp)\n * @property integer $ObjectOwner the value for intObjectOwner \n * @property Account $AccountObject the value for the Account object referenced by intAccount \n * @property-read boolean $__Restored whether or not this object was restored from the database (as opposed to created new)\n */\nclass AdditionalAccountInformationGen extends dxBaseClass implements IteratorAggregate {\n\n    ///////////////////////////////////////////////////////////////////////\n    // PROTECTED MEMBER VARIABLES and TEXT FIELD MAXLENGTHS (if applicable)\n    ///////////////////////////////////////////////////////////////////////\n\n    /**\n     * Protected member variable that maps to the database PK Identity column AdditionalAccountInformation.Id\n     * @var integer intId\n     */\n    protected $intId;\n    const IdDefault = null;\n\n\n    /**\n     * Protected member variable that maps to the database column AdditionalAccountInformation.Type\n     * @var string strType\n     */\n    protected $strType;\n    const TypeMaxLength = 150;\n    const TypeDefault = null;\n\n\n    /**\n     * Protected member variable that maps to the database column AdditionalAccountInformation.Label\n     * @var string strLabel\n     */\n    protected $strLabel;\n    const LabelMaxLength = 150;\n    const LabelDefault = null;\n\n\n    /**\n     * Protected member variable that maps to the database column AdditionalAccountInformation.Value\n     * @var string strValue\n     */\n    protected $strValue;\n    const ValueDefault = null;\n\n\n    /**\n     * Protected member variable that maps to the database column AdditionalAccountInformation.Account\n     * @var integer intAccount\n     */\n    protected $intAccount;\n    const AccountDefault = null;\n\n\n    /**\n     * Protected member variable that maps to the database column AdditionalAccountInformation.SearchMetaInfo\n     * @var string strSearchMetaInfo\n     */\n    protected $strSearchMetaInfo;\n    const SearchMetaInfoDefault = null;\n\n\n    /**\n     * Protected member variable that maps to the database column AdditionalAccountInformation.LastUpdated\n     * @var string strLastUpdated\n     */\n    protected $strLastUpdated;\n    const LastUpdatedDefault = null;\n\n\n    /**\n     * Protected member variable that maps to the database column AdditionalAccountInformation.ObjectOwner\n     * @var integer intObjectOwner\n     */\n    protected $intObjectOwner;\n    const ObjectOwnerDefault = null;\n\n\n    /**\n     * Protected array of virtual attributes for this object (e.g. extra/other calculated and/or non-object bound\n     * columns from the run-time database query result for this object).  Used by InstantiateDbRow and\n     * GetVirtualAttribute.\n     * @var string[] $__strVirtualAttributeArray\n     */\n    protected $__strVirtualAttributeArray = array();\n\n    /**\n     * Protected internal member variable that specifies whether or not this object is Restored from the database.\n     * Used by Save() to determine if Save() should perform a db UPDATE or INSERT.\n     * @var bool __blnRestored;\n     */\n    protected $__blnRestored;\n\n    ///////////////////////////////\n    // PROTECTED MEMBER OBJECTS\n    ///////////////////////////////\n\n    /**\n     * Protected member variable that contains the object pointed by the reference\n     * in the database column AdditionalAccountInformation.Account.\n     *\n     * NOTE: Always use the AccountObject property getter to correctly retrieve this Account object.\n     * (Because this class implements late binding, this variable reference MAY be null.)\n     * @var Account objAccountObject\n     */\n    protected $objAccountObject;\n\n\n    /**\n     * Initialize each property with default values from database definition\n     */\n    public function Initialize() {\n        $this->intId = AdditionalAccountInformation::IdDefault;\n        $this->strType = AdditionalAccountInformation::TypeDefault;\n        $this->strLabel = AdditionalAccountInformation::LabelDefault;\n        $this->strValue = AdditionalAccountInformation::ValueDefault;\n        $this->intAccount = AdditionalAccountInformation::AccountDefault;\n        $this->strSearchMetaInfo = AdditionalAccountInformation::SearchMetaInfoDefault;\n        $this->strLastUpdated = AdditionalAccountInformation::LastUpdatedDefault;\n        $this->intObjectOwner = AdditionalAccountInformation::ObjectOwnerDefault;\n    }\n\n    ///////////////////////////////\n    // CLASS-WIDE LOAD AND COUNT METHODS\n    ///////////////////////////////\n\n    /**\n     * Static method to retrieve the Database object that owns this class.\n     * @return dxDatabaseBase reference to the Database object that can query this class\n     */\n    public static function GetDatabase() {\n        return ProjectFunctions::$Database[1];\n    }\n\n    /**\n     * Load a AdditionalAccountInformation from PK Info\n     * @param integer $intId\n     * @param dxQueryClause[] $objOptionalClauses additional optional dxQueryClause objects for this query\n     * @return AdditionalAccountInformation\n     */\n    public static function Load($intId, $objOptionalClauses = null) {\n        $strCacheKey = false;\n        if (ProjectFunctions::$objCacheProvider && !$objOptionalClauses && ProjectFunctions::$Database[1]->Caching) {\n            $strCacheKey = ProjectFunctions::$objCacheProvider->CreateKey(ProjectFunctions::$Database[1]->Database, 'AdditionalAccountInformation', $intId);\n            $objCachedObject = ProjectFunctions::$objCacheProvider->Get($strCacheKey);\n            if ($objCachedObject !== false) {\n                return $objCachedObject;\n            }\n        }\n        // Use QuerySingle to Perform the Query\n        $objToReturn = AdditionalAccountInformation::QuerySingle(\n            dxQuery::AndCondition(\n                dxQuery::Equal(dxQueryN::AdditionalAccountInformation()->Id, $intId)\n            ),\n            $objOptionalClauses\n        );\n        if ($strCacheKey !== false) {\n            ProjectFunctions::$objCacheProvider->Set($strCacheKey, $objToReturn);\n        }\n        return $objToReturn;\n    }\n\n    /**\n     * Load all AdditionalAccountInformations\n     * @param dxQueryClause[] $objOptionalClauses additional optional dxQueryClause objects for this query\n     * @return AdditionalAccountInformation[]\n     */\n    public static function LoadAll($objOptionalClauses = null) {\n        if (func_num_args() > 1) {\n            throw new dxCallerException(\"LoadAll must be called with an array of optional clauses as a single argument\");\n        }\n        // Call AdditionalAccountInformation::QueryArray to perform the LoadAll query\n        try {\n            return AdditionalAccountInformation::QueryArray(dxQuery::All(), $objOptionalClauses);\n        } catch (dxCallerException $objExc) {\n            $objExc->IncrementOffset();\n            throw $objExc;\n        }\n    }\n\n    /**\n     * Count all AdditionalAccountInformations\n     * @return int\n     */\n    public static function CountAll() {\n        // Call AdditionalAccountInformation::QueryCount to perform the CountAll query\n        return AdditionalAccountInformation::QueryCount(dxQuery::All());\n    }\n\n    ///////////////////////////////\n    // DIVBLOX QUERY-RELATED METHODS\n    ///////////////////////////////\n\n    /**\n     * Internally called method to assist with calling divblox Query for this class\n     * on load methods.\n     * @param dxQueryBuilder &$objQueryBuilder the QueryBuilder object that will be created\n     * @param dxQueryCondition $objConditions any conditions on the query, itself\n     * @param dxQueryClause[] $objOptionalClausees additional optional dxQueryClause object or array of dxQueryClause objects for this query\n     * @param mixed[] $mixParameterArray a array of name-value pairs to perform PrepareStatement with (sending in null will skip the PrepareStatement step)\n     * @param boolean $blnCountOnly only select a rowcount\n     * @return string the query statement\n     */\n    protected static function BuildQueryStatement(&$objQueryBuilder, dxQueryCondition $objConditions, $objOptionalClauses, $mixParameterArray, $blnCountOnly) {\n        // Get the Database Object for this Class\n        $objDatabase = AdditionalAccountInformation::GetDatabase();\n\n        // Create/Build out the QueryBuilder object with AdditionalAccountInformation-specific SELET and FROM fields\n        $objQueryBuilder = new dxQueryBuilder($objDatabase, 'AdditionalAccountInformation');\n\n        $blnAddAllFieldsToSelect = true;\n        if ($objDatabase->OnlyFullGroupBy) {\n            // see if we have any group by or aggregation clauses, if yes, don't add the fields to select clause\n            if ($objOptionalClauses instanceof dxQueryClause) {\n                if ($objOptionalClauses instanceof dxQueryAggregationClause || $objOptionalClauses instanceof dxQueryGroupBy) {\n                    $blnAddAllFieldsToSelect = false;\n                }\n            } else if (is_array($objOptionalClauses)) {\n                foreach ($objOptionalClauses as $objClause) {\n                    if ($objClause instanceof dxQueryAggregationClause || $objClause instanceof dxQueryGroupBy) {\n                        $blnAddAllFieldsToSelect = false;\n                        break;\n                    }\n                }\n            }\n        }\n        if ($blnAddAllFieldsToSelect) {\n            AdditionalAccountInformation::GetSelectFields($objQueryBuilder, null, dxQuery::extractSelectClause($objOptionalClauses));\n        }\n        $objQueryBuilder->AddFromItem('AdditionalAccountInformation');\n\n        // Set \"CountOnly\" option (if applicable)\n        if ($blnCountOnly)\n            $objQueryBuilder->SetCountOnlyFlag();\n\n        // Apply Any Conditions\n        if ($objConditions)\n            try {\n                $objConditions->UpdateQueryBuilder($objQueryBuilder);\n            } catch (dxCallerException $objExc) {\n                $objExc->IncrementOffset();\n                throw $objExc;\n            }\n\n        // Iterate through all the Optional Clauses (if any) and perform accordingly\n        if ($objOptionalClauses) {\n            if ($objOptionalClauses instanceof dxQueryClause)\n                $objOptionalClauses->UpdateQueryBuilder($objQueryBuilder);\n            else if (is_array($objOptionalClauses))\n                foreach ($objOptionalClauses as $objClause)\n                    $objClause->UpdateQueryBuilder($objQueryBuilder);\n            else\n                throw new dxCallerException('Optional Clauses must be a dxQueryClause object or an array of dxQueryClause objects');\n        }\n\n        // Get the SQL Statement\n        $strQuery = $objQueryBuilder->GetStatement();\n\n        // Prepare the Statement with the Query Parameters (if applicable)\n        if ($mixParameterArray) {\n            if (is_array($mixParameterArray)) {\n                if (ProjectFunctions::getDataSetSize($mixParameterArray))\n                    $strQuery = $objDatabase->PrepareStatement($strQuery, $mixParameterArray);\n\n                // Ensure that there are no other Unresolved Named Parameters\n                if (strpos($strQuery, chr(dxQueryNamedValue::DelimiterCode) . '{') !== false)\n                    throw new dxCallerException('Unresolved named parameters in the query');\n            } else\n                throw new dxCallerException('Parameter Array must be an array of name-value parameter pairs');\n        }\n\n        // Return the Objects\n        return $strQuery;\n    }\n\n    /**\n     * Static divblox Query method to query for a single AdditionalAccountInformation object.\n     * Uses BuildQueryStatment to perform most of the work.\n     * @param dxQueryCondition $objConditions any conditions on the query, itself\n     * @param dxQueryClause[] $objOptionalClausees additional optional dxQueryClause objects for this query\n     * @param mixed[] $mixParameterArray a array of name-value pairs to perform PrepareStatement with\n     * @return AdditionalAccountInformation the queried object\n     */\n    public static function QuerySingle(dxQueryCondition $objConditions, $objOptionalClauses = null, $mixParameterArray = null) {\n        // Get the Query Statement\n        try {\n            $strQuery = AdditionalAccountInformation::BuildQueryStatement($objQueryBuilder, $objConditions, $objOptionalClauses, $mixParameterArray, false);\n        } catch (dxCallerException $objExc) {\n            $objExc->IncrementOffset();\n            throw $objExc;\n        }\n\n        // Perform the Query, Get the First Row, and Instantiate a new AdditionalAccountInformation object\n        $objDbResult = $objQueryBuilder->Database->Query($strQuery);\n\n        // Do we have to expand anything?\n        if ($objQueryBuilder->ExpandAsArrayNode) {\n            $objToReturn = array();\n            $objPrevItemArray = array();\n            while ($objDbRow = $objDbResult->GetNextRow()) {\n                $objItem = AdditionalAccountInformation::InstantiateDbRow($objDbRow, null, $objQueryBuilder->ExpandAsArrayNode, $objPrevItemArray, $objQueryBuilder->ColumnAliasArray);\n                if ($objItem) {\n                    $objToReturn[] = $objItem;\n                    $objPrevItemArray[$objItem->intId][] = $objItem;\n                }\n            }\n            if (ProjectFunctions::getDataSetSize($objToReturn)) {\n                // Since we only want the object to return, lets return the object and not the array.\n                return $objToReturn[0];\n            } else {\n                return null;\n            }\n        } else {\n            // No expands just return the first row\n            $objDbRow = $objDbResult->GetNextRow();\n            if(null === $objDbRow)\n                return null;\n            return AdditionalAccountInformation::InstantiateDbRow($objDbRow, null, null, null, $objQueryBuilder->ColumnAliasArray);\n        }\n    }\n\n    /**\n     * Static divblox Query method to query for an array of AdditionalAccountInformation objects.\n     * Uses BuildQueryStatment to perform most of the work.\n     * @param dxQueryCondition $objConditions any conditions on the query, itself\n     * @param dxQueryClause[] $objOptionalClausees additional optional dxQueryClause objects for this query\n     * @param mixed[] $mixParameterArray a array of name-value pairs to perform PrepareStatement with\n     * @return AdditionalAccountInformation[] the queried objects as an array\n     */\n    public static function QueryArray(dxQueryCondition $objConditions, $objOptionalClauses = null, $mixParameterArray = null) {\n        // Get the Query Statement\n        try {\n            $strQuery = AdditionalAccountInformation::BuildQueryStatement($objQueryBuilder, $objConditions, $objOptionalClauses, $mixParameterArray, false);\n        } catch (dxCallerException $objExc) {\n            $objExc->IncrementOffset();\n            throw $objExc;\n        }\n\n        // Perform the Query and Instantiate the Array Result\n        $objDbResult = $objQueryBuilder->Database->Query($strQuery);\n        return AdditionalAccountInformation::InstantiateDbResult($objDbResult, $objQueryBuilder->ExpandAsArrayNode, $objQueryBuilder->ColumnAliasArray);\n    }\n\n    /**\n     * Static divblox query method to issue a query and get a cursor to progressively fetch its results.\n     * Uses BuildQueryStatment to perform most of the work.\n     * @param dxQueryCondition $objConditions any conditions on the query, itself\n     * @param dxQueryClause[] $objOptionalClauses additional optional dxQueryClause objects for this query\n     * @param mixed[] $mixParameterArray a array of name-value pairs to perform PrepareStatement with\n     * @return dxDatabaseResultBase the cursor resource instance\n     */\n    public static function QueryCursor(dxQueryCondition $objConditions, $objOptionalClauses = null, $mixParameterArray = null) {\n        // Get the query statement\n        try {\n            $strQuery = AdditionalAccountInformation::BuildQueryStatement($objQueryBuilder, $objConditions, $objOptionalClauses, $mixParameterArray, false);\n        } catch (dxCallerException $objExc) {\n            $objExc->IncrementOffset();\n            throw $objExc;\n        }\n\n        // Perform the query\n        $objDbResult = $objQueryBuilder->Database->Query($strQuery);\n\n        // Return the results cursor\n        $objDbResult->QueryBuilder = $objQueryBuilder;\n        return $objDbResult;\n    }\n\n    /**\n     * Static divblox Query method to query for a count of AdditionalAccountInformation objects.\n     * Uses BuildQueryStatment to perform most of the work.\n     * @param dxQueryCondition $objConditions any conditions on the query, itself\n     * @param dxQueryClause[] $objOptionalClausees additional optional dxQueryClause objects for this query\n     * @param mixed[] $mixParameterArray a array of name-value pairs to perform PrepareStatement with\n     * @return integer the count of queried objects as an integer\n     */\n    public static function QueryCount(dxQueryCondition $objConditions, $objOptionalClauses = null, $mixParameterArray = null) {\n        // Get the Query Statement\n        try {\n            $strQuery = AdditionalAccountInformation::BuildQueryStatement($objQueryBuilder, $objConditions, $objOptionalClauses, $mixParameterArray, true);\n        } catch (dxCallerException $objExc) {\n            $objExc->IncrementOffset();\n            throw $objExc;\n        }\n\n        // Perform the Query and return the row_count\n        $objDbResult = $objQueryBuilder->Database->Query($strQuery);\n\n        // Figure out if the query is using GroupBy\n        $blnGrouped = false;\n\n        if ($objOptionalClauses) {\n            if ($objOptionalClauses instanceof dxQueryClause) {\n                if ($objOptionalClauses instanceof dxQueryGroupBy) {\n                    $blnGrouped = true;\n                }\n            } else if (is_array($objOptionalClauses)) {\n                foreach ($objOptionalClauses as $objClause) {\n                    if ($objClause instanceof dxQueryGroupBy) {\n                        $blnGrouped = true;\n                        break;\n                    }\n                }\n            } else {\n                throw new dxCallerException('Optional Clauses must be a dxQueryClause object or an array of dxQueryClause objects');\n            }\n        }\n\n        if ($blnGrouped)\n            // Groups in this query - return the count of Groups (which is the count of all rows)\n            return $objDbResult->CountRows();\n        else {\n            // No Groups - return the sql-calculated count(*) value\n            $strDbRow = $objDbResult->FetchRow();\n            return dxType::Cast($strDbRow[0], dxType::Integer);\n        }\n    }\n\n    public static function QueryArrayCached(dxQueryCondition $objConditions, $objOptionalClauses = null, $mixParameterArray = null, $blnForceUpdate = false) {\n        // Get the Database Object for this Class\n        $objDatabase = AdditionalAccountInformation::GetDatabase();\n\n        $strQuery = AdditionalAccountInformation::BuildQueryStatement($objQueryBuilder, $objConditions, $objOptionalClauses, $mixParameterArray, false);\n\n        $objCache = new dxCache('dxquery/additionalaccountinformation', $strQuery);\n        $cacheData = $objCache->GetData();\n\n        if (!$cacheData || $blnForceUpdate) {\n            $objDbResult = $objQueryBuilder->Database->Query($strQuery);\n            $arrResult = AdditionalAccountInformation::InstantiateDbResult($objDbResult, $objQueryBuilder->ExpandAsArrayNode, $objQueryBuilder->ColumnAliasArray);\n            $objCache->SaveData(serialize($arrResult));\n        } else {\n            $arrResult = unserialize($cacheData);\n        }\n\n        return $arrResult;\n    }\n\n    /**\n     * Updates a dxQueryBuilder with the SELECT fields for this AdditionalAccountInformation\n     * @param dxQueryBuilder $objBuilder the Query Builder object to update\n     * @param string $strPrefix optional prefix to add to the SELECT fields\n     */\n    public static function GetSelectFields(dxQueryBuilder $objBuilder, $strPrefix = null, dxQuerySelect $objSelect = null) {\n        if ($strPrefix) {\n            $strTableName = $strPrefix;\n            $strAliasPrefix = $strPrefix . '__';\n        } else {\n            $strTableName = 'AdditionalAccountInformation';\n            $strAliasPrefix = '';\n        }\n\n        if ($objSelect) {\n            $objBuilder->AddSelectItem($strTableName, 'Id', $strAliasPrefix . 'Id');\n            $objSelect->AddSelectItems($objBuilder, $strTableName, $strAliasPrefix);\n        } else {\n            $objBuilder->AddSelectItem($strTableName, 'Id', $strAliasPrefix . 'Id');\n            $objBuilder->AddSelectItem($strTableName, 'Type', $strAliasPrefix . 'Type');\n            $objBuilder->AddSelectItem($strTableName, 'Label', $strAliasPrefix . 'Label');\n            $objBuilder->AddSelectItem($strTableName, 'Value', $strAliasPrefix . 'Value');\n            $objBuilder->AddSelectItem($strTableName, 'Account', $strAliasPrefix . 'Account');\n            $objBuilder->AddSelectItem($strTableName, 'SearchMetaInfo', $strAliasPrefix . 'SearchMetaInfo');\n            $objBuilder->AddSelectItem($strTableName, 'LastUpdated', $strAliasPrefix . 'LastUpdated');\n            $objBuilder->AddSelectItem($strTableName, 'ObjectOwner', $strAliasPrefix . 'ObjectOwner');\n        }\n    }\n    ///////////////////////////////\n    // INSTANTIATION-RELATED METHODS\n    ///////////////////////////////\n\n    /**\n     * Do a possible array expansion on the given node. If the node is an ExpandAsArray node,\n     * it will add to the corresponding array in the object. Otherwise, it will follow the node\n     * so that any leaf expansions can be handled.\n     *\n     * @param DatabaseRowBase $objDbRow\n     * @param dxQueryBaseNode $objChildNode\n     * @param dxBaseClass $objPreviousItem\n     * @param string[] $strColumnAliasArray\n     */\n\n    public static function ExpandArray ($objDbRow, $strAliasPrefix, $objNode, $objPreviousItemArray, $strColumnAliasArray) {\n        if (!$objNode->ChildNodeArray) {\n            return false;\n        }\n\n        $strAlias = $strAliasPrefix . 'Id';\n        $strColumnAlias = !empty($strColumnAliasArray[$strAlias]) ? $strColumnAliasArray[$strAlias] : $strAlias;\n        $blnExpanded = false;\n\n        foreach ($objPreviousItemArray as $objPreviousItem) {\n            if ($objPreviousItem->intId != $objDbRow->GetColumn($strColumnAlias, 'Integer')) {\n                continue;\n            }\n\n            foreach ($objNode->ChildNodeArray as $objChildNode) {\n                $strPropName = $objChildNode->_PropertyName;\n                $strClassName = $objChildNode->_ClassName;\n                $blnExpanded = false;\n                $strLongAlias = $objChildNode->ExtendedAlias();\n\n                if ($objChildNode->ExpandAsArray) {\n                    $strVarName = '_obj' . $strPropName . 'Array';\n                    if (null === $objPreviousItem->$strVarName) {\n                        $objPreviousItem->$strVarName = array();\n                    }\n                    if ($intPreviousChildItemCount = ProjectFunctions::getDataSetSize($objPreviousItem->$strVarName)) {\n                        $objPreviousChildItems = $objPreviousItem->$strVarName;\n                        if ($objChildNode->_Type == \"association\") {\n                            $objChildNode = $objChildNode->FirstChild();\n                        }\n                        $nextAlias = $objChildNode->ExtendedAlias() . '__';\n\n                        $objChildItem = call_user_func(array ($strClassName, 'InstantiateDbRow'), $objDbRow, $nextAlias, $objChildNode, $objPreviousChildItems, $strColumnAliasArray);\n                        if ($objChildItem) {\n                            $objPreviousItem->{$strVarName}[] = $objChildItem;\n                            $blnExpanded = true;\n                        } elseif ($objChildItem === false) {\n                            $blnExpanded = true;\n                        }\n                    }\n                } else {\n\n                    // Follow single node if keys match\n                    $nodeType = $objChildNode->_Type;\n                    if ($nodeType == 'reverse_reference' || $nodeType == 'association') {\n                        $strVarName = '_obj' . $strPropName;\n                    } else {\n                        $strVarName = 'obj' . $strPropName;\n                    }\n\n                    if (null === $objPreviousItem->$strVarName) {\n                        return false;\n                    }\n\n                    $objPreviousChildItems = array($objPreviousItem->$strVarName);\n                    $blnResult = call_user_func(array ($strClassName, 'ExpandArray'), $objDbRow, $strLongAlias . '__', $objChildNode, $objPreviousChildItems, $strColumnAliasArray);\n\n                    if ($blnResult) {\n                        $blnExpanded = true;\n                    }\n                }\n            }\n        }\n        return $blnExpanded;\n    }\n\n    /**\n     * Instantiate a AdditionalAccountInformation from a Database Row.\n     * Takes in an optional strAliasPrefix, used in case another Object::InstantiateDbRow\n     * is calling this AdditionalAccountInformation::InstantiateDbRow in order to perform\n     * early binding on referenced objects.\n     * @param DatabaseRowBase $objDbRow\n     * @param string $strAliasPrefix\n     * @param dxQueryBaseNode $objExpandAsArrayNode\n     * @param dxBaseClass $arrPreviousItem\n     * @param string[] $strColumnAliasArray\n     * @return mixed Either a AdditionalAccountInformation, or false to indicate the dbrow was used in an expansion, or null to indicate that this leaf is a duplicate.\n    */\n    public static function InstantiateDbRow($objDbRow, $strAliasPrefix = null, $objExpandAsArrayNode = null, $objPreviousItemArray = null, $strColumnAliasArray = array()) {\n        // If blank row, return null\n        if (!$objDbRow) {\n            return null;\n        }\n\n        if (empty ($strAliasPrefix) && $objPreviousItemArray) {\n            $strColumnAlias = !empty($strColumnAliasArray['Id']) ? $strColumnAliasArray['Id'] : 'Id';\n            $key = $objDbRow->GetColumn($strColumnAlias, 'Integer');\n            $objPreviousItemArray = (!empty ($objPreviousItemArray[$key]) ? $objPreviousItemArray[$key] : null);\n        }\n\n        // See if we're doing an array expansion on the previous item\n        if ($objExpandAsArrayNode &&\n                is_array($objPreviousItemArray) &&\n                ProjectFunctions::getDataSetSize($objPreviousItemArray)) {\n\n            if (AdditionalAccountInformation::ExpandArray ($objDbRow, $strAliasPrefix, $objExpandAsArrayNode, $objPreviousItemArray, $strColumnAliasArray)) {\n                return false; // db row was used but no new object was created\n            }\n        }\n\n        // Create a new instance of the AdditionalAccountInformation object\n        $objToReturn = new AdditionalAccountInformation();\n        $objToReturn->__blnRestored = true;\n\n        $strAlias = $strAliasPrefix . 'Id';\n        $strAliasName = !empty($strColumnAliasArray[$strAlias]) ? $strColumnAliasArray[$strAlias] : $strAlias;\n        $objToReturn->intId = $objDbRow->GetColumn($strAliasName, 'Integer');\n        $strAlias = $strAliasPrefix . 'Type';\n        $strAliasName = !empty($strColumnAliasArray[$strAlias]) ? $strColumnAliasArray[$strAlias] : $strAlias;\n        $objToReturn->strType = $objDbRow->GetColumn($strAliasName, 'VarChar');\n        $strAlias = $strAliasPrefix . 'Label';\n        $strAliasName = !empty($strColumnAliasArray[$strAlias]) ? $strColumnAliasArray[$strAlias] : $strAlias;\n        $objToReturn->strLabel = $objDbRow->GetColumn($strAliasName, 'VarChar');\n        $strAlias = $strAliasPrefix . 'Value';\n        $strAliasName = !empty($strColumnAliasArray[$strAlias]) ? $strColumnAliasArray[$strAlias] : $strAlias;\n        $objToReturn->strValue = $objDbRow->GetColumn($strAliasName, 'Blob');\n        $strAlias = $strAliasPrefix . 'Account';\n        $strAliasName = !empty($strColumnAliasArray[$strAlias]) ? $strColumnAliasArray[$strAlias] : $strAlias;\n        $objToReturn->intAccount = $objDbRow->GetColumn($strAliasName, 'Integer');\n        $strAlias = $strAliasPrefix . 'SearchMetaInfo';\n        $strAliasName = !empty($strColumnAliasArray[$strAlias]) ? $strColumnAliasArray[$strAlias] : $strAlias;\n        $objToReturn->strSearchMetaInfo = $objDbRow->GetColumn($strAliasName, 'Blob');\n        $strAlias = $strAliasPrefix . 'LastUpdated';\n        $strAliasName = !empty($strColumnAliasArray[$strAlias]) ? $strColumnAliasArray[$strAlias] : $strAlias;\n        $objToReturn->strLastUpdated = $objDbRow->GetColumn($strAliasName, 'VarChar');\n        $strAlias = $strAliasPrefix . 'ObjectOwner';\n        $strAliasName = !empty($strColumnAliasArray[$strAlias]) ? $strColumnAliasArray[$strAlias] : $strAlias;\n        $objToReturn->intObjectOwner = $objDbRow->GetColumn($strAliasName, 'Integer');\n\n        if (isset($objPreviousItemArray) && is_array($objPreviousItemArray)) {\n            foreach ($objPreviousItemArray as $objPreviousItem) {\n                if ($objToReturn->Id != $objPreviousItem->Id) {\n                    continue;\n                }\n                // this is a duplicate leaf in a complex join\n                return null; // indicates no object created and the db row has not been used\n            }\n        }\n\n        // Instantiate Virtual Attributes\n        $strVirtualPrefix = $strAliasPrefix . '__';\n        $strVirtualPrefixLength = strlen($strVirtualPrefix);\n        foreach ($objDbRow->GetColumnNameArray() as $strColumnName => $mixValue) {\n            if (strncmp($strColumnName, $strVirtualPrefix, $strVirtualPrefixLength) == 0)\n                $objToReturn->__strVirtualAttributeArray[substr($strColumnName, $strVirtualPrefixLength)] = $mixValue;\n        }\n\n\n        // Prepare to Check for Early/Virtual Binding\n\n        $objExpansionAliasArray = array();\n        if ($objExpandAsArrayNode) {\n            $objExpansionAliasArray = $objExpandAsArrayNode->ChildNodeArray;\n        }\n\n        if (!$strAliasPrefix)\n            $strAliasPrefix = 'AdditionalAccountInformation__';\n\n        // Check for AccountObject Early Binding\n        $strAlias = $strAliasPrefix . 'Account__Id';\n        $strAliasName = !empty($strColumnAliasArray[$strAlias]) ? $strColumnAliasArray[$strAlias] : $strAlias;\n        if (!is_null($objDbRow->GetColumn($strAliasName))) {\n            $objExpansionNode = (empty($objExpansionAliasArray['Account']) ? null : $objExpansionAliasArray['Account']);\n            $objToReturn->objAccountObject = Account::InstantiateDbRow($objDbRow, $strAliasPrefix . 'Account__', $objExpansionNode, null, $strColumnAliasArray);\n        }\n\n\n\n        return $objToReturn;\n    }\n\n    /**\n     * Instantiate an array of AdditionalAccountInformations from a Database Result\n     * @param DatabaseResultBase $objDbResult\n     * @param dxQueryBaseNode $objExpandAsArrayNode\n     * @param string[] $strColumnAliasArray\n     * @return AdditionalAccountInformation[]\n     */\n    public static function InstantiateDbResult(dxDatabaseResultBase $objDbResult, $objExpandAsArrayNode = null, $strColumnAliasArray = null) {\n        $objToReturn = array();\n\n        if (!$strColumnAliasArray)\n            $strColumnAliasArray = array();\n\n        // If blank resultset, then return empty array\n        if (!$objDbResult)\n            return $objToReturn;\n\n        // Load up the return array with each row\n        if ($objExpandAsArrayNode) {\n            $objToReturn = array();\n            $objPrevItemArray = array();\n            while ($objDbRow = $objDbResult->GetNextRow()) {\n                $objItem = AdditionalAccountInformation::InstantiateDbRow($objDbRow, null, $objExpandAsArrayNode, $objPrevItemArray, $strColumnAliasArray);\n                if ($objItem) {\n                    $objToReturn[] = $objItem;\n                    $objPrevItemArray[$objItem->intId][] = $objItem;\n                }\n            }\n        } else {\n            while ($objDbRow = $objDbResult->GetNextRow())\n                $objToReturn[] = AdditionalAccountInformation::InstantiateDbRow($objDbRow, null, null, null, $strColumnAliasArray);\n        }\n\n        return $objToReturn;\n    }\n\n\n    /**\n     * Instantiate a single AdditionalAccountInformation object from a query cursor (e.g. a DB ResultSet).\n     * Cursor is automatically moved to the \"next row\" of the result set.\n     * Will return NULL if no cursor or if the cursor has no more rows in the resultset.\n     * @param dxDatabaseResultBase $objDbResult cursor resource\n     * @return AdditionalAccountInformation next row resulting from the query\n     */\n    public static function InstantiateCursor(dxDatabaseResultBase $objDbResult) {\n        // If blank resultset, then return empty result\n        if (!$objDbResult) return null;\n\n        // If empty resultset, then return empty result\n        $objDbRow = $objDbResult->GetNextRow();\n        if (!$objDbRow) return null;\n\n        // We need the Column Aliases\n        $strColumnAliasArray = $objDbResult->QueryBuilder->ColumnAliasArray;\n        if (!$strColumnAliasArray) $strColumnAliasArray = array();\n\n        // Pull Expansions\n        $objExpandAsArrayNode = $objDbResult->QueryBuilder->ExpandAsArrayNode;\n        if (!empty ($objExpandAsArrayNode)) {\n            throw new dxCallerException (\"Cannot use InstantiateCursor with ExpandAsArray\");\n        }\n\n        // Load up the return result with a row and return it\n        return AdditionalAccountInformation::InstantiateDbRow($objDbRow, null, null, null, $strColumnAliasArray);\n    }\n\n    ///////////////////////////////////////////////////\n    // INDEX-BASED LOAD METHODS (Single Load and Array)\n    ///////////////////////////////////////////////////\n\n    /**\n     * Load a single AdditionalAccountInformation object,\n     * by Id Index(es)\n     * @param integer $intId\n     * @param dxQueryClause[] $objOptionalClauses additional optional dxQueryClause objects for this query\n     * @return AdditionalAccountInformation\n    */\n    public static function LoadById($intId, $objOptionalClauses = null) {\n        return AdditionalAccountInformation::QuerySingle(\n            dxQuery::AndCondition(\n                dxQuery::Equal(dxQueryN::AdditionalAccountInformation()->Id, $intId)\n            ),\n            $objOptionalClauses\n        );\n    }\n\n    /**\n     * Load an array of AdditionalAccountInformation objects,\n     * by Account Index(es)\n     * @param integer $intAccount\n     * @param dxQueryClause[] $objOptionalClauses additional optional dxQueryClause objects for this query\n     * @return AdditionalAccountInformation[]\n    */\n    public static function LoadArrayByAccount($intAccount, $objOptionalClauses = null) {\n        // Call AdditionalAccountInformation::QueryArray to perform the LoadArrayByAccount query\n        try {\n            return AdditionalAccountInformation::QueryArray(\n                dxQuery::Equal(dxQueryN::AdditionalAccountInformation()->Account, $intAccount),\n                $objOptionalClauses);\n        } catch (dxCallerException $objExc) {\n            $objExc->IncrementOffset();\n            throw $objExc;\n        }\n    }\n\n    /**\n     * Count AdditionalAccountInformations\n     * by Account Index(es)\n     * @param integer $intAccount\n     * @return int\n    */\n    public static function CountByAccount($intAccount) {\n        // Call AdditionalAccountInformation::QueryCount to perform the CountByAccount query\n        return AdditionalAccountInformation::QueryCount(\n            dxQuery::Equal(dxQueryN::AdditionalAccountInformation()->Account, $intAccount)\n        );\n    }\n    ////////////////////////////////////////////////////\n    // INDEX-BASED LOAD METHODS (Array via Many to Many)\n    ////////////////////////////////////////////////////\n\n\n    //////////////////////////\n    // SAVE, DELETE AND RELOAD\n    //////////////////////////\n\n    /**\n    * Save this AdditionalAccountInformation\n    * @param bool $blnForceInsert\n    * @param bool $blnForceUpdate\n    * @return int\n    */\n    public function Save($blnForceInsert = false, $blnForceUpdate = false) {\n        $ObjectAccessArray = ProjectAccessManager::getObjectAccess(ProjectFunctions::getCurrentAccountId(),\"AdditionalAccountInformation\",$this->intId);\n        // Get the Database Object for this Class\n        $objDatabase = AdditionalAccountInformation::GetDatabase();\n        $mixToReturn = null;\n        if (!is_numeric($this->intObjectOwner)) {\n            $this->intObjectOwner = ProjectFunctions::getCurrentAccountId();\n        }\n        $ExistingObj = AdditionalAccountInformation::Load($this->intId);\n        $newAuditLogEntry = new AuditLogEntry();\n        $ChangedArray = array();\n        $newAuditLogEntry->EntryTimeStamp = dxDateTime::Now();\n        $newAuditLogEntry->ObjectId = $this->intId;\n        $newAuditLogEntry->ObjectName = 'AdditionalAccountInformation';\n        $newAuditLogEntry->UserEmail = ProjectFunctions::getCurrentUserEmailForAudit();\n        if (!$ExistingObj) {\n            $newAuditLogEntry->ModificationType = 'Create';\n            $ChangedArray = array_merge($ChangedArray,array(\"Id\" => $this->intId));\n            $ChangedArray = array_merge($ChangedArray,array(\"Type\" => $this->strType));\n            $ChangedArray = array_merge($ChangedArray,array(\"Label\" => $this->strLabel));\n            $ChangedArray = array_merge($ChangedArray,array(\"Value\" => $this->strValue));\n            $ChangedArray = array_merge($ChangedArray,array(\"Account\" => $this->intAccount));\n            $ChangedArray = array_merge($ChangedArray,array(\"SearchMetaInfo\" => $this->strSearchMetaInfo));\n            $ChangedArray = array_merge($ChangedArray,array(\"LastUpdated\" => $this->strLastUpdated));\n            $ChangedArray = array_merge($ChangedArray,array(\"ObjectOwner\" => $this->intObjectOwner));\n            $newAuditLogEntry->AuditLogEntryDetail = json_encode($ChangedArray);\n        } else {\n            $newAuditLogEntry->ModificationType = 'Update';\n            $ExistingValueStr = \"NULL\";\n            if (!is_null($ExistingObj->Id)) {\n                $ExistingValueStr = $ExistingObj->Id;\n            }\n            if ($ExistingObj->Id != $this->intId) {\n                $ChangedArray = array_merge($ChangedArray,array(\"Id\" => array(\"Before\" => $ExistingValueStr,\"After\" => $this->intId)));\n                //$ChangedArray = array_merge($ChangedArray,array(\"Id\" => \"From: \".$ExistingValueStr.\" to: \".$this->intId));\n            }\n            $ExistingValueStr = \"NULL\";\n            if (!is_null($ExistingObj->Type)) {\n                $ExistingValueStr = $ExistingObj->Type;\n            }\n            if ($ExistingObj->Type != $this->strType) {\n                $ChangedArray = array_merge($ChangedArray,array(\"Type\" => array(\"Before\" => $ExistingValueStr,\"After\" => $this->strType)));\n                //$ChangedArray = array_merge($ChangedArray,array(\"Type\" => \"From: \".$ExistingValueStr.\" to: \".$this->strType));\n            }\n            $ExistingValueStr = \"NULL\";\n            if (!is_null($ExistingObj->Label)) {\n                $ExistingValueStr = $ExistingObj->Label;\n            }\n            if ($ExistingObj->Label != $this->strLabel) {\n                $ChangedArray = array_merge($ChangedArray,array(\"Label\" => array(\"Before\" => $ExistingValueStr,\"After\" => $this->strLabel)));\n                //$ChangedArray = array_merge($ChangedArray,array(\"Label\" => \"From: \".$ExistingValueStr.\" to: \".$this->strLabel));\n            }\n            $ExistingValueStr = \"NULL\";\n            if (!is_null($ExistingObj->Value)) {\n                $ExistingValueStr = $ExistingObj->Value;\n            }\n            if ($ExistingObj->Value != $this->strValue) {\n                $ChangedArray = array_merge($ChangedArray,array(\"Value\" => array(\"Before\" => $ExistingValueStr,\"After\" => $this->strValue)));\n                //$ChangedArray = array_merge($ChangedArray,array(\"Value\" => \"From: \".$ExistingValueStr.\" to: \".$this->strValue));\n            }\n            $ExistingValueStr = \"NULL\";\n            if (!is_null($ExistingObj->Account)) {\n                $ExistingValueStr = $ExistingObj->Account;\n            }\n            if ($ExistingObj->Account != $this->intAccount) {\n                $ChangedArray = array_merge($ChangedArray,array(\"Account\" => array(\"Before\" => $ExistingValueStr,\"After\" => $this->intAccount)));\n                //$ChangedArray = array_merge($ChangedArray,array(\"Account\" => \"From: \".$ExistingValueStr.\" to: \".$this->intAccount));\n            }\n            $ExistingValueStr = \"NULL\";\n            if (!is_null($ExistingObj->SearchMetaInfo)) {\n                $ExistingValueStr = $ExistingObj->SearchMetaInfo;\n            }\n            if ($ExistingObj->SearchMetaInfo != $this->strSearchMetaInfo) {\n                $ChangedArray = array_merge($ChangedArray,array(\"SearchMetaInfo\" => array(\"Before\" => $ExistingValueStr,\"After\" => $this->strSearchMetaInfo)));\n                //$ChangedArray = array_merge($ChangedArray,array(\"SearchMetaInfo\" => \"From: \".$ExistingValueStr.\" to: \".$this->strSearchMetaInfo));\n            }\n            $ExistingValueStr = \"NULL\";\n            if (!is_null($ExistingObj->LastUpdated)) {\n                $ExistingValueStr = $ExistingObj->LastUpdated;\n            }\n            if ($ExistingObj->LastUpdated != $this->strLastUpdated) {\n                $ChangedArray = array_merge($ChangedArray,array(\"LastUpdated\" => array(\"Before\" => $ExistingValueStr,\"After\" => $this->strLastUpdated)));\n                //$ChangedArray = array_merge($ChangedArray,array(\"LastUpdated\" => \"From: \".$ExistingValueStr.\" to: \".$this->strLastUpdated));\n            }\n            $ExistingValueStr = \"NULL\";\n            if (!is_null($ExistingObj->ObjectOwner)) {\n                $ExistingValueStr = $ExistingObj->ObjectOwner;\n            }\n            if ($ExistingObj->ObjectOwner != $this->intObjectOwner) {\n                $ChangedArray = array_merge($ChangedArray,array(\"ObjectOwner\" => array(\"Before\" => $ExistingValueStr,\"After\" => $this->intObjectOwner)));\n                //$ChangedArray = array_merge($ChangedArray,array(\"ObjectOwner\" => \"From: \".$ExistingValueStr.\" to: \".$this->intObjectOwner));\n            }\n            $newAuditLogEntry->AuditLogEntryDetail = json_encode($ChangedArray);\n        }\n        try {\n            if ((!$this->__blnRestored) || ($blnForceInsert)) {\n                if (!in_array(AccessOperation::CREATE_STR,$ObjectAccessArray)) {\n                    // This user is not allowed to create an object of this type\n                    throw new Exception(\"User is not allowed to perform operation \".AccessOperation::CREATE_STR.\" on entity of type 'AdditionalAccountInformation'. Allowed access is \".json_encode($ObjectAccessArray));\n                }\n                // Perform an INSERT query\n                $objDatabase->NonQuery('\n                INSERT INTO `AdditionalAccountInformation` (\n\t\t\t\t\t\t\t`Type`,\n\t\t\t\t\t\t\t`Label`,\n\t\t\t\t\t\t\t`Value`,\n\t\t\t\t\t\t\t`Account`,\n\t\t\t\t\t\t\t`SearchMetaInfo`,\n\t\t\t\t\t\t\t`ObjectOwner`\n\t\t\t\t\t\t) VALUES (\n\t\t\t\t\t\t\t' . $objDatabase->SqlVariable($this->strType) . ',\n\t\t\t\t\t\t\t' . $objDatabase->SqlVariable($this->strLabel) . ',\n\t\t\t\t\t\t\t' . $objDatabase->SqlVariable($this->strValue) . ',\n\t\t\t\t\t\t\t' . $objDatabase->SqlVariable($this->intAccount) . ',\n\t\t\t\t\t\t\t' . $objDatabase->SqlVariable($this->strSearchMetaInfo) . ',\n\t\t\t\t\t\t\t' . $objDatabase->SqlVariable($this->intObjectOwner) . '\n\t\t\t\t\t\t)\n                ');\n\t\t\t\t\t// Update Identity column and return its value\n                $mixToReturn = $this->intId = $objDatabase->InsertId('AdditionalAccountInformation', 'Id');\n            } else {\n                // Perform an UPDATE query\n                // First checking for Optimistic Locking constraints (if applicable)\n                if (!in_array(AccessOperation::UPDATE_STR,$ObjectAccessArray)) {\n                    // This user is not allowed to create an object of this type\n                    throw new Exception(\"User is not allowed to perform operation \".AccessOperation::UPDATE_STR.\" on entity of type 'AdditionalAccountInformation'. Allowed access is \".json_encode($ObjectAccessArray));\n                }\n                if (!$blnForceUpdate) {\n                    // Perform the Optimistic Locking check\n                    $objResult = $objDatabase->Query('\n                    SELECT `LastUpdated` FROM `AdditionalAccountInformation` WHERE\n\t\t\t\t\t\t\t`Id` = ' . $objDatabase->SqlVariable($this->intId) . '');\n\n                $objRow = $objResult->FetchArray();\n                if ($objRow[0] != $this->strLastUpdated)\n                    throw new dxOptimisticLockingException('AdditionalAccountInformation');\n            }\n\n            // Perform the UPDATE query\n            $objDatabase->NonQuery('\n            UPDATE `AdditionalAccountInformation` SET\n\t\t\t\t\t\t\t`Type` = ' . $objDatabase->SqlVariable($this->strType) . ',\n\t\t\t\t\t\t\t`Label` = ' . $objDatabase->SqlVariable($this->strLabel) . ',\n\t\t\t\t\t\t\t`Value` = ' . $objDatabase->SqlVariable($this->strValue) . ',\n\t\t\t\t\t\t\t`Account` = ' . $objDatabase->SqlVariable($this->intAccount) . ',\n\t\t\t\t\t\t\t`SearchMetaInfo` = ' . $objDatabase->SqlVariable($this->strSearchMetaInfo) . ',\n\t\t\t\t\t\t\t`ObjectOwner` = ' . $objDatabase->SqlVariable($this->intObjectOwner) . '\n            WHERE\n\t\t\t\t\t\t\t`Id` = ' . $objDatabase->SqlVariable($this->intId) . '');\n            }\n\n        } catch (dxCallerException $objExc) {\n            $objExc->IncrementOffset();\n            throw $objExc;\n        }\n        try {\n            $newAuditLogEntry->ObjectId = $this->intId;\n            $newAuditLogEntry->Save();\n        } catch(dxCallerException $e) {\n            error_log('Could not save audit log while saving AdditionalAccountInformation. Details: '.$newAuditLogEntry->getJson().'<br>Error details: '.$e->getMessage());\n        }\n        // Update __blnRestored and any Non-Identity PK Columns (if applicable)\n        $this->__blnRestored = true;\n\n        // Update Local Timestamp\n        $objResult = $objDatabase->Query('SELECT `LastUpdated` FROM\n                                            `AdditionalAccountInformation` WHERE\n                \t\t\t\t\t\t\t`Id` = ' . $objDatabase->SqlVariable($this->intId) . '');\n\n        $objRow = $objResult->FetchArray();\n        $this->strLastUpdated = $objRow[0];\n\n        $this->DeleteCache();\n\n        // Return\n        return $mixToReturn;\n    }\n    /**\n     * Delete this AdditionalAccountInformation\n     * @return void\n     */\n    public function Delete() {\n        if ((is_null($this->intId)))\n            throw new dxUndefinedPrimaryKeyException('Cannot delete this AdditionalAccountInformation with an unset primary key.');\n\n        $ObjectAccessArray = ProjectAccessManager::getObjectAccess(ProjectFunctions::getCurrentAccountId(),\"AdditionalAccountInformation\",$this->intId);\n        if (!in_array(AccessOperation::DELETE_STR,$ObjectAccessArray)) {\n            // This user is not allowed to delete an object of this type\n            throw new Exception(\"User is not allowed to perform operation \".AccessOperation::DELETE_STR.\" on entity of type 'AdditionalAccountInformation'. Allowed access is \".json_encode($ObjectAccessArray));\n        }\n\n        // Get the Database Object for this Class\n        $objDatabase = AdditionalAccountInformation::GetDatabase();\n        $newAuditLogEntry = new AuditLogEntry();\n        $ChangedArray = array();\n        $newAuditLogEntry->EntryTimeStamp = dxDateTime::Now();\n        $newAuditLogEntry->ObjectId = $this->intId;\n        $newAuditLogEntry->ObjectName = 'AdditionalAccountInformation';\n        $newAuditLogEntry->UserEmail = ProjectFunctions::getCurrentUserEmailForAudit();\n        $newAuditLogEntry->ModificationType = 'Delete';\n        $ChangedArray = array_merge($ChangedArray,array(\"Id\" => $this->intId));\n        $ChangedArray = array_merge($ChangedArray,array(\"Type\" => $this->strType));\n        $ChangedArray = array_merge($ChangedArray,array(\"Label\" => $this->strLabel));\n        $ChangedArray = array_merge($ChangedArray,array(\"Value\" => $this->strValue));\n        $ChangedArray = array_merge($ChangedArray,array(\"Account\" => $this->intAccount));\n        $ChangedArray = array_merge($ChangedArray,array(\"SearchMetaInfo\" => $this->strSearchMetaInfo));\n        $ChangedArray = array_merge($ChangedArray,array(\"LastUpdated\" => $this->strLastUpdated));\n        $ChangedArray = array_merge($ChangedArray,array(\"ObjectOwner\" => $this->intObjectOwner));\n        $newAuditLogEntry->AuditLogEntryDetail = json_encode($ChangedArray);\n        try {\n            $newAuditLogEntry->Save();\n        } catch(dxCallerException $e) {\n            error_log('Could not save audit log while deleting AdditionalAccountInformation. Details: '.$newAuditLogEntry->getJson().'<br>Error details: '.$e->getMessage());\n        }\n\n        // Perform the SQL Query\n        $objDatabase->NonQuery('\n            DELETE FROM\n                `AdditionalAccountInformation`\n            WHERE\n                `Id` = ' . $objDatabase->SqlVariable($this->intId) . '');\n\n        $this->DeleteCache();\n    }\n\n    /**\n     * Delete this AdditionalAccountInformation ONLY from the cache\n     * @return void\n     */\n    public function DeleteCache() {\n        if (ProjectFunctions::$objCacheProvider && ProjectFunctions::$Database[1]->Caching) {\n            $strCacheKey = ProjectFunctions::$objCacheProvider->CreateKey(ProjectFunctions::$Database[1]->Database, 'AdditionalAccountInformation', $this->intId);\n            ProjectFunctions::$objCacheProvider->Delete($strCacheKey);\n        }\n    }\n\n    /**\n     * Delete all AdditionalAccountInformations\n     * @return void\n     */\n    public static function DeleteAll() {\n        // Get the Database Object for this Class\n        $objDatabase = AdditionalAccountInformation::GetDatabase();\n\n        // Perform the Query\n        $objDatabase->NonQuery('\n            DELETE FROM\n                `AdditionalAccountInformation`');\n\n        if (ProjectFunctions::$objCacheProvider && ProjectFunctions::$Database[1]->Caching) {\n            ProjectFunctions::$objCacheProvider->DeleteAll();\n        }\n    }\n\n    /**\n     * Truncate AdditionalAccountInformation table\n     * @return void\n     */\n    public static function Truncate() {\n        // Get the Database Object for this Class\n        $objDatabase = AdditionalAccountInformation::GetDatabase();\n\n        // Perform the Query\n        $objDatabase->NonQuery('\n            TRUNCATE `AdditionalAccountInformation`');\n\n        if (ProjectFunctions::$objCacheProvider && ProjectFunctions::$Database[1]->Caching) {\n            ProjectFunctions::$objCacheProvider->DeleteAll();\n        }\n    }\n    /**\n     * Reload this AdditionalAccountInformation from the database.\n     * @return void\n     */\n    public function Reload() {\n        // Make sure we are actually Restored from the database\n        if (!$this->__blnRestored)\n            throw new dxCallerException('Cannot call Reload() on a new, unsaved AdditionalAccountInformation object.');\n\n        $this->DeleteCache();\n\n        // Reload the Object\n        $objReloaded = AdditionalAccountInformation::Load($this->intId);\n\n        // Update $this's local variables to match\n        $this->strType = $objReloaded->strType;\n        $this->strLabel = $objReloaded->strLabel;\n        $this->strValue = $objReloaded->strValue;\n        $this->Account = $objReloaded->Account;\n        $this->strSearchMetaInfo = $objReloaded->strSearchMetaInfo;\n        $this->strLastUpdated = $objReloaded->strLastUpdated;\n        $this->intObjectOwner = $objReloaded->intObjectOwner;\n    }\n    ////////////////////\n    // PUBLIC OVERRIDERS\n    ////////////////////\n\n        /**\n     * Override method to perform a property \"Get\"\n     * This will get the value of $strName\n     *\n     * @param string $strName Name of the property to get\n     * @return mixed\n     */\n    public function __get($strName) {\n        switch ($strName) {\n            ///////////////////\n            // Member Variables\n            ///////////////////\n            case 'Id':\n                /**\n                 * Gets the value for intId (Read-Only PK)\n                 * @return integer\n                 */\n                return $this->intId;\n\n            case 'Type':\n                /**\n                 * Gets the value for strType \n                 * @return string\n                 */\n                return $this->strType;\n\n            case 'Label':\n                /**\n                 * Gets the value for strLabel \n                 * @return string\n                 */\n                return $this->strLabel;\n\n            case 'Value':\n                /**\n                 * Gets the value for strValue \n                 * @return string\n                 */\n                return $this->strValue;\n\n            case 'Account':\n                /**\n                 * Gets the value for intAccount \n                 * @return integer\n                 */\n                return $this->intAccount;\n\n            case 'SearchMetaInfo':\n                /**\n                 * Gets the value for strSearchMetaInfo \n                 * @return string\n                 */\n                return $this->strSearchMetaInfo;\n\n            case 'LastUpdated':\n                /**\n                 * Gets the value for strLastUpdated (Read-Only Timestamp)\n                 * @return string\n                 */\n                return $this->strLastUpdated;\n\n            case 'ObjectOwner':\n                /**\n                 * Gets the value for intObjectOwner \n                 * @return integer\n                 */\n                return $this->intObjectOwner;\n\n\n            ///////////////////\n            // Member Objects\n            ///////////////////\n            case 'AccountObject':\n                /**\n                 * Gets the value for the Account object referenced by intAccount \n                 * @return Account\n                 */\n                try {\n                    if ((!$this->objAccountObject) && (!is_null($this->intAccount)))\n                        $this->objAccountObject = Account::Load($this->intAccount);\n                    return $this->objAccountObject;\n                } catch (dxCallerException $objExc) {\n                    $objExc->IncrementOffset();\n                    throw $objExc;\n                }\n\n\n            ////////////////////////////\n            // Virtual Object References (Many to Many and Reverse References)\n            // (If restored via a \"Many-to\" expansion)\n            ////////////////////////////\n\n\n            case '__Restored':\n                return $this->__blnRestored;\n\n            default:\n                try {\n                    return parent::__get($strName);\n                } catch (dxCallerException $objExc) {\n                    $objExc->IncrementOffset();\n                    throw $objExc;\n                }\n        }\n    }\n        /**\n     * Override method to perform a property \"Set\"\n     * This will set the property $strName to be $mixValue\n     *\n     * @param string $strName Name of the property to set\n     * @param string $mixValue New value of the property\n     * @return mixed\n     */\n    public function __set($strName, $mixValue) {\n        switch ($strName) {\n            ///////////////////\n            // Member Variables\n            ///////////////////\n            case 'Type':\n                /**\n                 * Sets the value for strType \n                 * @param string $mixValue\n                 * @return string\n                 */\n                try {\n                    return ($this->strType = dxType::Cast($mixValue, dxType::String));\n                } catch (dxCallerException $objExc) {\n                    $objExc->IncrementOffset();\n                    throw $objExc;\n                }\n\n            case 'Label':\n                /**\n                 * Sets the value for strLabel \n                 * @param string $mixValue\n                 * @return string\n                 */\n                try {\n                    return ($this->strLabel = dxType::Cast($mixValue, dxType::String));\n                } catch (dxCallerException $objExc) {\n                    $objExc->IncrementOffset();\n                    throw $objExc;\n                }\n\n            case 'Value':\n                /**\n                 * Sets the value for strValue \n                 * @param string $mixValue\n                 * @return string\n                 */\n                try {\n                    return ($this->strValue = dxType::Cast($mixValue, dxType::String));\n                } catch (dxCallerException $objExc) {\n                    $objExc->IncrementOffset();\n                    throw $objExc;\n                }\n\n            case 'Account':\n                /**\n                 * Sets the value for intAccount \n                 * @param integer $mixValue\n                 * @return integer\n                 */\n                try {\n                    $this->objAccountObject = null;\n                    return ($this->intAccount = dxType::Cast($mixValue, dxType::Integer));\n                } catch (dxCallerException $objExc) {\n                    $objExc->IncrementOffset();\n                    throw $objExc;\n                }\n\n            case 'SearchMetaInfo':\n                /**\n                 * Sets the value for strSearchMetaInfo \n                 * @param string $mixValue\n                 * @return string\n                 */\n                try {\n                    return ($this->strSearchMetaInfo = dxType::Cast($mixValue, dxType::String));\n                } catch (dxCallerException $objExc) {\n                    $objExc->IncrementOffset();\n                    throw $objExc;\n                }\n\n            case 'ObjectOwner':\n                /**\n                 * Sets the value for intObjectOwner \n                 * @param integer $mixValue\n                 * @return integer\n                 */\n                try {\n                    return ($this->intObjectOwner = dxType::Cast($mixValue, dxType::Integer));\n                } catch (dxCallerException $objExc) {\n                    $objExc->IncrementOffset();\n                    throw $objExc;\n                }\n\n\n            ///////////////////\n            // Member Objects\n            ///////////////////\n            case 'AccountObject':\n                /**\n                 * Sets the value for the Account object referenced by intAccount \n                 * @param Account $mixValue\n                 * @return Account\n                 */\n                if (is_null($mixValue)) {\n                    $this->intAccount = null;\n                    $this->objAccountObject = null;\n                    return null;\n                } else {\n                    // Make sure $mixValue actually is a Account object\n                    try {\n                        $mixValue = dxType::Cast($mixValue, 'Account');\n                    } catch (dxInvalidCastException $objExc) {\n                        $objExc->IncrementOffset();\n                        throw $objExc;\n                    }\n\n                    // Make sure $mixValue is a SAVED Account object\n                    if (is_null($mixValue->Id))\n                        throw new dxCallerException('Unable to set an unsaved AccountObject for this AdditionalAccountInformation');\n\n                    // Update Local Member Variables\n                    $this->objAccountObject = $mixValue;\n                    $this->intAccount = $mixValue->Id;\n\n                    // Return $mixValue\n                    return $mixValue;\n                }\n                break;\n\n            default:\n                try {\n                    return parent::__set($strName, $mixValue);\n                } catch (dxCallerException $objExc) {\n                    $objExc->IncrementOffset();\n                    throw $objExc;\n                }\n        }\n    }\n    /**\n     * Lookup a VirtualAttribute value (if applicable).  Returns NULL if none found.\n     * @param string $strName\n     * @return string\n     */\n    public function GetVirtualAttribute($strName) {\n        if (array_key_exists($strName, $this->__strVirtualAttributeArray))\n            return $this->__strVirtualAttributeArray[$strName];\n        return null;\n    }\n\n    ///////////////////////////////\n    // ASSOCIATED OBJECTS' METHODS\n    ///////////////////////////////\n\n\n\n    \n///////////////////////////////\n    // METHODS TO EXTRACT INFO ABOUT THE CLASS\n    ///////////////////////////////\n\n    /**\n     * Static method to retrieve the Database object that owns this class.\n     * @return string Name of the table from which this class has been created.\n     */\n    public static function GetTableName() {\n        return \"AdditionalAccountInformation\";\n    }\n\n    /**\n     * Static method to retrieve the Table name from which this class has been created.\n     * @return string Name of the table from which this class has been created.\n     */\n    public static function GetDatabaseName() {\n        return ProjectFunctions::$Database[AdditionalAccountInformation::GetDatabaseIndex()]->Database;\n    }\n\n    /**\n     * Static method to retrieve the Database index in the configuration.inc.php file.\n     * This can be useful when there are two databases of the same name which create\n     * confusion for the developer. There are no internal uses of this function but are\n     * here to help retrieve info if need be!\n     * @return int position or index of the database in the config file.\n     */\n    public static function GetDatabaseIndex() {\n        return 1;\n    }\n\n    ////////////////////////////////////////\n    // METHODS for SOAP-BASED WEB SERVICES\n    ////////////////////////////////////////\n\n    public static function GetSoapComplexTypeXml() {\n        $strToReturn = '<complexType name=\"AdditionalAccountInformation\"><sequence>';\n        $strToReturn .= '<element name=\"Id\" type=\"xsd:int\"/>';\n        $strToReturn .= '<element name=\"Type\" type=\"xsd:string\"/>';\n        $strToReturn .= '<element name=\"Label\" type=\"xsd:string\"/>';\n        $strToReturn .= '<element name=\"Value\" type=\"xsd:string\"/>';\n        $strToReturn .= '<element name=\"AccountObject\" type=\"xsd1:Account\"/>';\n        $strToReturn .= '<element name=\"SearchMetaInfo\" type=\"xsd:string\"/>';\n        $strToReturn .= '<element name=\"LastUpdated\" type=\"xsd:string\"/>';\n        $strToReturn .= '<element name=\"ObjectOwner\" type=\"xsd:int\"/>';\n        $strToReturn .= '<element name=\"__blnRestored\" type=\"xsd:boolean\"/>';\n        $strToReturn .= '</sequence></complexType>';\n        return $strToReturn;\n    }\n\n    public static function AlterSoapComplexTypeArray(&$strComplexTypeArray) {\n        if (!array_key_exists('AdditionalAccountInformation', $strComplexTypeArray)) {\n            $strComplexTypeArray['AdditionalAccountInformation'] = AdditionalAccountInformation::GetSoapComplexTypeXml();\n            Account::AlterSoapComplexTypeArray($strComplexTypeArray);\n        }\n    }\n\n    public static function GetArrayFromSoapArray($objSoapArray) {\n        $objArrayToReturn = array();\n\n        foreach ($objSoapArray as $objSoapObject)\n            array_push($objArrayToReturn, AdditionalAccountInformation::GetObjectFromSoapObject($objSoapObject));\n\n        return $objArrayToReturn;\n    }\n\n    public static function GetObjectFromSoapObject($objSoapObject) {\n        $objToReturn = new AdditionalAccountInformation();\n        if (property_exists($objSoapObject, 'Id'))\n            $objToReturn->intId = $objSoapObject->Id;\n        if (property_exists($objSoapObject, 'Type'))\n            $objToReturn->strType = $objSoapObject->Type;\n        if (property_exists($objSoapObject, 'Label'))\n            $objToReturn->strLabel = $objSoapObject->Label;\n        if (property_exists($objSoapObject, 'Value'))\n            $objToReturn->strValue = $objSoapObject->Value;\n        if ((property_exists($objSoapObject, 'AccountObject')) &&\n            ($objSoapObject->AccountObject))\n            $objToReturn->AccountObject = Account::GetObjectFromSoapObject($objSoapObject->AccountObject);\n        if (property_exists($objSoapObject, 'SearchMetaInfo'))\n            $objToReturn->strSearchMetaInfo = $objSoapObject->SearchMetaInfo;\n        if (property_exists($objSoapObject, 'LastUpdated'))\n            $objToReturn->strLastUpdated = $objSoapObject->LastUpdated;\n        if (property_exists($objSoapObject, 'ObjectOwner'))\n            $objToReturn->intObjectOwner = $objSoapObject->ObjectOwner;\n        if (property_exists($objSoapObject, '__blnRestored'))\n            $objToReturn->__blnRestored = $objSoapObject->__blnRestored;\n        return $objToReturn;\n    }\n\n    public static function GetSoapArrayFromArray($objArray) {\n        if (!$objArray)\n            return null;\n\n        $objArrayToReturn = array();\n\n        foreach ($objArray as $objObject)\n            array_push($objArrayToReturn, AdditionalAccountInformation::GetSoapObjectFromObject($objObject, true));\n\n        return unserialize(serialize($objArrayToReturn));\n    }\n\n    public static function GetSoapObjectFromObject($objObject, $blnBindRelatedObjects) {\n        if ($objObject->objAccountObject)\n            $objObject->objAccountObject = Account::GetSoapObjectFromObject($objObject->objAccountObject, false);\n        else if (!$blnBindRelatedObjects)\n            $objObject->intAccount = null;\n        return $objObject;\n    }\n\n\n    ////////////////////////////////////////\n    // METHODS for JSON Object Translation\n    ////////////////////////////////////////\n\n    // this function is required for objects that implement the\n    // IteratorAggregate interface\n    public function getIterator() {\n        ///////////////////\n        // Member Variables\n        ///////////////////\n        $iArray['Id'] = $this->intId;\n        $iArray['Type'] = $this->strType;\n        $iArray['Label'] = $this->strLabel;\n        $iArray['Value'] = $this->strValue;\n        $iArray['Account'] = $this->intAccount;\n        $iArray['SearchMetaInfo'] = $this->strSearchMetaInfo;\n        $iArray['LastUpdated'] = $this->strLastUpdated;\n        $iArray['ObjectOwner'] = $this->intObjectOwner;\n        return new ArrayIterator($iArray);\n    }\n\n    // this function returns a Json formatted string using the\n    // IteratorAggregate interface\n    public function getJson() {\n        return json_encode($this->getIterator());\n    }\n\n    /**\n     * Default \"toJsObject\" handler\n     * Specifies how the object should be displayed in JQuery UI lists and menus. Note that these lists use\n     * value and label differently.\n     *\n     * value \t= The short form of what to display in the list and selection.\n     * label \t= [optional] If defined, is what is displayed in the menu\n     * id \t\t= Primary key of object.\n     *\n     * @return an array that specifies how to display the object\n     */\n    public function toJsObject () {\n        return JavaScriptHelper::toJsObject(array('value' => $this->__toString(), 'id' =>  $this->intId ));\n    }\n\n\n}\n\n/////////////////////////////////////\n\t// ADDITIONAL CLASSES for DIVBLOX QUERY\n\t/////////////////////////////////////\n\n    /**\n     * @uses dxQueryNode\n     *\n     * @property-read dxQueryNode $Id\n     * @property-read dxQueryNode $Type\n     * @property-read dxQueryNode $Label\n     * @property-read dxQueryNode $Value\n     * @property-read dxQueryNode $Account\n     * @property-read dxQueryNodeAccount $AccountObject\n     * @property-read dxQueryNode $SearchMetaInfo\n     * @property-read dxQueryNode $LastUpdated\n     * @property-read dxQueryNode $ObjectOwner\n     *\n     *\n\n     * @property-read dxQueryNode $_PrimaryKeyNode\n     **/\n\tclass dxQueryNodeAdditionalAccountInformation extends dxQueryNode {\n\t\tprotected $strTableName = 'AdditionalAccountInformation';\n\t\tprotected $strPrimaryKey = 'Id';\n\t\tprotected $strClassName = 'AdditionalAccountInformation';\n\t\tpublic function __get($strName) {\n\t\t\tswitch ($strName) {\n\t\t\t\tcase 'Id':\n\t\t\t\t\treturn new dxQueryNode('Id', 'Id', 'Integer', $this);\n\t\t\t\tcase 'Type':\n\t\t\t\t\treturn new dxQueryNode('Type', 'Type', 'VarChar', $this);\n\t\t\t\tcase 'Label':\n\t\t\t\t\treturn new dxQueryNode('Label', 'Label', 'VarChar', $this);\n\t\t\t\tcase 'Value':\n\t\t\t\t\treturn new dxQueryNode('Value', 'Value', 'Blob', $this);\n\t\t\t\tcase 'Account':\n\t\t\t\t\treturn new dxQueryNode('Account', 'Account', 'Integer', $this);\n\t\t\t\tcase 'AccountObject':\n\t\t\t\t\treturn new dxQueryNodeAccount('Account', 'AccountObject', 'Integer', $this);\n\t\t\t\tcase 'SearchMetaInfo':\n\t\t\t\t\treturn new dxQueryNode('SearchMetaInfo', 'SearchMetaInfo', 'Blob', $this);\n\t\t\t\tcase 'LastUpdated':\n\t\t\t\t\treturn new dxQueryNode('LastUpdated', 'LastUpdated', 'VarChar', $this);\n\t\t\t\tcase 'ObjectOwner':\n\t\t\t\t\treturn new dxQueryNode('ObjectOwner', 'ObjectOwner', 'Integer', $this);\n\n\t\t\t\tcase '_PrimaryKeyNode':\n\t\t\t\t\treturn new dxQueryNode('Id', 'Id', 'Integer', $this);\n\t\t\t\tdefault:\n\t\t\t\t\ttry {\n\t\t\t\t\t\treturn parent::__get($strName);\n\t\t\t\t\t} catch (dxCallerException $objExc) {\n\t\t\t\t\t\t$objExc->IncrementOffset();\n\t\t\t\t\t\tthrow $objExc;\n\t\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n    /**\n     * @property-read dxQueryNode $Id\n     * @property-read dxQueryNode $Type\n     * @property-read dxQueryNode $Label\n     * @property-read dxQueryNode $Value\n     * @property-read dxQueryNode $Account\n     * @property-read dxQueryNodeAccount $AccountObject\n     * @property-read dxQueryNode $SearchMetaInfo\n     * @property-read dxQueryNode $LastUpdated\n     * @property-read dxQueryNode $ObjectOwner\n     *\n     *\n\n     * @property-read dxQueryNode $_PrimaryKeyNode\n     **/\n\tclass dxQueryReverseReferenceNodeAdditionalAccountInformation extends dxQueryReverseReferenceNode {\n\t\tprotected $strTableName = 'AdditionalAccountInformation';\n\t\tprotected $strPrimaryKey = 'Id';\n\t\tprotected $strClassName = 'AdditionalAccountInformation';\n\t\tpublic function __get($strName) {\n\t\t\tswitch ($strName) {\n\t\t\t\tcase 'Id':\n\t\t\t\t\treturn new dxQueryNode('Id', 'Id', 'integer', $this);\n\t\t\t\tcase 'Type':\n\t\t\t\t\treturn new dxQueryNode('Type', 'Type', 'string', $this);\n\t\t\t\tcase 'Label':\n\t\t\t\t\treturn new dxQueryNode('Label', 'Label', 'string', $this);\n\t\t\t\tcase 'Value':\n\t\t\t\t\treturn new dxQueryNode('Value', 'Value', 'string', $this);\n\t\t\t\tcase 'Account':\n\t\t\t\t\treturn new dxQueryNode('Account', 'Account', 'integer', $this);\n\t\t\t\tcase 'AccountObject':\n\t\t\t\t\treturn new dxQueryNodeAccount('Account', 'AccountObject', 'integer', $this);\n\t\t\t\tcase 'SearchMetaInfo':\n\t\t\t\t\treturn new dxQueryNode('SearchMetaInfo', 'SearchMetaInfo', 'string', $this);\n\t\t\t\tcase 'LastUpdated':\n\t\t\t\t\treturn new dxQueryNode('LastUpdated', 'LastUpdated', 'string', $this);\n\t\t\t\tcase 'ObjectOwner':\n\t\t\t\t\treturn new dxQueryNode('ObjectOwner', 'ObjectOwner', 'integer', $this);\n\n\t\t\t\tcase '_PrimaryKeyNode':\n\t\t\t\t\treturn new dxQueryNode('Id', 'Id', 'integer', $this);\n\t\t\t\tdefault:\n\t\t\t\t\ttry {\n\t\t\t\t\t\treturn parent::__get($strName);\n\t\t\t\t\t} catch (dxCallerException $objExc) {\n\t\t\t\t\t\t$objExc->IncrementOffset();\n\t\t\t\t\t\tthrow $objExc;\n\t\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n?>\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- divblox/config/database/data_model_orm/generated/AdditionalAccountInformationGen.class.php	(revision 8088b90ea0ab6ee30e69c949666fde75c4664610)
+++ divblox/config/database/data_model_orm/generated/AdditionalAccountInformationGen.class.php	(date 1589789351182)
@@ -19,9 +19,9 @@
  * @property string $Type the value for strType 
  * @property string $Label the value for strLabel 
  * @property string $Value the value for strValue 
+ * @property-read string $LastUpdated the value for strLastUpdated (Read-Only Timestamp)
  * @property integer $Account the value for intAccount 
  * @property string $SearchMetaInfo the value for strSearchMetaInfo 
- * @property-read string $LastUpdated the value for strLastUpdated (Read-Only Timestamp)
  * @property integer $ObjectOwner the value for intObjectOwner 
  * @property Account $AccountObject the value for the Account object referenced by intAccount 
  * @property-read boolean $__Restored whether or not this object was restored from the database (as opposed to created new)
@@ -66,6 +66,14 @@
     const ValueDefault = null;
 
 
+    /**
+     * Protected member variable that maps to the database column AdditionalAccountInformation.LastUpdated
+     * @var string strLastUpdated
+     */
+    protected $strLastUpdated;
+    const LastUpdatedDefault = null;
+
+
     /**
      * Protected member variable that maps to the database column AdditionalAccountInformation.Account
      * @var integer intAccount
@@ -82,14 +90,6 @@
     const SearchMetaInfoDefault = null;
 
 
-    /**
-     * Protected member variable that maps to the database column AdditionalAccountInformation.LastUpdated
-     * @var string strLastUpdated
-     */
-    protected $strLastUpdated;
-    const LastUpdatedDefault = null;
-
-
     /**
      * Protected member variable that maps to the database column AdditionalAccountInformation.ObjectOwner
      * @var integer intObjectOwner
@@ -136,9 +136,9 @@
         $this->strType = AdditionalAccountInformation::TypeDefault;
         $this->strLabel = AdditionalAccountInformation::LabelDefault;
         $this->strValue = AdditionalAccountInformation::ValueDefault;
+        $this->strLastUpdated = AdditionalAccountInformation::LastUpdatedDefault;
         $this->intAccount = AdditionalAccountInformation::AccountDefault;
         $this->strSearchMetaInfo = AdditionalAccountInformation::SearchMetaInfoDefault;
-        $this->strLastUpdated = AdditionalAccountInformation::LastUpdatedDefault;
         $this->intObjectOwner = AdditionalAccountInformation::ObjectOwnerDefault;
     }
 
@@ -480,9 +480,9 @@
             $objBuilder->AddSelectItem($strTableName, 'Type', $strAliasPrefix . 'Type');
             $objBuilder->AddSelectItem($strTableName, 'Label', $strAliasPrefix . 'Label');
             $objBuilder->AddSelectItem($strTableName, 'Value', $strAliasPrefix . 'Value');
+            $objBuilder->AddSelectItem($strTableName, 'LastUpdated', $strAliasPrefix . 'LastUpdated');
             $objBuilder->AddSelectItem($strTableName, 'Account', $strAliasPrefix . 'Account');
             $objBuilder->AddSelectItem($strTableName, 'SearchMetaInfo', $strAliasPrefix . 'SearchMetaInfo');
-            $objBuilder->AddSelectItem($strTableName, 'LastUpdated', $strAliasPrefix . 'LastUpdated');
             $objBuilder->AddSelectItem($strTableName, 'ObjectOwner', $strAliasPrefix . 'ObjectOwner');
         }
     }
@@ -617,15 +617,15 @@
         $strAlias = $strAliasPrefix . 'Value';
         $strAliasName = !empty($strColumnAliasArray[$strAlias]) ? $strColumnAliasArray[$strAlias] : $strAlias;
         $objToReturn->strValue = $objDbRow->GetColumn($strAliasName, 'Blob');
+        $strAlias = $strAliasPrefix . 'LastUpdated';
+        $strAliasName = !empty($strColumnAliasArray[$strAlias]) ? $strColumnAliasArray[$strAlias] : $strAlias;
+        $objToReturn->strLastUpdated = $objDbRow->GetColumn($strAliasName, 'VarChar');
         $strAlias = $strAliasPrefix . 'Account';
         $strAliasName = !empty($strColumnAliasArray[$strAlias]) ? $strColumnAliasArray[$strAlias] : $strAlias;
         $objToReturn->intAccount = $objDbRow->GetColumn($strAliasName, 'Integer');
         $strAlias = $strAliasPrefix . 'SearchMetaInfo';
         $strAliasName = !empty($strColumnAliasArray[$strAlias]) ? $strColumnAliasArray[$strAlias] : $strAlias;
         $objToReturn->strSearchMetaInfo = $objDbRow->GetColumn($strAliasName, 'Blob');
-        $strAlias = $strAliasPrefix . 'LastUpdated';
-        $strAliasName = !empty($strColumnAliasArray[$strAlias]) ? $strColumnAliasArray[$strAlias] : $strAlias;
-        $objToReturn->strLastUpdated = $objDbRow->GetColumn($strAliasName, 'VarChar');
         $strAlias = $strAliasPrefix . 'ObjectOwner';
         $strAliasName = !empty($strColumnAliasArray[$strAlias]) ? $strColumnAliasArray[$strAlias] : $strAlias;
         $objToReturn->intObjectOwner = $objDbRow->GetColumn($strAliasName, 'Integer');
@@ -825,9 +825,9 @@
             $ChangedArray = array_merge($ChangedArray,array("Type" => $this->strType));
             $ChangedArray = array_merge($ChangedArray,array("Label" => $this->strLabel));
             $ChangedArray = array_merge($ChangedArray,array("Value" => $this->strValue));
+            $ChangedArray = array_merge($ChangedArray,array("LastUpdated" => $this->strLastUpdated));
             $ChangedArray = array_merge($ChangedArray,array("Account" => $this->intAccount));
             $ChangedArray = array_merge($ChangedArray,array("SearchMetaInfo" => $this->strSearchMetaInfo));
-            $ChangedArray = array_merge($ChangedArray,array("LastUpdated" => $this->strLastUpdated));
             $ChangedArray = array_merge($ChangedArray,array("ObjectOwner" => $this->intObjectOwner));
             $newAuditLogEntry->AuditLogEntryDetail = json_encode($ChangedArray);
         } else {
@@ -864,6 +864,14 @@
                 $ChangedArray = array_merge($ChangedArray,array("Value" => array("Before" => $ExistingValueStr,"After" => $this->strValue)));
                 //$ChangedArray = array_merge($ChangedArray,array("Value" => "From: ".$ExistingValueStr." to: ".$this->strValue));
             }
+            $ExistingValueStr = "NULL";
+            if (!is_null($ExistingObj->LastUpdated)) {
+                $ExistingValueStr = $ExistingObj->LastUpdated;
+            }
+            if ($ExistingObj->LastUpdated != $this->strLastUpdated) {
+                $ChangedArray = array_merge($ChangedArray,array("LastUpdated" => array("Before" => $ExistingValueStr,"After" => $this->strLastUpdated)));
+                //$ChangedArray = array_merge($ChangedArray,array("LastUpdated" => "From: ".$ExistingValueStr." to: ".$this->strLastUpdated));
+            }
             $ExistingValueStr = "NULL";
             if (!is_null($ExistingObj->Account)) {
                 $ExistingValueStr = $ExistingObj->Account;
@@ -880,14 +888,6 @@
                 $ChangedArray = array_merge($ChangedArray,array("SearchMetaInfo" => array("Before" => $ExistingValueStr,"After" => $this->strSearchMetaInfo)));
                 //$ChangedArray = array_merge($ChangedArray,array("SearchMetaInfo" => "From: ".$ExistingValueStr." to: ".$this->strSearchMetaInfo));
             }
-            $ExistingValueStr = "NULL";
-            if (!is_null($ExistingObj->LastUpdated)) {
-                $ExistingValueStr = $ExistingObj->LastUpdated;
-            }
-            if ($ExistingObj->LastUpdated != $this->strLastUpdated) {
-                $ChangedArray = array_merge($ChangedArray,array("LastUpdated" => array("Before" => $ExistingValueStr,"After" => $this->strLastUpdated)));
-                //$ChangedArray = array_merge($ChangedArray,array("LastUpdated" => "From: ".$ExistingValueStr." to: ".$this->strLastUpdated));
-            }
             $ExistingValueStr = "NULL";
             if (!is_null($ExistingObj->ObjectOwner)) {
                 $ExistingValueStr = $ExistingObj->ObjectOwner;
@@ -1008,9 +1008,9 @@
         $ChangedArray = array_merge($ChangedArray,array("Type" => $this->strType));
         $ChangedArray = array_merge($ChangedArray,array("Label" => $this->strLabel));
         $ChangedArray = array_merge($ChangedArray,array("Value" => $this->strValue));
+        $ChangedArray = array_merge($ChangedArray,array("LastUpdated" => $this->strLastUpdated));
         $ChangedArray = array_merge($ChangedArray,array("Account" => $this->intAccount));
         $ChangedArray = array_merge($ChangedArray,array("SearchMetaInfo" => $this->strSearchMetaInfo));
-        $ChangedArray = array_merge($ChangedArray,array("LastUpdated" => $this->strLastUpdated));
         $ChangedArray = array_merge($ChangedArray,array("ObjectOwner" => $this->intObjectOwner));
         $newAuditLogEntry->AuditLogEntryDetail = json_encode($ChangedArray);
         try {
@@ -1092,9 +1092,9 @@
         $this->strType = $objReloaded->strType;
         $this->strLabel = $objReloaded->strLabel;
         $this->strValue = $objReloaded->strValue;
+        $this->strLastUpdated = $objReloaded->strLastUpdated;
         $this->Account = $objReloaded->Account;
         $this->strSearchMetaInfo = $objReloaded->strSearchMetaInfo;
-        $this->strLastUpdated = $objReloaded->strLastUpdated;
         $this->intObjectOwner = $objReloaded->intObjectOwner;
     }
     ////////////////////
@@ -1141,6 +1141,13 @@
                  */
                 return $this->strValue;
 
+            case 'LastUpdated':
+                /**
+                 * Gets the value for strLastUpdated (Read-Only Timestamp)
+                 * @return string
+                 */
+                return $this->strLastUpdated;
+
             case 'Account':
                 /**
                  * Gets the value for intAccount 
@@ -1155,13 +1162,6 @@
                  */
                 return $this->strSearchMetaInfo;
 
-            case 'LastUpdated':
-                /**
-                 * Gets the value for strLastUpdated (Read-Only Timestamp)
-                 * @return string
-                 */
-                return $this->strLastUpdated;
-
             case 'ObjectOwner':
                 /**
                  * Gets the value for intObjectOwner 
@@ -1402,9 +1402,9 @@
         $strToReturn .= '<element name="Type" type="xsd:string"/>';
         $strToReturn .= '<element name="Label" type="xsd:string"/>';
         $strToReturn .= '<element name="Value" type="xsd:string"/>';
+        $strToReturn .= '<element name="LastUpdated" type="xsd:string"/>';
         $strToReturn .= '<element name="AccountObject" type="xsd1:Account"/>';
         $strToReturn .= '<element name="SearchMetaInfo" type="xsd:string"/>';
-        $strToReturn .= '<element name="LastUpdated" type="xsd:string"/>';
         $strToReturn .= '<element name="ObjectOwner" type="xsd:int"/>';
         $strToReturn .= '<element name="__blnRestored" type="xsd:boolean"/>';
         $strToReturn .= '</sequence></complexType>';
@@ -1437,13 +1437,13 @@
             $objToReturn->strLabel = $objSoapObject->Label;
         if (property_exists($objSoapObject, 'Value'))
             $objToReturn->strValue = $objSoapObject->Value;
+        if (property_exists($objSoapObject, 'LastUpdated'))
+            $objToReturn->strLastUpdated = $objSoapObject->LastUpdated;
         if ((property_exists($objSoapObject, 'AccountObject')) &&
             ($objSoapObject->AccountObject))
             $objToReturn->AccountObject = Account::GetObjectFromSoapObject($objSoapObject->AccountObject);
         if (property_exists($objSoapObject, 'SearchMetaInfo'))
             $objToReturn->strSearchMetaInfo = $objSoapObject->SearchMetaInfo;
-        if (property_exists($objSoapObject, 'LastUpdated'))
-            $objToReturn->strLastUpdated = $objSoapObject->LastUpdated;
         if (property_exists($objSoapObject, 'ObjectOwner'))
             $objToReturn->intObjectOwner = $objSoapObject->ObjectOwner;
         if (property_exists($objSoapObject, '__blnRestored'))
@@ -1486,9 +1486,9 @@
         $iArray['Type'] = $this->strType;
         $iArray['Label'] = $this->strLabel;
         $iArray['Value'] = $this->strValue;
+        $iArray['LastUpdated'] = $this->strLastUpdated;
         $iArray['Account'] = $this->intAccount;
         $iArray['SearchMetaInfo'] = $this->strSearchMetaInfo;
-        $iArray['LastUpdated'] = $this->strLastUpdated;
         $iArray['ObjectOwner'] = $this->intObjectOwner;
         return new ArrayIterator($iArray);
     }
@@ -1528,10 +1528,10 @@
      * @property-read dxQueryNode $Type
      * @property-read dxQueryNode $Label
      * @property-read dxQueryNode $Value
+     * @property-read dxQueryNode $LastUpdated
      * @property-read dxQueryNode $Account
      * @property-read dxQueryNodeAccount $AccountObject
      * @property-read dxQueryNode $SearchMetaInfo
-     * @property-read dxQueryNode $LastUpdated
      * @property-read dxQueryNode $ObjectOwner
      *
      *
@@ -1552,14 +1552,14 @@
 					return new dxQueryNode('Label', 'Label', 'VarChar', $this);
 				case 'Value':
 					return new dxQueryNode('Value', 'Value', 'Blob', $this);
+				case 'LastUpdated':
+					return new dxQueryNode('LastUpdated', 'LastUpdated', 'VarChar', $this);
 				case 'Account':
 					return new dxQueryNode('Account', 'Account', 'Integer', $this);
 				case 'AccountObject':
 					return new dxQueryNodeAccount('Account', 'AccountObject', 'Integer', $this);
 				case 'SearchMetaInfo':
 					return new dxQueryNode('SearchMetaInfo', 'SearchMetaInfo', 'Blob', $this);
-				case 'LastUpdated':
-					return new dxQueryNode('LastUpdated', 'LastUpdated', 'VarChar', $this);
 				case 'ObjectOwner':
 					return new dxQueryNode('ObjectOwner', 'ObjectOwner', 'Integer', $this);
 
@@ -1581,10 +1581,10 @@
      * @property-read dxQueryNode $Type
      * @property-read dxQueryNode $Label
      * @property-read dxQueryNode $Value
+     * @property-read dxQueryNode $LastUpdated
      * @property-read dxQueryNode $Account
      * @property-read dxQueryNodeAccount $AccountObject
      * @property-read dxQueryNode $SearchMetaInfo
-     * @property-read dxQueryNode $LastUpdated
      * @property-read dxQueryNode $ObjectOwner
      *
      *
@@ -1605,14 +1605,14 @@
 					return new dxQueryNode('Label', 'Label', 'string', $this);
 				case 'Value':
 					return new dxQueryNode('Value', 'Value', 'string', $this);
+				case 'LastUpdated':
+					return new dxQueryNode('LastUpdated', 'LastUpdated', 'string', $this);
 				case 'Account':
 					return new dxQueryNode('Account', 'Account', 'integer', $this);
 				case 'AccountObject':
 					return new dxQueryNodeAccount('Account', 'AccountObject', 'integer', $this);
 				case 'SearchMetaInfo':
 					return new dxQueryNode('SearchMetaInfo', 'SearchMetaInfo', 'string', $this);
-				case 'LastUpdated':
-					return new dxQueryNode('LastUpdated', 'LastUpdated', 'string', $this);
 				case 'ObjectOwner':
 					return new dxQueryNode('ObjectOwner', 'ObjectOwner', 'integer', $this);
 
Index: divblox/config/database/data_model_orm/generated/BackgroundProcessUpdateGen.class.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?php\n/**\n * The abstract BackgroundProcessUpdateGen class defined here is\n * code-generated and contains all the basic CRUD-type functionality as well as\n * basic methods to handle relationships and index-based loading.\n *\n * To use, you should use the BackgroundProcessUpdate subclass which\n * extends this BackgroundProcessUpdateGen class.\n *\n * Because subsequent re-code generations will overwrite any changes to this\n * file, you should leave this file unaltered to prevent yourself from losing\n * any information or code changes.  All customizations should be done by\n * overriding existing or implementing new methods, properties and variables\n * in the BackgroundProcessUpdate class.\n *\n * @package divblox_app\n * @subpackage GeneratedDataObjects\n * @property-read integer $Id the value for intId (Read-Only PK)\n * @property dxDateTime $UpdateDateTime the value for dttUpdateDateTime \n * @property string $UpdateMessage the value for strUpdateMessage \n * @property integer $BackgroundProcess the value for intBackgroundProcess \n * @property string $SearchMetaInfo the value for strSearchMetaInfo \n * @property-read string $LastUpdated the value for strLastUpdated (Read-Only Timestamp)\n * @property integer $ObjectOwner the value for intObjectOwner \n * @property BackgroundProcess $BackgroundProcessObject the value for the BackgroundProcess object referenced by intBackgroundProcess \n * @property-read boolean $__Restored whether or not this object was restored from the database (as opposed to created new)\n */\nclass BackgroundProcessUpdateGen extends dxBaseClass implements IteratorAggregate {\n\n    ///////////////////////////////////////////////////////////////////////\n    // PROTECTED MEMBER VARIABLES and TEXT FIELD MAXLENGTHS (if applicable)\n    ///////////////////////////////////////////////////////////////////////\n\n    /**\n     * Protected member variable that maps to the database PK Identity column BackgroundProcessUpdate.Id\n     * @var integer intId\n     */\n    protected $intId;\n    const IdDefault = null;\n\n\n    /**\n     * Protected member variable that maps to the database column BackgroundProcessUpdate.UpdateDateTime\n     * @var dxDateTime dttUpdateDateTime\n     */\n    protected $dttUpdateDateTime;\n    const UpdateDateTimeDefault = null;\n\n\n    /**\n     * Protected member variable that maps to the database column BackgroundProcessUpdate.UpdateMessage\n     * @var string strUpdateMessage\n     */\n    protected $strUpdateMessage;\n    const UpdateMessageDefault = null;\n\n\n    /**\n     * Protected member variable that maps to the database column BackgroundProcessUpdate.BackgroundProcess\n     * @var integer intBackgroundProcess\n     */\n    protected $intBackgroundProcess;\n    const BackgroundProcessDefault = null;\n\n\n    /**\n     * Protected member variable that maps to the database column BackgroundProcessUpdate.SearchMetaInfo\n     * @var string strSearchMetaInfo\n     */\n    protected $strSearchMetaInfo;\n    const SearchMetaInfoDefault = null;\n\n\n    /**\n     * Protected member variable that maps to the database column BackgroundProcessUpdate.LastUpdated\n     * @var string strLastUpdated\n     */\n    protected $strLastUpdated;\n    const LastUpdatedDefault = null;\n\n\n    /**\n     * Protected member variable that maps to the database column BackgroundProcessUpdate.ObjectOwner\n     * @var integer intObjectOwner\n     */\n    protected $intObjectOwner;\n    const ObjectOwnerDefault = null;\n\n\n    /**\n     * Protected array of virtual attributes for this object (e.g. extra/other calculated and/or non-object bound\n     * columns from the run-time database query result for this object).  Used by InstantiateDbRow and\n     * GetVirtualAttribute.\n     * @var string[] $__strVirtualAttributeArray\n     */\n    protected $__strVirtualAttributeArray = array();\n\n    /**\n     * Protected internal member variable that specifies whether or not this object is Restored from the database.\n     * Used by Save() to determine if Save() should perform a db UPDATE or INSERT.\n     * @var bool __blnRestored;\n     */\n    protected $__blnRestored;\n\n    ///////////////////////////////\n    // PROTECTED MEMBER OBJECTS\n    ///////////////////////////////\n\n    /**\n     * Protected member variable that contains the object pointed by the reference\n     * in the database column BackgroundProcessUpdate.BackgroundProcess.\n     *\n     * NOTE: Always use the BackgroundProcessObject property getter to correctly retrieve this BackgroundProcess object.\n     * (Because this class implements late binding, this variable reference MAY be null.)\n     * @var BackgroundProcess objBackgroundProcessObject\n     */\n    protected $objBackgroundProcessObject;\n\n\n    /**\n     * Initialize each property with default values from database definition\n     */\n    public function Initialize() {\n        $this->intId = BackgroundProcessUpdate::IdDefault;\n        $this->dttUpdateDateTime = (BackgroundProcessUpdate::UpdateDateTimeDefault === null)?null:new dxDateTime(BackgroundProcessUpdate::UpdateDateTimeDefault);\n        $this->strUpdateMessage = BackgroundProcessUpdate::UpdateMessageDefault;\n        $this->intBackgroundProcess = BackgroundProcessUpdate::BackgroundProcessDefault;\n        $this->strSearchMetaInfo = BackgroundProcessUpdate::SearchMetaInfoDefault;\n        $this->strLastUpdated = BackgroundProcessUpdate::LastUpdatedDefault;\n        $this->intObjectOwner = BackgroundProcessUpdate::ObjectOwnerDefault;\n    }\n\n    ///////////////////////////////\n    // CLASS-WIDE LOAD AND COUNT METHODS\n    ///////////////////////////////\n\n    /**\n     * Static method to retrieve the Database object that owns this class.\n     * @return dxDatabaseBase reference to the Database object that can query this class\n     */\n    public static function GetDatabase() {\n        return ProjectFunctions::$Database[1];\n    }\n\n    /**\n     * Load a BackgroundProcessUpdate from PK Info\n     * @param integer $intId\n     * @param dxQueryClause[] $objOptionalClauses additional optional dxQueryClause objects for this query\n     * @return BackgroundProcessUpdate\n     */\n    public static function Load($intId, $objOptionalClauses = null) {\n        $strCacheKey = false;\n        if (ProjectFunctions::$objCacheProvider && !$objOptionalClauses && ProjectFunctions::$Database[1]->Caching) {\n            $strCacheKey = ProjectFunctions::$objCacheProvider->CreateKey(ProjectFunctions::$Database[1]->Database, 'BackgroundProcessUpdate', $intId);\n            $objCachedObject = ProjectFunctions::$objCacheProvider->Get($strCacheKey);\n            if ($objCachedObject !== false) {\n                return $objCachedObject;\n            }\n        }\n        // Use QuerySingle to Perform the Query\n        $objToReturn = BackgroundProcessUpdate::QuerySingle(\n            dxQuery::AndCondition(\n                dxQuery::Equal(dxQueryN::BackgroundProcessUpdate()->Id, $intId)\n            ),\n            $objOptionalClauses\n        );\n        if ($strCacheKey !== false) {\n            ProjectFunctions::$objCacheProvider->Set($strCacheKey, $objToReturn);\n        }\n        return $objToReturn;\n    }\n\n    /**\n     * Load all BackgroundProcessUpdates\n     * @param dxQueryClause[] $objOptionalClauses additional optional dxQueryClause objects for this query\n     * @return BackgroundProcessUpdate[]\n     */\n    public static function LoadAll($objOptionalClauses = null) {\n        if (func_num_args() > 1) {\n            throw new dxCallerException(\"LoadAll must be called with an array of optional clauses as a single argument\");\n        }\n        // Call BackgroundProcessUpdate::QueryArray to perform the LoadAll query\n        try {\n            return BackgroundProcessUpdate::QueryArray(dxQuery::All(), $objOptionalClauses);\n        } catch (dxCallerException $objExc) {\n            $objExc->IncrementOffset();\n            throw $objExc;\n        }\n    }\n\n    /**\n     * Count all BackgroundProcessUpdates\n     * @return int\n     */\n    public static function CountAll() {\n        // Call BackgroundProcessUpdate::QueryCount to perform the CountAll query\n        return BackgroundProcessUpdate::QueryCount(dxQuery::All());\n    }\n\n    ///////////////////////////////\n    // DIVBLOX QUERY-RELATED METHODS\n    ///////////////////////////////\n\n    /**\n     * Internally called method to assist with calling divblox Query for this class\n     * on load methods.\n     * @param dxQueryBuilder &$objQueryBuilder the QueryBuilder object that will be created\n     * @param dxQueryCondition $objConditions any conditions on the query, itself\n     * @param dxQueryClause[] $objOptionalClausees additional optional dxQueryClause object or array of dxQueryClause objects for this query\n     * @param mixed[] $mixParameterArray a array of name-value pairs to perform PrepareStatement with (sending in null will skip the PrepareStatement step)\n     * @param boolean $blnCountOnly only select a rowcount\n     * @return string the query statement\n     */\n    protected static function BuildQueryStatement(&$objQueryBuilder, dxQueryCondition $objConditions, $objOptionalClauses, $mixParameterArray, $blnCountOnly) {\n        // Get the Database Object for this Class\n        $objDatabase = BackgroundProcessUpdate::GetDatabase();\n\n        // Create/Build out the QueryBuilder object with BackgroundProcessUpdate-specific SELET and FROM fields\n        $objQueryBuilder = new dxQueryBuilder($objDatabase, 'BackgroundProcessUpdate');\n\n        $blnAddAllFieldsToSelect = true;\n        if ($objDatabase->OnlyFullGroupBy) {\n            // see if we have any group by or aggregation clauses, if yes, don't add the fields to select clause\n            if ($objOptionalClauses instanceof dxQueryClause) {\n                if ($objOptionalClauses instanceof dxQueryAggregationClause || $objOptionalClauses instanceof dxQueryGroupBy) {\n                    $blnAddAllFieldsToSelect = false;\n                }\n            } else if (is_array($objOptionalClauses)) {\n                foreach ($objOptionalClauses as $objClause) {\n                    if ($objClause instanceof dxQueryAggregationClause || $objClause instanceof dxQueryGroupBy) {\n                        $blnAddAllFieldsToSelect = false;\n                        break;\n                    }\n                }\n            }\n        }\n        if ($blnAddAllFieldsToSelect) {\n            BackgroundProcessUpdate::GetSelectFields($objQueryBuilder, null, dxQuery::extractSelectClause($objOptionalClauses));\n        }\n        $objQueryBuilder->AddFromItem('BackgroundProcessUpdate');\n\n        // Set \"CountOnly\" option (if applicable)\n        if ($blnCountOnly)\n            $objQueryBuilder->SetCountOnlyFlag();\n\n        // Apply Any Conditions\n        if ($objConditions)\n            try {\n                $objConditions->UpdateQueryBuilder($objQueryBuilder);\n            } catch (dxCallerException $objExc) {\n                $objExc->IncrementOffset();\n                throw $objExc;\n            }\n\n        // Iterate through all the Optional Clauses (if any) and perform accordingly\n        if ($objOptionalClauses) {\n            if ($objOptionalClauses instanceof dxQueryClause)\n                $objOptionalClauses->UpdateQueryBuilder($objQueryBuilder);\n            else if (is_array($objOptionalClauses))\n                foreach ($objOptionalClauses as $objClause)\n                    $objClause->UpdateQueryBuilder($objQueryBuilder);\n            else\n                throw new dxCallerException('Optional Clauses must be a dxQueryClause object or an array of dxQueryClause objects');\n        }\n\n        // Get the SQL Statement\n        $strQuery = $objQueryBuilder->GetStatement();\n\n        // Prepare the Statement with the Query Parameters (if applicable)\n        if ($mixParameterArray) {\n            if (is_array($mixParameterArray)) {\n                if (ProjectFunctions::getDataSetSize($mixParameterArray))\n                    $strQuery = $objDatabase->PrepareStatement($strQuery, $mixParameterArray);\n\n                // Ensure that there are no other Unresolved Named Parameters\n                if (strpos($strQuery, chr(dxQueryNamedValue::DelimiterCode) . '{') !== false)\n                    throw new dxCallerException('Unresolved named parameters in the query');\n            } else\n                throw new dxCallerException('Parameter Array must be an array of name-value parameter pairs');\n        }\n\n        // Return the Objects\n        return $strQuery;\n    }\n\n    /**\n     * Static divblox Query method to query for a single BackgroundProcessUpdate object.\n     * Uses BuildQueryStatment to perform most of the work.\n     * @param dxQueryCondition $objConditions any conditions on the query, itself\n     * @param dxQueryClause[] $objOptionalClausees additional optional dxQueryClause objects for this query\n     * @param mixed[] $mixParameterArray a array of name-value pairs to perform PrepareStatement with\n     * @return BackgroundProcessUpdate the queried object\n     */\n    public static function QuerySingle(dxQueryCondition $objConditions, $objOptionalClauses = null, $mixParameterArray = null) {\n        // Get the Query Statement\n        try {\n            $strQuery = BackgroundProcessUpdate::BuildQueryStatement($objQueryBuilder, $objConditions, $objOptionalClauses, $mixParameterArray, false);\n        } catch (dxCallerException $objExc) {\n            $objExc->IncrementOffset();\n            throw $objExc;\n        }\n\n        // Perform the Query, Get the First Row, and Instantiate a new BackgroundProcessUpdate object\n        $objDbResult = $objQueryBuilder->Database->Query($strQuery);\n\n        // Do we have to expand anything?\n        if ($objQueryBuilder->ExpandAsArrayNode) {\n            $objToReturn = array();\n            $objPrevItemArray = array();\n            while ($objDbRow = $objDbResult->GetNextRow()) {\n                $objItem = BackgroundProcessUpdate::InstantiateDbRow($objDbRow, null, $objQueryBuilder->ExpandAsArrayNode, $objPrevItemArray, $objQueryBuilder->ColumnAliasArray);\n                if ($objItem) {\n                    $objToReturn[] = $objItem;\n                    $objPrevItemArray[$objItem->intId][] = $objItem;\n                }\n            }\n            if (ProjectFunctions::getDataSetSize($objToReturn)) {\n                // Since we only want the object to return, lets return the object and not the array.\n                return $objToReturn[0];\n            } else {\n                return null;\n            }\n        } else {\n            // No expands just return the first row\n            $objDbRow = $objDbResult->GetNextRow();\n            if(null === $objDbRow)\n                return null;\n            return BackgroundProcessUpdate::InstantiateDbRow($objDbRow, null, null, null, $objQueryBuilder->ColumnAliasArray);\n        }\n    }\n\n    /**\n     * Static divblox Query method to query for an array of BackgroundProcessUpdate objects.\n     * Uses BuildQueryStatment to perform most of the work.\n     * @param dxQueryCondition $objConditions any conditions on the query, itself\n     * @param dxQueryClause[] $objOptionalClausees additional optional dxQueryClause objects for this query\n     * @param mixed[] $mixParameterArray a array of name-value pairs to perform PrepareStatement with\n     * @return BackgroundProcessUpdate[] the queried objects as an array\n     */\n    public static function QueryArray(dxQueryCondition $objConditions, $objOptionalClauses = null, $mixParameterArray = null) {\n        // Get the Query Statement\n        try {\n            $strQuery = BackgroundProcessUpdate::BuildQueryStatement($objQueryBuilder, $objConditions, $objOptionalClauses, $mixParameterArray, false);\n        } catch (dxCallerException $objExc) {\n            $objExc->IncrementOffset();\n            throw $objExc;\n        }\n\n        // Perform the Query and Instantiate the Array Result\n        $objDbResult = $objQueryBuilder->Database->Query($strQuery);\n        return BackgroundProcessUpdate::InstantiateDbResult($objDbResult, $objQueryBuilder->ExpandAsArrayNode, $objQueryBuilder->ColumnAliasArray);\n    }\n\n    /**\n     * Static divblox query method to issue a query and get a cursor to progressively fetch its results.\n     * Uses BuildQueryStatment to perform most of the work.\n     * @param dxQueryCondition $objConditions any conditions on the query, itself\n     * @param dxQueryClause[] $objOptionalClauses additional optional dxQueryClause objects for this query\n     * @param mixed[] $mixParameterArray a array of name-value pairs to perform PrepareStatement with\n     * @return dxDatabaseResultBase the cursor resource instance\n     */\n    public static function QueryCursor(dxQueryCondition $objConditions, $objOptionalClauses = null, $mixParameterArray = null) {\n        // Get the query statement\n        try {\n            $strQuery = BackgroundProcessUpdate::BuildQueryStatement($objQueryBuilder, $objConditions, $objOptionalClauses, $mixParameterArray, false);\n        } catch (dxCallerException $objExc) {\n            $objExc->IncrementOffset();\n            throw $objExc;\n        }\n\n        // Perform the query\n        $objDbResult = $objQueryBuilder->Database->Query($strQuery);\n\n        // Return the results cursor\n        $objDbResult->QueryBuilder = $objQueryBuilder;\n        return $objDbResult;\n    }\n\n    /**\n     * Static divblox Query method to query for a count of BackgroundProcessUpdate objects.\n     * Uses BuildQueryStatment to perform most of the work.\n     * @param dxQueryCondition $objConditions any conditions on the query, itself\n     * @param dxQueryClause[] $objOptionalClausees additional optional dxQueryClause objects for this query\n     * @param mixed[] $mixParameterArray a array of name-value pairs to perform PrepareStatement with\n     * @return integer the count of queried objects as an integer\n     */\n    public static function QueryCount(dxQueryCondition $objConditions, $objOptionalClauses = null, $mixParameterArray = null) {\n        // Get the Query Statement\n        try {\n            $strQuery = BackgroundProcessUpdate::BuildQueryStatement($objQueryBuilder, $objConditions, $objOptionalClauses, $mixParameterArray, true);\n        } catch (dxCallerException $objExc) {\n            $objExc->IncrementOffset();\n            throw $objExc;\n        }\n\n        // Perform the Query and return the row_count\n        $objDbResult = $objQueryBuilder->Database->Query($strQuery);\n\n        // Figure out if the query is using GroupBy\n        $blnGrouped = false;\n\n        if ($objOptionalClauses) {\n            if ($objOptionalClauses instanceof dxQueryClause) {\n                if ($objOptionalClauses instanceof dxQueryGroupBy) {\n                    $blnGrouped = true;\n                }\n            } else if (is_array($objOptionalClauses)) {\n                foreach ($objOptionalClauses as $objClause) {\n                    if ($objClause instanceof dxQueryGroupBy) {\n                        $blnGrouped = true;\n                        break;\n                    }\n                }\n            } else {\n                throw new dxCallerException('Optional Clauses must be a dxQueryClause object or an array of dxQueryClause objects');\n            }\n        }\n\n        if ($blnGrouped)\n            // Groups in this query - return the count of Groups (which is the count of all rows)\n            return $objDbResult->CountRows();\n        else {\n            // No Groups - return the sql-calculated count(*) value\n            $strDbRow = $objDbResult->FetchRow();\n            return dxType::Cast($strDbRow[0], dxType::Integer);\n        }\n    }\n\n    public static function QueryArrayCached(dxQueryCondition $objConditions, $objOptionalClauses = null, $mixParameterArray = null, $blnForceUpdate = false) {\n        // Get the Database Object for this Class\n        $objDatabase = BackgroundProcessUpdate::GetDatabase();\n\n        $strQuery = BackgroundProcessUpdate::BuildQueryStatement($objQueryBuilder, $objConditions, $objOptionalClauses, $mixParameterArray, false);\n\n        $objCache = new dxCache('dxquery/backgroundprocessupdate', $strQuery);\n        $cacheData = $objCache->GetData();\n\n        if (!$cacheData || $blnForceUpdate) {\n            $objDbResult = $objQueryBuilder->Database->Query($strQuery);\n            $arrResult = BackgroundProcessUpdate::InstantiateDbResult($objDbResult, $objQueryBuilder->ExpandAsArrayNode, $objQueryBuilder->ColumnAliasArray);\n            $objCache->SaveData(serialize($arrResult));\n        } else {\n            $arrResult = unserialize($cacheData);\n        }\n\n        return $arrResult;\n    }\n\n    /**\n     * Updates a dxQueryBuilder with the SELECT fields for this BackgroundProcessUpdate\n     * @param dxQueryBuilder $objBuilder the Query Builder object to update\n     * @param string $strPrefix optional prefix to add to the SELECT fields\n     */\n    public static function GetSelectFields(dxQueryBuilder $objBuilder, $strPrefix = null, dxQuerySelect $objSelect = null) {\n        if ($strPrefix) {\n            $strTableName = $strPrefix;\n            $strAliasPrefix = $strPrefix . '__';\n        } else {\n            $strTableName = 'BackgroundProcessUpdate';\n            $strAliasPrefix = '';\n        }\n\n        if ($objSelect) {\n            $objBuilder->AddSelectItem($strTableName, 'Id', $strAliasPrefix . 'Id');\n            $objSelect->AddSelectItems($objBuilder, $strTableName, $strAliasPrefix);\n        } else {\n            $objBuilder->AddSelectItem($strTableName, 'Id', $strAliasPrefix . 'Id');\n            $objBuilder->AddSelectItem($strTableName, 'UpdateDateTime', $strAliasPrefix . 'UpdateDateTime');\n            $objBuilder->AddSelectItem($strTableName, 'UpdateMessage', $strAliasPrefix . 'UpdateMessage');\n            $objBuilder->AddSelectItem($strTableName, 'BackgroundProcess', $strAliasPrefix . 'BackgroundProcess');\n            $objBuilder->AddSelectItem($strTableName, 'SearchMetaInfo', $strAliasPrefix . 'SearchMetaInfo');\n            $objBuilder->AddSelectItem($strTableName, 'LastUpdated', $strAliasPrefix . 'LastUpdated');\n            $objBuilder->AddSelectItem($strTableName, 'ObjectOwner', $strAliasPrefix . 'ObjectOwner');\n        }\n    }\n    ///////////////////////////////\n    // INSTANTIATION-RELATED METHODS\n    ///////////////////////////////\n\n    /**\n     * Do a possible array expansion on the given node. If the node is an ExpandAsArray node,\n     * it will add to the corresponding array in the object. Otherwise, it will follow the node\n     * so that any leaf expansions can be handled.\n     *\n     * @param DatabaseRowBase $objDbRow\n     * @param dxQueryBaseNode $objChildNode\n     * @param dxBaseClass $objPreviousItem\n     * @param string[] $strColumnAliasArray\n     */\n\n    public static function ExpandArray ($objDbRow, $strAliasPrefix, $objNode, $objPreviousItemArray, $strColumnAliasArray) {\n        if (!$objNode->ChildNodeArray) {\n            return false;\n        }\n\n        $strAlias = $strAliasPrefix . 'Id';\n        $strColumnAlias = !empty($strColumnAliasArray[$strAlias]) ? $strColumnAliasArray[$strAlias] : $strAlias;\n        $blnExpanded = false;\n\n        foreach ($objPreviousItemArray as $objPreviousItem) {\n            if ($objPreviousItem->intId != $objDbRow->GetColumn($strColumnAlias, 'Integer')) {\n                continue;\n            }\n\n            foreach ($objNode->ChildNodeArray as $objChildNode) {\n                $strPropName = $objChildNode->_PropertyName;\n                $strClassName = $objChildNode->_ClassName;\n                $blnExpanded = false;\n                $strLongAlias = $objChildNode->ExtendedAlias();\n\n                if ($objChildNode->ExpandAsArray) {\n                    $strVarName = '_obj' . $strPropName . 'Array';\n                    if (null === $objPreviousItem->$strVarName) {\n                        $objPreviousItem->$strVarName = array();\n                    }\n                    if ($intPreviousChildItemCount = ProjectFunctions::getDataSetSize($objPreviousItem->$strVarName)) {\n                        $objPreviousChildItems = $objPreviousItem->$strVarName;\n                        if ($objChildNode->_Type == \"association\") {\n                            $objChildNode = $objChildNode->FirstChild();\n                        }\n                        $nextAlias = $objChildNode->ExtendedAlias() . '__';\n\n                        $objChildItem = call_user_func(array ($strClassName, 'InstantiateDbRow'), $objDbRow, $nextAlias, $objChildNode, $objPreviousChildItems, $strColumnAliasArray);\n                        if ($objChildItem) {\n                            $objPreviousItem->{$strVarName}[] = $objChildItem;\n                            $blnExpanded = true;\n                        } elseif ($objChildItem === false) {\n                            $blnExpanded = true;\n                        }\n                    }\n                } else {\n\n                    // Follow single node if keys match\n                    $nodeType = $objChildNode->_Type;\n                    if ($nodeType == 'reverse_reference' || $nodeType == 'association') {\n                        $strVarName = '_obj' . $strPropName;\n                    } else {\n                        $strVarName = 'obj' . $strPropName;\n                    }\n\n                    if (null === $objPreviousItem->$strVarName) {\n                        return false;\n                    }\n\n                    $objPreviousChildItems = array($objPreviousItem->$strVarName);\n                    $blnResult = call_user_func(array ($strClassName, 'ExpandArray'), $objDbRow, $strLongAlias . '__', $objChildNode, $objPreviousChildItems, $strColumnAliasArray);\n\n                    if ($blnResult) {\n                        $blnExpanded = true;\n                    }\n                }\n            }\n        }\n        return $blnExpanded;\n    }\n\n    /**\n     * Instantiate a BackgroundProcessUpdate from a Database Row.\n     * Takes in an optional strAliasPrefix, used in case another Object::InstantiateDbRow\n     * is calling this BackgroundProcessUpdate::InstantiateDbRow in order to perform\n     * early binding on referenced objects.\n     * @param DatabaseRowBase $objDbRow\n     * @param string $strAliasPrefix\n     * @param dxQueryBaseNode $objExpandAsArrayNode\n     * @param dxBaseClass $arrPreviousItem\n     * @param string[] $strColumnAliasArray\n     * @return mixed Either a BackgroundProcessUpdate, or false to indicate the dbrow was used in an expansion, or null to indicate that this leaf is a duplicate.\n    */\n    public static function InstantiateDbRow($objDbRow, $strAliasPrefix = null, $objExpandAsArrayNode = null, $objPreviousItemArray = null, $strColumnAliasArray = array()) {\n        // If blank row, return null\n        if (!$objDbRow) {\n            return null;\n        }\n\n        if (empty ($strAliasPrefix) && $objPreviousItemArray) {\n            $strColumnAlias = !empty($strColumnAliasArray['Id']) ? $strColumnAliasArray['Id'] : 'Id';\n            $key = $objDbRow->GetColumn($strColumnAlias, 'Integer');\n            $objPreviousItemArray = (!empty ($objPreviousItemArray[$key]) ? $objPreviousItemArray[$key] : null);\n        }\n\n        // See if we're doing an array expansion on the previous item\n        if ($objExpandAsArrayNode &&\n                is_array($objPreviousItemArray) &&\n                ProjectFunctions::getDataSetSize($objPreviousItemArray)) {\n\n            if (BackgroundProcessUpdate::ExpandArray ($objDbRow, $strAliasPrefix, $objExpandAsArrayNode, $objPreviousItemArray, $strColumnAliasArray)) {\n                return false; // db row was used but no new object was created\n            }\n        }\n\n        // Create a new instance of the BackgroundProcessUpdate object\n        $objToReturn = new BackgroundProcessUpdate();\n        $objToReturn->__blnRestored = true;\n\n        $strAlias = $strAliasPrefix . 'Id';\n        $strAliasName = !empty($strColumnAliasArray[$strAlias]) ? $strColumnAliasArray[$strAlias] : $strAlias;\n        $objToReturn->intId = $objDbRow->GetColumn($strAliasName, 'Integer');\n        $strAlias = $strAliasPrefix . 'UpdateDateTime';\n        $strAliasName = !empty($strColumnAliasArray[$strAlias]) ? $strColumnAliasArray[$strAlias] : $strAlias;\n        $objToReturn->dttUpdateDateTime = $objDbRow->GetColumn($strAliasName, 'DateTime');\n        $strAlias = $strAliasPrefix . 'UpdateMessage';\n        $strAliasName = !empty($strColumnAliasArray[$strAlias]) ? $strColumnAliasArray[$strAlias] : $strAlias;\n        $objToReturn->strUpdateMessage = $objDbRow->GetColumn($strAliasName, 'Blob');\n        $strAlias = $strAliasPrefix . 'BackgroundProcess';\n        $strAliasName = !empty($strColumnAliasArray[$strAlias]) ? $strColumnAliasArray[$strAlias] : $strAlias;\n        $objToReturn->intBackgroundProcess = $objDbRow->GetColumn($strAliasName, 'Integer');\n        $strAlias = $strAliasPrefix . 'SearchMetaInfo';\n        $strAliasName = !empty($strColumnAliasArray[$strAlias]) ? $strColumnAliasArray[$strAlias] : $strAlias;\n        $objToReturn->strSearchMetaInfo = $objDbRow->GetColumn($strAliasName, 'Blob');\n        $strAlias = $strAliasPrefix . 'LastUpdated';\n        $strAliasName = !empty($strColumnAliasArray[$strAlias]) ? $strColumnAliasArray[$strAlias] : $strAlias;\n        $objToReturn->strLastUpdated = $objDbRow->GetColumn($strAliasName, 'VarChar');\n        $strAlias = $strAliasPrefix . 'ObjectOwner';\n        $strAliasName = !empty($strColumnAliasArray[$strAlias]) ? $strColumnAliasArray[$strAlias] : $strAlias;\n        $objToReturn->intObjectOwner = $objDbRow->GetColumn($strAliasName, 'Integer');\n\n        if (isset($objPreviousItemArray) && is_array($objPreviousItemArray)) {\n            foreach ($objPreviousItemArray as $objPreviousItem) {\n                if ($objToReturn->Id != $objPreviousItem->Id) {\n                    continue;\n                }\n                // this is a duplicate leaf in a complex join\n                return null; // indicates no object created and the db row has not been used\n            }\n        }\n\n        // Instantiate Virtual Attributes\n        $strVirtualPrefix = $strAliasPrefix . '__';\n        $strVirtualPrefixLength = strlen($strVirtualPrefix);\n        foreach ($objDbRow->GetColumnNameArray() as $strColumnName => $mixValue) {\n            if (strncmp($strColumnName, $strVirtualPrefix, $strVirtualPrefixLength) == 0)\n                $objToReturn->__strVirtualAttributeArray[substr($strColumnName, $strVirtualPrefixLength)] = $mixValue;\n        }\n\n\n        // Prepare to Check for Early/Virtual Binding\n\n        $objExpansionAliasArray = array();\n        if ($objExpandAsArrayNode) {\n            $objExpansionAliasArray = $objExpandAsArrayNode->ChildNodeArray;\n        }\n\n        if (!$strAliasPrefix)\n            $strAliasPrefix = 'BackgroundProcessUpdate__';\n\n        // Check for BackgroundProcessObject Early Binding\n        $strAlias = $strAliasPrefix . 'BackgroundProcess__Id';\n        $strAliasName = !empty($strColumnAliasArray[$strAlias]) ? $strColumnAliasArray[$strAlias] : $strAlias;\n        if (!is_null($objDbRow->GetColumn($strAliasName))) {\n            $objExpansionNode = (empty($objExpansionAliasArray['BackgroundProcess']) ? null : $objExpansionAliasArray['BackgroundProcess']);\n            $objToReturn->objBackgroundProcessObject = BackgroundProcess::InstantiateDbRow($objDbRow, $strAliasPrefix . 'BackgroundProcess__', $objExpansionNode, null, $strColumnAliasArray);\n        }\n\n\n\n        return $objToReturn;\n    }\n\n    /**\n     * Instantiate an array of BackgroundProcessUpdates from a Database Result\n     * @param DatabaseResultBase $objDbResult\n     * @param dxQueryBaseNode $objExpandAsArrayNode\n     * @param string[] $strColumnAliasArray\n     * @return BackgroundProcessUpdate[]\n     */\n    public static function InstantiateDbResult(dxDatabaseResultBase $objDbResult, $objExpandAsArrayNode = null, $strColumnAliasArray = null) {\n        $objToReturn = array();\n\n        if (!$strColumnAliasArray)\n            $strColumnAliasArray = array();\n\n        // If blank resultset, then return empty array\n        if (!$objDbResult)\n            return $objToReturn;\n\n        // Load up the return array with each row\n        if ($objExpandAsArrayNode) {\n            $objToReturn = array();\n            $objPrevItemArray = array();\n            while ($objDbRow = $objDbResult->GetNextRow()) {\n                $objItem = BackgroundProcessUpdate::InstantiateDbRow($objDbRow, null, $objExpandAsArrayNode, $objPrevItemArray, $strColumnAliasArray);\n                if ($objItem) {\n                    $objToReturn[] = $objItem;\n                    $objPrevItemArray[$objItem->intId][] = $objItem;\n                }\n            }\n        } else {\n            while ($objDbRow = $objDbResult->GetNextRow())\n                $objToReturn[] = BackgroundProcessUpdate::InstantiateDbRow($objDbRow, null, null, null, $strColumnAliasArray);\n        }\n\n        return $objToReturn;\n    }\n\n\n    /**\n     * Instantiate a single BackgroundProcessUpdate object from a query cursor (e.g. a DB ResultSet).\n     * Cursor is automatically moved to the \"next row\" of the result set.\n     * Will return NULL if no cursor or if the cursor has no more rows in the resultset.\n     * @param dxDatabaseResultBase $objDbResult cursor resource\n     * @return BackgroundProcessUpdate next row resulting from the query\n     */\n    public static function InstantiateCursor(dxDatabaseResultBase $objDbResult) {\n        // If blank resultset, then return empty result\n        if (!$objDbResult) return null;\n\n        // If empty resultset, then return empty result\n        $objDbRow = $objDbResult->GetNextRow();\n        if (!$objDbRow) return null;\n\n        // We need the Column Aliases\n        $strColumnAliasArray = $objDbResult->QueryBuilder->ColumnAliasArray;\n        if (!$strColumnAliasArray) $strColumnAliasArray = array();\n\n        // Pull Expansions\n        $objExpandAsArrayNode = $objDbResult->QueryBuilder->ExpandAsArrayNode;\n        if (!empty ($objExpandAsArrayNode)) {\n            throw new dxCallerException (\"Cannot use InstantiateCursor with ExpandAsArray\");\n        }\n\n        // Load up the return result with a row and return it\n        return BackgroundProcessUpdate::InstantiateDbRow($objDbRow, null, null, null, $strColumnAliasArray);\n    }\n\n    ///////////////////////////////////////////////////\n    // INDEX-BASED LOAD METHODS (Single Load and Array)\n    ///////////////////////////////////////////////////\n\n    /**\n     * Load a single BackgroundProcessUpdate object,\n     * by Id Index(es)\n     * @param integer $intId\n     * @param dxQueryClause[] $objOptionalClauses additional optional dxQueryClause objects for this query\n     * @return BackgroundProcessUpdate\n    */\n    public static function LoadById($intId, $objOptionalClauses = null) {\n        return BackgroundProcessUpdate::QuerySingle(\n            dxQuery::AndCondition(\n                dxQuery::Equal(dxQueryN::BackgroundProcessUpdate()->Id, $intId)\n            ),\n            $objOptionalClauses\n        );\n    }\n\n    /**\n     * Load an array of BackgroundProcessUpdate objects,\n     * by BackgroundProcess Index(es)\n     * @param integer $intBackgroundProcess\n     * @param dxQueryClause[] $objOptionalClauses additional optional dxQueryClause objects for this query\n     * @return BackgroundProcessUpdate[]\n    */\n    public static function LoadArrayByBackgroundProcess($intBackgroundProcess, $objOptionalClauses = null) {\n        // Call BackgroundProcessUpdate::QueryArray to perform the LoadArrayByBackgroundProcess query\n        try {\n            return BackgroundProcessUpdate::QueryArray(\n                dxQuery::Equal(dxQueryN::BackgroundProcessUpdate()->BackgroundProcess, $intBackgroundProcess),\n                $objOptionalClauses);\n        } catch (dxCallerException $objExc) {\n            $objExc->IncrementOffset();\n            throw $objExc;\n        }\n    }\n\n    /**\n     * Count BackgroundProcessUpdates\n     * by BackgroundProcess Index(es)\n     * @param integer $intBackgroundProcess\n     * @return int\n    */\n    public static function CountByBackgroundProcess($intBackgroundProcess) {\n        // Call BackgroundProcessUpdate::QueryCount to perform the CountByBackgroundProcess query\n        return BackgroundProcessUpdate::QueryCount(\n            dxQuery::Equal(dxQueryN::BackgroundProcessUpdate()->BackgroundProcess, $intBackgroundProcess)\n        );\n    }\n    ////////////////////////////////////////////////////\n    // INDEX-BASED LOAD METHODS (Array via Many to Many)\n    ////////////////////////////////////////////////////\n\n\n    //////////////////////////\n    // SAVE, DELETE AND RELOAD\n    //////////////////////////\n\n    /**\n    * Save this BackgroundProcessUpdate\n    * @param bool $blnForceInsert\n    * @param bool $blnForceUpdate\n    * @return int\n    */\n    public function Save($blnForceInsert = false, $blnForceUpdate = false) {\n        $ObjectAccessArray = ProjectAccessManager::getObjectAccess(ProjectFunctions::getCurrentAccountId(),\"BackgroundProcessUpdate\",$this->intId);\n        // Get the Database Object for this Class\n        $objDatabase = BackgroundProcessUpdate::GetDatabase();\n        $mixToReturn = null;\n        if (!is_numeric($this->intObjectOwner)) {\n            $this->intObjectOwner = ProjectFunctions::getCurrentAccountId();\n        }\n        $ExistingObj = BackgroundProcessUpdate::Load($this->intId);\n        $newAuditLogEntry = new AuditLogEntry();\n        $ChangedArray = array();\n        $newAuditLogEntry->EntryTimeStamp = dxDateTime::Now();\n        $newAuditLogEntry->ObjectId = $this->intId;\n        $newAuditLogEntry->ObjectName = 'BackgroundProcessUpdate';\n        $newAuditLogEntry->UserEmail = ProjectFunctions::getCurrentUserEmailForAudit();\n        if (!$ExistingObj) {\n            $newAuditLogEntry->ModificationType = 'Create';\n            $ChangedArray = array_merge($ChangedArray,array(\"Id\" => $this->intId));\n            $ChangedArray = array_merge($ChangedArray,array(\"UpdateDateTime\" => $this->dttUpdateDateTime));\n            $ChangedArray = array_merge($ChangedArray,array(\"UpdateMessage\" => $this->strUpdateMessage));\n            $ChangedArray = array_merge($ChangedArray,array(\"BackgroundProcess\" => $this->intBackgroundProcess));\n            $ChangedArray = array_merge($ChangedArray,array(\"SearchMetaInfo\" => $this->strSearchMetaInfo));\n            $ChangedArray = array_merge($ChangedArray,array(\"LastUpdated\" => $this->strLastUpdated));\n            $ChangedArray = array_merge($ChangedArray,array(\"ObjectOwner\" => $this->intObjectOwner));\n            $newAuditLogEntry->AuditLogEntryDetail = json_encode($ChangedArray);\n        } else {\n            $newAuditLogEntry->ModificationType = 'Update';\n            $ExistingValueStr = \"NULL\";\n            if (!is_null($ExistingObj->Id)) {\n                $ExistingValueStr = $ExistingObj->Id;\n            }\n            if ($ExistingObj->Id != $this->intId) {\n                $ChangedArray = array_merge($ChangedArray,array(\"Id\" => array(\"Before\" => $ExistingValueStr,\"After\" => $this->intId)));\n                //$ChangedArray = array_merge($ChangedArray,array(\"Id\" => \"From: \".$ExistingValueStr.\" to: \".$this->intId));\n            }\n            $ExistingValueStr = \"NULL\";\n            if (!is_null($ExistingObj->UpdateDateTime)) {\n                $ExistingValueStr = $ExistingObj->UpdateDateTime;\n            }\n            if ($ExistingObj->UpdateDateTime != $this->dttUpdateDateTime) {\n                $ChangedArray = array_merge($ChangedArray,array(\"UpdateDateTime\" => array(\"Before\" => $ExistingValueStr,\"After\" => $this->dttUpdateDateTime)));\n                //$ChangedArray = array_merge($ChangedArray,array(\"UpdateDateTime\" => \"From: \".$ExistingValueStr.\" to: \".$this->dttUpdateDateTime));\n            }\n            $ExistingValueStr = \"NULL\";\n            if (!is_null($ExistingObj->UpdateMessage)) {\n                $ExistingValueStr = $ExistingObj->UpdateMessage;\n            }\n            if ($ExistingObj->UpdateMessage != $this->strUpdateMessage) {\n                $ChangedArray = array_merge($ChangedArray,array(\"UpdateMessage\" => array(\"Before\" => $ExistingValueStr,\"After\" => $this->strUpdateMessage)));\n                //$ChangedArray = array_merge($ChangedArray,array(\"UpdateMessage\" => \"From: \".$ExistingValueStr.\" to: \".$this->strUpdateMessage));\n            }\n            $ExistingValueStr = \"NULL\";\n            if (!is_null($ExistingObj->BackgroundProcess)) {\n                $ExistingValueStr = $ExistingObj->BackgroundProcess;\n            }\n            if ($ExistingObj->BackgroundProcess != $this->intBackgroundProcess) {\n                $ChangedArray = array_merge($ChangedArray,array(\"BackgroundProcess\" => array(\"Before\" => $ExistingValueStr,\"After\" => $this->intBackgroundProcess)));\n                //$ChangedArray = array_merge($ChangedArray,array(\"BackgroundProcess\" => \"From: \".$ExistingValueStr.\" to: \".$this->intBackgroundProcess));\n            }\n            $ExistingValueStr = \"NULL\";\n            if (!is_null($ExistingObj->SearchMetaInfo)) {\n                $ExistingValueStr = $ExistingObj->SearchMetaInfo;\n            }\n            if ($ExistingObj->SearchMetaInfo != $this->strSearchMetaInfo) {\n                $ChangedArray = array_merge($ChangedArray,array(\"SearchMetaInfo\" => array(\"Before\" => $ExistingValueStr,\"After\" => $this->strSearchMetaInfo)));\n                //$ChangedArray = array_merge($ChangedArray,array(\"SearchMetaInfo\" => \"From: \".$ExistingValueStr.\" to: \".$this->strSearchMetaInfo));\n            }\n            $ExistingValueStr = \"NULL\";\n            if (!is_null($ExistingObj->LastUpdated)) {\n                $ExistingValueStr = $ExistingObj->LastUpdated;\n            }\n            if ($ExistingObj->LastUpdated != $this->strLastUpdated) {\n                $ChangedArray = array_merge($ChangedArray,array(\"LastUpdated\" => array(\"Before\" => $ExistingValueStr,\"After\" => $this->strLastUpdated)));\n                //$ChangedArray = array_merge($ChangedArray,array(\"LastUpdated\" => \"From: \".$ExistingValueStr.\" to: \".$this->strLastUpdated));\n            }\n            $ExistingValueStr = \"NULL\";\n            if (!is_null($ExistingObj->ObjectOwner)) {\n                $ExistingValueStr = $ExistingObj->ObjectOwner;\n            }\n            if ($ExistingObj->ObjectOwner != $this->intObjectOwner) {\n                $ChangedArray = array_merge($ChangedArray,array(\"ObjectOwner\" => array(\"Before\" => $ExistingValueStr,\"After\" => $this->intObjectOwner)));\n                //$ChangedArray = array_merge($ChangedArray,array(\"ObjectOwner\" => \"From: \".$ExistingValueStr.\" to: \".$this->intObjectOwner));\n            }\n            $newAuditLogEntry->AuditLogEntryDetail = json_encode($ChangedArray);\n        }\n        try {\n            if ((!$this->__blnRestored) || ($blnForceInsert)) {\n                if (!in_array(AccessOperation::CREATE_STR,$ObjectAccessArray)) {\n                    // This user is not allowed to create an object of this type\n                    throw new Exception(\"User is not allowed to perform operation \".AccessOperation::CREATE_STR.\" on entity of type 'BackgroundProcessUpdate'. Allowed access is \".json_encode($ObjectAccessArray));\n                }\n                // Perform an INSERT query\n                $objDatabase->NonQuery('\n                INSERT INTO `BackgroundProcessUpdate` (\n\t\t\t\t\t\t\t`UpdateDateTime`,\n\t\t\t\t\t\t\t`UpdateMessage`,\n\t\t\t\t\t\t\t`BackgroundProcess`,\n\t\t\t\t\t\t\t`SearchMetaInfo`,\n\t\t\t\t\t\t\t`ObjectOwner`\n\t\t\t\t\t\t) VALUES (\n\t\t\t\t\t\t\t' . $objDatabase->SqlVariable($this->dttUpdateDateTime) . ',\n\t\t\t\t\t\t\t' . $objDatabase->SqlVariable($this->strUpdateMessage) . ',\n\t\t\t\t\t\t\t' . $objDatabase->SqlVariable($this->intBackgroundProcess) . ',\n\t\t\t\t\t\t\t' . $objDatabase->SqlVariable($this->strSearchMetaInfo) . ',\n\t\t\t\t\t\t\t' . $objDatabase->SqlVariable($this->intObjectOwner) . '\n\t\t\t\t\t\t)\n                ');\n\t\t\t\t\t// Update Identity column and return its value\n                $mixToReturn = $this->intId = $objDatabase->InsertId('BackgroundProcessUpdate', 'Id');\n            } else {\n                // Perform an UPDATE query\n                // First checking for Optimistic Locking constraints (if applicable)\n                if (!in_array(AccessOperation::UPDATE_STR,$ObjectAccessArray)) {\n                    // This user is not allowed to create an object of this type\n                    throw new Exception(\"User is not allowed to perform operation \".AccessOperation::UPDATE_STR.\" on entity of type 'BackgroundProcessUpdate'. Allowed access is \".json_encode($ObjectAccessArray));\n                }\n                if (!$blnForceUpdate) {\n                    // Perform the Optimistic Locking check\n                    $objResult = $objDatabase->Query('\n                    SELECT `LastUpdated` FROM `BackgroundProcessUpdate` WHERE\n\t\t\t\t\t\t\t`Id` = ' . $objDatabase->SqlVariable($this->intId) . '');\n\n                $objRow = $objResult->FetchArray();\n                if ($objRow[0] != $this->strLastUpdated)\n                    throw new dxOptimisticLockingException('BackgroundProcessUpdate');\n            }\n\n            // Perform the UPDATE query\n            $objDatabase->NonQuery('\n            UPDATE `BackgroundProcessUpdate` SET\n\t\t\t\t\t\t\t`UpdateDateTime` = ' . $objDatabase->SqlVariable($this->dttUpdateDateTime) . ',\n\t\t\t\t\t\t\t`UpdateMessage` = ' . $objDatabase->SqlVariable($this->strUpdateMessage) . ',\n\t\t\t\t\t\t\t`BackgroundProcess` = ' . $objDatabase->SqlVariable($this->intBackgroundProcess) . ',\n\t\t\t\t\t\t\t`SearchMetaInfo` = ' . $objDatabase->SqlVariable($this->strSearchMetaInfo) . ',\n\t\t\t\t\t\t\t`ObjectOwner` = ' . $objDatabase->SqlVariable($this->intObjectOwner) . '\n            WHERE\n\t\t\t\t\t\t\t`Id` = ' . $objDatabase->SqlVariable($this->intId) . '');\n            }\n\n        } catch (dxCallerException $objExc) {\n            $objExc->IncrementOffset();\n            throw $objExc;\n        }\n        try {\n            $newAuditLogEntry->ObjectId = $this->intId;\n            $newAuditLogEntry->Save();\n        } catch(dxCallerException $e) {\n            error_log('Could not save audit log while saving BackgroundProcessUpdate. Details: '.$newAuditLogEntry->getJson().'<br>Error details: '.$e->getMessage());\n        }\n        // Update __blnRestored and any Non-Identity PK Columns (if applicable)\n        $this->__blnRestored = true;\n\n        // Update Local Timestamp\n        $objResult = $objDatabase->Query('SELECT `LastUpdated` FROM\n                                            `BackgroundProcessUpdate` WHERE\n                \t\t\t\t\t\t\t`Id` = ' . $objDatabase->SqlVariable($this->intId) . '');\n\n        $objRow = $objResult->FetchArray();\n        $this->strLastUpdated = $objRow[0];\n\n        $this->DeleteCache();\n\n        // Return\n        return $mixToReturn;\n    }\n    /**\n     * Delete this BackgroundProcessUpdate\n     * @return void\n     */\n    public function Delete() {\n        if ((is_null($this->intId)))\n            throw new dxUndefinedPrimaryKeyException('Cannot delete this BackgroundProcessUpdate with an unset primary key.');\n\n        $ObjectAccessArray = ProjectAccessManager::getObjectAccess(ProjectFunctions::getCurrentAccountId(),\"BackgroundProcessUpdate\",$this->intId);\n        if (!in_array(AccessOperation::DELETE_STR,$ObjectAccessArray)) {\n            // This user is not allowed to delete an object of this type\n            throw new Exception(\"User is not allowed to perform operation \".AccessOperation::DELETE_STR.\" on entity of type 'BackgroundProcessUpdate'. Allowed access is \".json_encode($ObjectAccessArray));\n        }\n\n        // Get the Database Object for this Class\n        $objDatabase = BackgroundProcessUpdate::GetDatabase();\n        $newAuditLogEntry = new AuditLogEntry();\n        $ChangedArray = array();\n        $newAuditLogEntry->EntryTimeStamp = dxDateTime::Now();\n        $newAuditLogEntry->ObjectId = $this->intId;\n        $newAuditLogEntry->ObjectName = 'BackgroundProcessUpdate';\n        $newAuditLogEntry->UserEmail = ProjectFunctions::getCurrentUserEmailForAudit();\n        $newAuditLogEntry->ModificationType = 'Delete';\n        $ChangedArray = array_merge($ChangedArray,array(\"Id\" => $this->intId));\n        $ChangedArray = array_merge($ChangedArray,array(\"UpdateDateTime\" => $this->dttUpdateDateTime));\n        $ChangedArray = array_merge($ChangedArray,array(\"UpdateMessage\" => $this->strUpdateMessage));\n        $ChangedArray = array_merge($ChangedArray,array(\"BackgroundProcess\" => $this->intBackgroundProcess));\n        $ChangedArray = array_merge($ChangedArray,array(\"SearchMetaInfo\" => $this->strSearchMetaInfo));\n        $ChangedArray = array_merge($ChangedArray,array(\"LastUpdated\" => $this->strLastUpdated));\n        $ChangedArray = array_merge($ChangedArray,array(\"ObjectOwner\" => $this->intObjectOwner));\n        $newAuditLogEntry->AuditLogEntryDetail = json_encode($ChangedArray);\n        try {\n            $newAuditLogEntry->Save();\n        } catch(dxCallerException $e) {\n            error_log('Could not save audit log while deleting BackgroundProcessUpdate. Details: '.$newAuditLogEntry->getJson().'<br>Error details: '.$e->getMessage());\n        }\n\n        // Perform the SQL Query\n        $objDatabase->NonQuery('\n            DELETE FROM\n                `BackgroundProcessUpdate`\n            WHERE\n                `Id` = ' . $objDatabase->SqlVariable($this->intId) . '');\n\n        $this->DeleteCache();\n    }\n\n    /**\n     * Delete this BackgroundProcessUpdate ONLY from the cache\n     * @return void\n     */\n    public function DeleteCache() {\n        if (ProjectFunctions::$objCacheProvider && ProjectFunctions::$Database[1]->Caching) {\n            $strCacheKey = ProjectFunctions::$objCacheProvider->CreateKey(ProjectFunctions::$Database[1]->Database, 'BackgroundProcessUpdate', $this->intId);\n            ProjectFunctions::$objCacheProvider->Delete($strCacheKey);\n        }\n    }\n\n    /**\n     * Delete all BackgroundProcessUpdates\n     * @return void\n     */\n    public static function DeleteAll() {\n        // Get the Database Object for this Class\n        $objDatabase = BackgroundProcessUpdate::GetDatabase();\n\n        // Perform the Query\n        $objDatabase->NonQuery('\n            DELETE FROM\n                `BackgroundProcessUpdate`');\n\n        if (ProjectFunctions::$objCacheProvider && ProjectFunctions::$Database[1]->Caching) {\n            ProjectFunctions::$objCacheProvider->DeleteAll();\n        }\n    }\n\n    /**\n     * Truncate BackgroundProcessUpdate table\n     * @return void\n     */\n    public static function Truncate() {\n        // Get the Database Object for this Class\n        $objDatabase = BackgroundProcessUpdate::GetDatabase();\n\n        // Perform the Query\n        $objDatabase->NonQuery('\n            TRUNCATE `BackgroundProcessUpdate`');\n\n        if (ProjectFunctions::$objCacheProvider && ProjectFunctions::$Database[1]->Caching) {\n            ProjectFunctions::$objCacheProvider->DeleteAll();\n        }\n    }\n    /**\n     * Reload this BackgroundProcessUpdate from the database.\n     * @return void\n     */\n    public function Reload() {\n        // Make sure we are actually Restored from the database\n        if (!$this->__blnRestored)\n            throw new dxCallerException('Cannot call Reload() on a new, unsaved BackgroundProcessUpdate object.');\n\n        $this->DeleteCache();\n\n        // Reload the Object\n        $objReloaded = BackgroundProcessUpdate::Load($this->intId);\n\n        // Update $this's local variables to match\n        $this->dttUpdateDateTime = $objReloaded->dttUpdateDateTime;\n        $this->strUpdateMessage = $objReloaded->strUpdateMessage;\n        $this->BackgroundProcess = $objReloaded->BackgroundProcess;\n        $this->strSearchMetaInfo = $objReloaded->strSearchMetaInfo;\n        $this->strLastUpdated = $objReloaded->strLastUpdated;\n        $this->intObjectOwner = $objReloaded->intObjectOwner;\n    }\n    ////////////////////\n    // PUBLIC OVERRIDERS\n    ////////////////////\n\n        /**\n     * Override method to perform a property \"Get\"\n     * This will get the value of $strName\n     *\n     * @param string $strName Name of the property to get\n     * @return mixed\n     */\n    public function __get($strName) {\n        switch ($strName) {\n            ///////////////////\n            // Member Variables\n            ///////////////////\n            case 'Id':\n                /**\n                 * Gets the value for intId (Read-Only PK)\n                 * @return integer\n                 */\n                return $this->intId;\n\n            case 'UpdateDateTime':\n                /**\n                 * Gets the value for dttUpdateDateTime \n                 * @return dxDateTime\n                 */\n                return $this->dttUpdateDateTime;\n\n            case 'UpdateMessage':\n                /**\n                 * Gets the value for strUpdateMessage \n                 * @return string\n                 */\n                return $this->strUpdateMessage;\n\n            case 'BackgroundProcess':\n                /**\n                 * Gets the value for intBackgroundProcess \n                 * @return integer\n                 */\n                return $this->intBackgroundProcess;\n\n            case 'SearchMetaInfo':\n                /**\n                 * Gets the value for strSearchMetaInfo \n                 * @return string\n                 */\n                return $this->strSearchMetaInfo;\n\n            case 'LastUpdated':\n                /**\n                 * Gets the value for strLastUpdated (Read-Only Timestamp)\n                 * @return string\n                 */\n                return $this->strLastUpdated;\n\n            case 'ObjectOwner':\n                /**\n                 * Gets the value for intObjectOwner \n                 * @return integer\n                 */\n                return $this->intObjectOwner;\n\n\n            ///////////////////\n            // Member Objects\n            ///////////////////\n            case 'BackgroundProcessObject':\n                /**\n                 * Gets the value for the BackgroundProcess object referenced by intBackgroundProcess \n                 * @return BackgroundProcess\n                 */\n                try {\n                    if ((!$this->objBackgroundProcessObject) && (!is_null($this->intBackgroundProcess)))\n                        $this->objBackgroundProcessObject = BackgroundProcess::Load($this->intBackgroundProcess);\n                    return $this->objBackgroundProcessObject;\n                } catch (dxCallerException $objExc) {\n                    $objExc->IncrementOffset();\n                    throw $objExc;\n                }\n\n\n            ////////////////////////////\n            // Virtual Object References (Many to Many and Reverse References)\n            // (If restored via a \"Many-to\" expansion)\n            ////////////////////////////\n\n\n            case '__Restored':\n                return $this->__blnRestored;\n\n            default:\n                try {\n                    return parent::__get($strName);\n                } catch (dxCallerException $objExc) {\n                    $objExc->IncrementOffset();\n                    throw $objExc;\n                }\n        }\n    }\n        /**\n     * Override method to perform a property \"Set\"\n     * This will set the property $strName to be $mixValue\n     *\n     * @param string $strName Name of the property to set\n     * @param string $mixValue New value of the property\n     * @return mixed\n     */\n    public function __set($strName, $mixValue) {\n        switch ($strName) {\n            ///////////////////\n            // Member Variables\n            ///////////////////\n            case 'UpdateDateTime':\n                /**\n                 * Sets the value for dttUpdateDateTime \n                 * @param dxDateTime $mixValue\n                 * @return dxDateTime\n                 */\n                try {\n                    return ($this->dttUpdateDateTime = dxType::Cast($mixValue, dxType::DateTime));\n                } catch (dxCallerException $objExc) {\n                    $objExc->IncrementOffset();\n                    throw $objExc;\n                }\n\n            case 'UpdateMessage':\n                /**\n                 * Sets the value for strUpdateMessage \n                 * @param string $mixValue\n                 * @return string\n                 */\n                try {\n                    return ($this->strUpdateMessage = dxType::Cast($mixValue, dxType::String));\n                } catch (dxCallerException $objExc) {\n                    $objExc->IncrementOffset();\n                    throw $objExc;\n                }\n\n            case 'BackgroundProcess':\n                /**\n                 * Sets the value for intBackgroundProcess \n                 * @param integer $mixValue\n                 * @return integer\n                 */\n                try {\n                    $this->objBackgroundProcessObject = null;\n                    return ($this->intBackgroundProcess = dxType::Cast($mixValue, dxType::Integer));\n                } catch (dxCallerException $objExc) {\n                    $objExc->IncrementOffset();\n                    throw $objExc;\n                }\n\n            case 'SearchMetaInfo':\n                /**\n                 * Sets the value for strSearchMetaInfo \n                 * @param string $mixValue\n                 * @return string\n                 */\n                try {\n                    return ($this->strSearchMetaInfo = dxType::Cast($mixValue, dxType::String));\n                } catch (dxCallerException $objExc) {\n                    $objExc->IncrementOffset();\n                    throw $objExc;\n                }\n\n            case 'ObjectOwner':\n                /**\n                 * Sets the value for intObjectOwner \n                 * @param integer $mixValue\n                 * @return integer\n                 */\n                try {\n                    return ($this->intObjectOwner = dxType::Cast($mixValue, dxType::Integer));\n                } catch (dxCallerException $objExc) {\n                    $objExc->IncrementOffset();\n                    throw $objExc;\n                }\n\n\n            ///////////////////\n            // Member Objects\n            ///////////////////\n            case 'BackgroundProcessObject':\n                /**\n                 * Sets the value for the BackgroundProcess object referenced by intBackgroundProcess \n                 * @param BackgroundProcess $mixValue\n                 * @return BackgroundProcess\n                 */\n                if (is_null($mixValue)) {\n                    $this->intBackgroundProcess = null;\n                    $this->objBackgroundProcessObject = null;\n                    return null;\n                } else {\n                    // Make sure $mixValue actually is a BackgroundProcess object\n                    try {\n                        $mixValue = dxType::Cast($mixValue, 'BackgroundProcess');\n                    } catch (dxInvalidCastException $objExc) {\n                        $objExc->IncrementOffset();\n                        throw $objExc;\n                    }\n\n                    // Make sure $mixValue is a SAVED BackgroundProcess object\n                    if (is_null($mixValue->Id))\n                        throw new dxCallerException('Unable to set an unsaved BackgroundProcessObject for this BackgroundProcessUpdate');\n\n                    // Update Local Member Variables\n                    $this->objBackgroundProcessObject = $mixValue;\n                    $this->intBackgroundProcess = $mixValue->Id;\n\n                    // Return $mixValue\n                    return $mixValue;\n                }\n                break;\n\n            default:\n                try {\n                    return parent::__set($strName, $mixValue);\n                } catch (dxCallerException $objExc) {\n                    $objExc->IncrementOffset();\n                    throw $objExc;\n                }\n        }\n    }\n    /**\n     * Lookup a VirtualAttribute value (if applicable).  Returns NULL if none found.\n     * @param string $strName\n     * @return string\n     */\n    public function GetVirtualAttribute($strName) {\n        if (array_key_exists($strName, $this->__strVirtualAttributeArray))\n            return $this->__strVirtualAttributeArray[$strName];\n        return null;\n    }\n\n    ///////////////////////////////\n    // ASSOCIATED OBJECTS' METHODS\n    ///////////////////////////////\n\n\n\n    \n///////////////////////////////\n    // METHODS TO EXTRACT INFO ABOUT THE CLASS\n    ///////////////////////////////\n\n    /**\n     * Static method to retrieve the Database object that owns this class.\n     * @return string Name of the table from which this class has been created.\n     */\n    public static function GetTableName() {\n        return \"BackgroundProcessUpdate\";\n    }\n\n    /**\n     * Static method to retrieve the Table name from which this class has been created.\n     * @return string Name of the table from which this class has been created.\n     */\n    public static function GetDatabaseName() {\n        return ProjectFunctions::$Database[BackgroundProcessUpdate::GetDatabaseIndex()]->Database;\n    }\n\n    /**\n     * Static method to retrieve the Database index in the configuration.inc.php file.\n     * This can be useful when there are two databases of the same name which create\n     * confusion for the developer. There are no internal uses of this function but are\n     * here to help retrieve info if need be!\n     * @return int position or index of the database in the config file.\n     */\n    public static function GetDatabaseIndex() {\n        return 1;\n    }\n\n    ////////////////////////////////////////\n    // METHODS for SOAP-BASED WEB SERVICES\n    ////////////////////////////////////////\n\n    public static function GetSoapComplexTypeXml() {\n        $strToReturn = '<complexType name=\"BackgroundProcessUpdate\"><sequence>';\n        $strToReturn .= '<element name=\"Id\" type=\"xsd:int\"/>';\n        $strToReturn .= '<element name=\"UpdateDateTime\" type=\"xsd:dateTime\"/>';\n        $strToReturn .= '<element name=\"UpdateMessage\" type=\"xsd:string\"/>';\n        $strToReturn .= '<element name=\"BackgroundProcessObject\" type=\"xsd1:BackgroundProcess\"/>';\n        $strToReturn .= '<element name=\"SearchMetaInfo\" type=\"xsd:string\"/>';\n        $strToReturn .= '<element name=\"LastUpdated\" type=\"xsd:string\"/>';\n        $strToReturn .= '<element name=\"ObjectOwner\" type=\"xsd:int\"/>';\n        $strToReturn .= '<element name=\"__blnRestored\" type=\"xsd:boolean\"/>';\n        $strToReturn .= '</sequence></complexType>';\n        return $strToReturn;\n    }\n\n    public static function AlterSoapComplexTypeArray(&$strComplexTypeArray) {\n        if (!array_key_exists('BackgroundProcessUpdate', $strComplexTypeArray)) {\n            $strComplexTypeArray['BackgroundProcessUpdate'] = BackgroundProcessUpdate::GetSoapComplexTypeXml();\n            BackgroundProcess::AlterSoapComplexTypeArray($strComplexTypeArray);\n        }\n    }\n\n    public static function GetArrayFromSoapArray($objSoapArray) {\n        $objArrayToReturn = array();\n\n        foreach ($objSoapArray as $objSoapObject)\n            array_push($objArrayToReturn, BackgroundProcessUpdate::GetObjectFromSoapObject($objSoapObject));\n\n        return $objArrayToReturn;\n    }\n\n    public static function GetObjectFromSoapObject($objSoapObject) {\n        $objToReturn = new BackgroundProcessUpdate();\n        if (property_exists($objSoapObject, 'Id'))\n            $objToReturn->intId = $objSoapObject->Id;\n        if (property_exists($objSoapObject, 'UpdateDateTime'))\n            $objToReturn->dttUpdateDateTime = new dxDateTime($objSoapObject->UpdateDateTime);\n        if (property_exists($objSoapObject, 'UpdateMessage'))\n            $objToReturn->strUpdateMessage = $objSoapObject->UpdateMessage;\n        if ((property_exists($objSoapObject, 'BackgroundProcessObject')) &&\n            ($objSoapObject->BackgroundProcessObject))\n            $objToReturn->BackgroundProcessObject = BackgroundProcess::GetObjectFromSoapObject($objSoapObject->BackgroundProcessObject);\n        if (property_exists($objSoapObject, 'SearchMetaInfo'))\n            $objToReturn->strSearchMetaInfo = $objSoapObject->SearchMetaInfo;\n        if (property_exists($objSoapObject, 'LastUpdated'))\n            $objToReturn->strLastUpdated = $objSoapObject->LastUpdated;\n        if (property_exists($objSoapObject, 'ObjectOwner'))\n            $objToReturn->intObjectOwner = $objSoapObject->ObjectOwner;\n        if (property_exists($objSoapObject, '__blnRestored'))\n            $objToReturn->__blnRestored = $objSoapObject->__blnRestored;\n        return $objToReturn;\n    }\n\n    public static function GetSoapArrayFromArray($objArray) {\n        if (!$objArray)\n            return null;\n\n        $objArrayToReturn = array();\n\n        foreach ($objArray as $objObject)\n            array_push($objArrayToReturn, BackgroundProcessUpdate::GetSoapObjectFromObject($objObject, true));\n\n        return unserialize(serialize($objArrayToReturn));\n    }\n\n    public static function GetSoapObjectFromObject($objObject, $blnBindRelatedObjects) {\n        if ($objObject->dttUpdateDateTime)\n            $objObject->dttUpdateDateTime = $objObject->dttUpdateDateTime->qFormat(dxDateTime::FormatSoap);\n        if ($objObject->objBackgroundProcessObject)\n            $objObject->objBackgroundProcessObject = BackgroundProcess::GetSoapObjectFromObject($objObject->objBackgroundProcessObject, false);\n        else if (!$blnBindRelatedObjects)\n            $objObject->intBackgroundProcess = null;\n        return $objObject;\n    }\n\n\n    ////////////////////////////////////////\n    // METHODS for JSON Object Translation\n    ////////////////////////////////////////\n\n    // this function is required for objects that implement the\n    // IteratorAggregate interface\n    public function getIterator() {\n        ///////////////////\n        // Member Variables\n        ///////////////////\n        $iArray['Id'] = $this->intId;\n        $iArray['UpdateDateTime'] = $this->dttUpdateDateTime;\n        $iArray['UpdateMessage'] = $this->strUpdateMessage;\n        $iArray['BackgroundProcess'] = $this->intBackgroundProcess;\n        $iArray['SearchMetaInfo'] = $this->strSearchMetaInfo;\n        $iArray['LastUpdated'] = $this->strLastUpdated;\n        $iArray['ObjectOwner'] = $this->intObjectOwner;\n        return new ArrayIterator($iArray);\n    }\n\n    // this function returns a Json formatted string using the\n    // IteratorAggregate interface\n    public function getJson() {\n        return json_encode($this->getIterator());\n    }\n\n    /**\n     * Default \"toJsObject\" handler\n     * Specifies how the object should be displayed in JQuery UI lists and menus. Note that these lists use\n     * value and label differently.\n     *\n     * value \t= The short form of what to display in the list and selection.\n     * label \t= [optional] If defined, is what is displayed in the menu\n     * id \t\t= Primary key of object.\n     *\n     * @return an array that specifies how to display the object\n     */\n    public function toJsObject () {\n        return JavaScriptHelper::toJsObject(array('value' => $this->__toString(), 'id' =>  $this->intId ));\n    }\n\n\n}\n\n/////////////////////////////////////\n\t// ADDITIONAL CLASSES for DIVBLOX QUERY\n\t/////////////////////////////////////\n\n    /**\n     * @uses dxQueryNode\n     *\n     * @property-read dxQueryNode $Id\n     * @property-read dxQueryNode $UpdateDateTime\n     * @property-read dxQueryNode $UpdateMessage\n     * @property-read dxQueryNode $BackgroundProcess\n     * @property-read dxQueryNodeBackgroundProcess $BackgroundProcessObject\n     * @property-read dxQueryNode $SearchMetaInfo\n     * @property-read dxQueryNode $LastUpdated\n     * @property-read dxQueryNode $ObjectOwner\n     *\n     *\n\n     * @property-read dxQueryNode $_PrimaryKeyNode\n     **/\n\tclass dxQueryNodeBackgroundProcessUpdate extends dxQueryNode {\n\t\tprotected $strTableName = 'BackgroundProcessUpdate';\n\t\tprotected $strPrimaryKey = 'Id';\n\t\tprotected $strClassName = 'BackgroundProcessUpdate';\n\t\tpublic function __get($strName) {\n\t\t\tswitch ($strName) {\n\t\t\t\tcase 'Id':\n\t\t\t\t\treturn new dxQueryNode('Id', 'Id', 'Integer', $this);\n\t\t\t\tcase 'UpdateDateTime':\n\t\t\t\t\treturn new dxQueryNode('UpdateDateTime', 'UpdateDateTime', 'DateTime', $this);\n\t\t\t\tcase 'UpdateMessage':\n\t\t\t\t\treturn new dxQueryNode('UpdateMessage', 'UpdateMessage', 'Blob', $this);\n\t\t\t\tcase 'BackgroundProcess':\n\t\t\t\t\treturn new dxQueryNode('BackgroundProcess', 'BackgroundProcess', 'Integer', $this);\n\t\t\t\tcase 'BackgroundProcessObject':\n\t\t\t\t\treturn new dxQueryNodeBackgroundProcess('BackgroundProcess', 'BackgroundProcessObject', 'Integer', $this);\n\t\t\t\tcase 'SearchMetaInfo':\n\t\t\t\t\treturn new dxQueryNode('SearchMetaInfo', 'SearchMetaInfo', 'Blob', $this);\n\t\t\t\tcase 'LastUpdated':\n\t\t\t\t\treturn new dxQueryNode('LastUpdated', 'LastUpdated', 'VarChar', $this);\n\t\t\t\tcase 'ObjectOwner':\n\t\t\t\t\treturn new dxQueryNode('ObjectOwner', 'ObjectOwner', 'Integer', $this);\n\n\t\t\t\tcase '_PrimaryKeyNode':\n\t\t\t\t\treturn new dxQueryNode('Id', 'Id', 'Integer', $this);\n\t\t\t\tdefault:\n\t\t\t\t\ttry {\n\t\t\t\t\t\treturn parent::__get($strName);\n\t\t\t\t\t} catch (dxCallerException $objExc) {\n\t\t\t\t\t\t$objExc->IncrementOffset();\n\t\t\t\t\t\tthrow $objExc;\n\t\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n    /**\n     * @property-read dxQueryNode $Id\n     * @property-read dxQueryNode $UpdateDateTime\n     * @property-read dxQueryNode $UpdateMessage\n     * @property-read dxQueryNode $BackgroundProcess\n     * @property-read dxQueryNodeBackgroundProcess $BackgroundProcessObject\n     * @property-read dxQueryNode $SearchMetaInfo\n     * @property-read dxQueryNode $LastUpdated\n     * @property-read dxQueryNode $ObjectOwner\n     *\n     *\n\n     * @property-read dxQueryNode $_PrimaryKeyNode\n     **/\n\tclass dxQueryReverseReferenceNodeBackgroundProcessUpdate extends dxQueryReverseReferenceNode {\n\t\tprotected $strTableName = 'BackgroundProcessUpdate';\n\t\tprotected $strPrimaryKey = 'Id';\n\t\tprotected $strClassName = 'BackgroundProcessUpdate';\n\t\tpublic function __get($strName) {\n\t\t\tswitch ($strName) {\n\t\t\t\tcase 'Id':\n\t\t\t\t\treturn new dxQueryNode('Id', 'Id', 'integer', $this);\n\t\t\t\tcase 'UpdateDateTime':\n\t\t\t\t\treturn new dxQueryNode('UpdateDateTime', 'UpdateDateTime', 'dxDateTime', $this);\n\t\t\t\tcase 'UpdateMessage':\n\t\t\t\t\treturn new dxQueryNode('UpdateMessage', 'UpdateMessage', 'string', $this);\n\t\t\t\tcase 'BackgroundProcess':\n\t\t\t\t\treturn new dxQueryNode('BackgroundProcess', 'BackgroundProcess', 'integer', $this);\n\t\t\t\tcase 'BackgroundProcessObject':\n\t\t\t\t\treturn new dxQueryNodeBackgroundProcess('BackgroundProcess', 'BackgroundProcessObject', 'integer', $this);\n\t\t\t\tcase 'SearchMetaInfo':\n\t\t\t\t\treturn new dxQueryNode('SearchMetaInfo', 'SearchMetaInfo', 'string', $this);\n\t\t\t\tcase 'LastUpdated':\n\t\t\t\t\treturn new dxQueryNode('LastUpdated', 'LastUpdated', 'string', $this);\n\t\t\t\tcase 'ObjectOwner':\n\t\t\t\t\treturn new dxQueryNode('ObjectOwner', 'ObjectOwner', 'integer', $this);\n\n\t\t\t\tcase '_PrimaryKeyNode':\n\t\t\t\t\treturn new dxQueryNode('Id', 'Id', 'integer', $this);\n\t\t\t\tdefault:\n\t\t\t\t\ttry {\n\t\t\t\t\t\treturn parent::__get($strName);\n\t\t\t\t\t} catch (dxCallerException $objExc) {\n\t\t\t\t\t\t$objExc->IncrementOffset();\n\t\t\t\t\t\tthrow $objExc;\n\t\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n?>\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- divblox/config/database/data_model_orm/generated/BackgroundProcessUpdateGen.class.php	(revision 8088b90ea0ab6ee30e69c949666fde75c4664610)
+++ divblox/config/database/data_model_orm/generated/BackgroundProcessUpdateGen.class.php	(date 1589789351334)
@@ -18,9 +18,9 @@
  * @property-read integer $Id the value for intId (Read-Only PK)
  * @property dxDateTime $UpdateDateTime the value for dttUpdateDateTime 
  * @property string $UpdateMessage the value for strUpdateMessage 
+ * @property-read string $LastUpdated the value for strLastUpdated (Read-Only Timestamp)
  * @property integer $BackgroundProcess the value for intBackgroundProcess 
  * @property string $SearchMetaInfo the value for strSearchMetaInfo 
- * @property-read string $LastUpdated the value for strLastUpdated (Read-Only Timestamp)
  * @property integer $ObjectOwner the value for intObjectOwner 
  * @property BackgroundProcess $BackgroundProcessObject the value for the BackgroundProcess object referenced by intBackgroundProcess 
  * @property-read boolean $__Restored whether or not this object was restored from the database (as opposed to created new)
@@ -55,6 +55,14 @@
     const UpdateMessageDefault = null;
 
 
+    /**
+     * Protected member variable that maps to the database column BackgroundProcessUpdate.LastUpdated
+     * @var string strLastUpdated
+     */
+    protected $strLastUpdated;
+    const LastUpdatedDefault = null;
+
+
     /**
      * Protected member variable that maps to the database column BackgroundProcessUpdate.BackgroundProcess
      * @var integer intBackgroundProcess
@@ -71,14 +79,6 @@
     const SearchMetaInfoDefault = null;
 
 
-    /**
-     * Protected member variable that maps to the database column BackgroundProcessUpdate.LastUpdated
-     * @var string strLastUpdated
-     */
-    protected $strLastUpdated;
-    const LastUpdatedDefault = null;
-
-
     /**
      * Protected member variable that maps to the database column BackgroundProcessUpdate.ObjectOwner
      * @var integer intObjectOwner
@@ -124,9 +124,9 @@
         $this->intId = BackgroundProcessUpdate::IdDefault;
         $this->dttUpdateDateTime = (BackgroundProcessUpdate::UpdateDateTimeDefault === null)?null:new dxDateTime(BackgroundProcessUpdate::UpdateDateTimeDefault);
         $this->strUpdateMessage = BackgroundProcessUpdate::UpdateMessageDefault;
+        $this->strLastUpdated = BackgroundProcessUpdate::LastUpdatedDefault;
         $this->intBackgroundProcess = BackgroundProcessUpdate::BackgroundProcessDefault;
         $this->strSearchMetaInfo = BackgroundProcessUpdate::SearchMetaInfoDefault;
-        $this->strLastUpdated = BackgroundProcessUpdate::LastUpdatedDefault;
         $this->intObjectOwner = BackgroundProcessUpdate::ObjectOwnerDefault;
     }
 
@@ -467,9 +467,9 @@
             $objBuilder->AddSelectItem($strTableName, 'Id', $strAliasPrefix . 'Id');
             $objBuilder->AddSelectItem($strTableName, 'UpdateDateTime', $strAliasPrefix . 'UpdateDateTime');
             $objBuilder->AddSelectItem($strTableName, 'UpdateMessage', $strAliasPrefix . 'UpdateMessage');
+            $objBuilder->AddSelectItem($strTableName, 'LastUpdated', $strAliasPrefix . 'LastUpdated');
             $objBuilder->AddSelectItem($strTableName, 'BackgroundProcess', $strAliasPrefix . 'BackgroundProcess');
             $objBuilder->AddSelectItem($strTableName, 'SearchMetaInfo', $strAliasPrefix . 'SearchMetaInfo');
-            $objBuilder->AddSelectItem($strTableName, 'LastUpdated', $strAliasPrefix . 'LastUpdated');
             $objBuilder->AddSelectItem($strTableName, 'ObjectOwner', $strAliasPrefix . 'ObjectOwner');
         }
     }
@@ -601,15 +601,15 @@
         $strAlias = $strAliasPrefix . 'UpdateMessage';
         $strAliasName = !empty($strColumnAliasArray[$strAlias]) ? $strColumnAliasArray[$strAlias] : $strAlias;
         $objToReturn->strUpdateMessage = $objDbRow->GetColumn($strAliasName, 'Blob');
+        $strAlias = $strAliasPrefix . 'LastUpdated';
+        $strAliasName = !empty($strColumnAliasArray[$strAlias]) ? $strColumnAliasArray[$strAlias] : $strAlias;
+        $objToReturn->strLastUpdated = $objDbRow->GetColumn($strAliasName, 'VarChar');
         $strAlias = $strAliasPrefix . 'BackgroundProcess';
         $strAliasName = !empty($strColumnAliasArray[$strAlias]) ? $strColumnAliasArray[$strAlias] : $strAlias;
         $objToReturn->intBackgroundProcess = $objDbRow->GetColumn($strAliasName, 'Integer');
         $strAlias = $strAliasPrefix . 'SearchMetaInfo';
         $strAliasName = !empty($strColumnAliasArray[$strAlias]) ? $strColumnAliasArray[$strAlias] : $strAlias;
         $objToReturn->strSearchMetaInfo = $objDbRow->GetColumn($strAliasName, 'Blob');
-        $strAlias = $strAliasPrefix . 'LastUpdated';
-        $strAliasName = !empty($strColumnAliasArray[$strAlias]) ? $strColumnAliasArray[$strAlias] : $strAlias;
-        $objToReturn->strLastUpdated = $objDbRow->GetColumn($strAliasName, 'VarChar');
         $strAlias = $strAliasPrefix . 'ObjectOwner';
         $strAliasName = !empty($strColumnAliasArray[$strAlias]) ? $strColumnAliasArray[$strAlias] : $strAlias;
         $objToReturn->intObjectOwner = $objDbRow->GetColumn($strAliasName, 'Integer');
@@ -808,9 +808,9 @@
             $ChangedArray = array_merge($ChangedArray,array("Id" => $this->intId));
             $ChangedArray = array_merge($ChangedArray,array("UpdateDateTime" => $this->dttUpdateDateTime));
             $ChangedArray = array_merge($ChangedArray,array("UpdateMessage" => $this->strUpdateMessage));
+            $ChangedArray = array_merge($ChangedArray,array("LastUpdated" => $this->strLastUpdated));
             $ChangedArray = array_merge($ChangedArray,array("BackgroundProcess" => $this->intBackgroundProcess));
             $ChangedArray = array_merge($ChangedArray,array("SearchMetaInfo" => $this->strSearchMetaInfo));
-            $ChangedArray = array_merge($ChangedArray,array("LastUpdated" => $this->strLastUpdated));
             $ChangedArray = array_merge($ChangedArray,array("ObjectOwner" => $this->intObjectOwner));
             $newAuditLogEntry->AuditLogEntryDetail = json_encode($ChangedArray);
         } else {
@@ -839,6 +839,14 @@
                 $ChangedArray = array_merge($ChangedArray,array("UpdateMessage" => array("Before" => $ExistingValueStr,"After" => $this->strUpdateMessage)));
                 //$ChangedArray = array_merge($ChangedArray,array("UpdateMessage" => "From: ".$ExistingValueStr." to: ".$this->strUpdateMessage));
             }
+            $ExistingValueStr = "NULL";
+            if (!is_null($ExistingObj->LastUpdated)) {
+                $ExistingValueStr = $ExistingObj->LastUpdated;
+            }
+            if ($ExistingObj->LastUpdated != $this->strLastUpdated) {
+                $ChangedArray = array_merge($ChangedArray,array("LastUpdated" => array("Before" => $ExistingValueStr,"After" => $this->strLastUpdated)));
+                //$ChangedArray = array_merge($ChangedArray,array("LastUpdated" => "From: ".$ExistingValueStr." to: ".$this->strLastUpdated));
+            }
             $ExistingValueStr = "NULL";
             if (!is_null($ExistingObj->BackgroundProcess)) {
                 $ExistingValueStr = $ExistingObj->BackgroundProcess;
@@ -855,14 +863,6 @@
                 $ChangedArray = array_merge($ChangedArray,array("SearchMetaInfo" => array("Before" => $ExistingValueStr,"After" => $this->strSearchMetaInfo)));
                 //$ChangedArray = array_merge($ChangedArray,array("SearchMetaInfo" => "From: ".$ExistingValueStr." to: ".$this->strSearchMetaInfo));
             }
-            $ExistingValueStr = "NULL";
-            if (!is_null($ExistingObj->LastUpdated)) {
-                $ExistingValueStr = $ExistingObj->LastUpdated;
-            }
-            if ($ExistingObj->LastUpdated != $this->strLastUpdated) {
-                $ChangedArray = array_merge($ChangedArray,array("LastUpdated" => array("Before" => $ExistingValueStr,"After" => $this->strLastUpdated)));
-                //$ChangedArray = array_merge($ChangedArray,array("LastUpdated" => "From: ".$ExistingValueStr." to: ".$this->strLastUpdated));
-            }
             $ExistingValueStr = "NULL";
             if (!is_null($ExistingObj->ObjectOwner)) {
                 $ExistingValueStr = $ExistingObj->ObjectOwner;
@@ -979,9 +979,9 @@
         $ChangedArray = array_merge($ChangedArray,array("Id" => $this->intId));
         $ChangedArray = array_merge($ChangedArray,array("UpdateDateTime" => $this->dttUpdateDateTime));
         $ChangedArray = array_merge($ChangedArray,array("UpdateMessage" => $this->strUpdateMessage));
+        $ChangedArray = array_merge($ChangedArray,array("LastUpdated" => $this->strLastUpdated));
         $ChangedArray = array_merge($ChangedArray,array("BackgroundProcess" => $this->intBackgroundProcess));
         $ChangedArray = array_merge($ChangedArray,array("SearchMetaInfo" => $this->strSearchMetaInfo));
-        $ChangedArray = array_merge($ChangedArray,array("LastUpdated" => $this->strLastUpdated));
         $ChangedArray = array_merge($ChangedArray,array("ObjectOwner" => $this->intObjectOwner));
         $newAuditLogEntry->AuditLogEntryDetail = json_encode($ChangedArray);
         try {
@@ -1062,9 +1062,9 @@
         // Update $this's local variables to match
         $this->dttUpdateDateTime = $objReloaded->dttUpdateDateTime;
         $this->strUpdateMessage = $objReloaded->strUpdateMessage;
+        $this->strLastUpdated = $objReloaded->strLastUpdated;
         $this->BackgroundProcess = $objReloaded->BackgroundProcess;
         $this->strSearchMetaInfo = $objReloaded->strSearchMetaInfo;
-        $this->strLastUpdated = $objReloaded->strLastUpdated;
         $this->intObjectOwner = $objReloaded->intObjectOwner;
     }
     ////////////////////
@@ -1104,6 +1104,13 @@
                  */
                 return $this->strUpdateMessage;
 
+            case 'LastUpdated':
+                /**
+                 * Gets the value for strLastUpdated (Read-Only Timestamp)
+                 * @return string
+                 */
+                return $this->strLastUpdated;
+
             case 'BackgroundProcess':
                 /**
                  * Gets the value for intBackgroundProcess 
@@ -1118,13 +1125,6 @@
                  */
                 return $this->strSearchMetaInfo;
 
-            case 'LastUpdated':
-                /**
-                 * Gets the value for strLastUpdated (Read-Only Timestamp)
-                 * @return string
-                 */
-                return $this->strLastUpdated;
-
             case 'ObjectOwner':
                 /**
                  * Gets the value for intObjectOwner 
@@ -1351,9 +1351,9 @@
         $strToReturn .= '<element name="Id" type="xsd:int"/>';
         $strToReturn .= '<element name="UpdateDateTime" type="xsd:dateTime"/>';
         $strToReturn .= '<element name="UpdateMessage" type="xsd:string"/>';
+        $strToReturn .= '<element name="LastUpdated" type="xsd:string"/>';
         $strToReturn .= '<element name="BackgroundProcessObject" type="xsd1:BackgroundProcess"/>';
         $strToReturn .= '<element name="SearchMetaInfo" type="xsd:string"/>';
-        $strToReturn .= '<element name="LastUpdated" type="xsd:string"/>';
         $strToReturn .= '<element name="ObjectOwner" type="xsd:int"/>';
         $strToReturn .= '<element name="__blnRestored" type="xsd:boolean"/>';
         $strToReturn .= '</sequence></complexType>';
@@ -1384,13 +1384,13 @@
             $objToReturn->dttUpdateDateTime = new dxDateTime($objSoapObject->UpdateDateTime);
         if (property_exists($objSoapObject, 'UpdateMessage'))
             $objToReturn->strUpdateMessage = $objSoapObject->UpdateMessage;
+        if (property_exists($objSoapObject, 'LastUpdated'))
+            $objToReturn->strLastUpdated = $objSoapObject->LastUpdated;
         if ((property_exists($objSoapObject, 'BackgroundProcessObject')) &&
             ($objSoapObject->BackgroundProcessObject))
             $objToReturn->BackgroundProcessObject = BackgroundProcess::GetObjectFromSoapObject($objSoapObject->BackgroundProcessObject);
         if (property_exists($objSoapObject, 'SearchMetaInfo'))
             $objToReturn->strSearchMetaInfo = $objSoapObject->SearchMetaInfo;
-        if (property_exists($objSoapObject, 'LastUpdated'))
-            $objToReturn->strLastUpdated = $objSoapObject->LastUpdated;
         if (property_exists($objSoapObject, 'ObjectOwner'))
             $objToReturn->intObjectOwner = $objSoapObject->ObjectOwner;
         if (property_exists($objSoapObject, '__blnRestored'))
@@ -1434,9 +1434,9 @@
         $iArray['Id'] = $this->intId;
         $iArray['UpdateDateTime'] = $this->dttUpdateDateTime;
         $iArray['UpdateMessage'] = $this->strUpdateMessage;
+        $iArray['LastUpdated'] = $this->strLastUpdated;
         $iArray['BackgroundProcess'] = $this->intBackgroundProcess;
         $iArray['SearchMetaInfo'] = $this->strSearchMetaInfo;
-        $iArray['LastUpdated'] = $this->strLastUpdated;
         $iArray['ObjectOwner'] = $this->intObjectOwner;
         return new ArrayIterator($iArray);
     }
@@ -1475,10 +1475,10 @@
      * @property-read dxQueryNode $Id
      * @property-read dxQueryNode $UpdateDateTime
      * @property-read dxQueryNode $UpdateMessage
+     * @property-read dxQueryNode $LastUpdated
      * @property-read dxQueryNode $BackgroundProcess
      * @property-read dxQueryNodeBackgroundProcess $BackgroundProcessObject
      * @property-read dxQueryNode $SearchMetaInfo
-     * @property-read dxQueryNode $LastUpdated
      * @property-read dxQueryNode $ObjectOwner
      *
      *
@@ -1497,14 +1497,14 @@
 					return new dxQueryNode('UpdateDateTime', 'UpdateDateTime', 'DateTime', $this);
 				case 'UpdateMessage':
 					return new dxQueryNode('UpdateMessage', 'UpdateMessage', 'Blob', $this);
+				case 'LastUpdated':
+					return new dxQueryNode('LastUpdated', 'LastUpdated', 'VarChar', $this);
 				case 'BackgroundProcess':
 					return new dxQueryNode('BackgroundProcess', 'BackgroundProcess', 'Integer', $this);
 				case 'BackgroundProcessObject':
 					return new dxQueryNodeBackgroundProcess('BackgroundProcess', 'BackgroundProcessObject', 'Integer', $this);
 				case 'SearchMetaInfo':
 					return new dxQueryNode('SearchMetaInfo', 'SearchMetaInfo', 'Blob', $this);
-				case 'LastUpdated':
-					return new dxQueryNode('LastUpdated', 'LastUpdated', 'VarChar', $this);
 				case 'ObjectOwner':
 					return new dxQueryNode('ObjectOwner', 'ObjectOwner', 'Integer', $this);
 
@@ -1525,10 +1525,10 @@
      * @property-read dxQueryNode $Id
      * @property-read dxQueryNode $UpdateDateTime
      * @property-read dxQueryNode $UpdateMessage
+     * @property-read dxQueryNode $LastUpdated
      * @property-read dxQueryNode $BackgroundProcess
      * @property-read dxQueryNodeBackgroundProcess $BackgroundProcessObject
      * @property-read dxQueryNode $SearchMetaInfo
-     * @property-read dxQueryNode $LastUpdated
      * @property-read dxQueryNode $ObjectOwner
      *
      *
@@ -1547,14 +1547,14 @@
 					return new dxQueryNode('UpdateDateTime', 'UpdateDateTime', 'dxDateTime', $this);
 				case 'UpdateMessage':
 					return new dxQueryNode('UpdateMessage', 'UpdateMessage', 'string', $this);
+				case 'LastUpdated':
+					return new dxQueryNode('LastUpdated', 'LastUpdated', 'string', $this);
 				case 'BackgroundProcess':
 					return new dxQueryNode('BackgroundProcess', 'BackgroundProcess', 'integer', $this);
 				case 'BackgroundProcessObject':
 					return new dxQueryNodeBackgroundProcess('BackgroundProcess', 'BackgroundProcessObject', 'integer', $this);
 				case 'SearchMetaInfo':
 					return new dxQueryNode('SearchMetaInfo', 'SearchMetaInfo', 'string', $this);
-				case 'LastUpdated':
-					return new dxQueryNode('LastUpdated', 'LastUpdated', 'string', $this);
 				case 'ObjectOwner':
 					return new dxQueryNode('ObjectOwner', 'ObjectOwner', 'integer', $this);
 
Index: divblox/config/database/data_model_orm/generated/AccountGen.class.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?php\n/**\n * The abstract AccountGen class defined here is\n * code-generated and contains all the basic CRUD-type functionality as well as\n * basic methods to handle relationships and index-based loading.\n *\n * To use, you should use the Account subclass which\n * extends this AccountGen class.\n *\n * Because subsequent re-code generations will overwrite any changes to this\n * file, you should leave this file unaltered to prevent yourself from losing\n * any information or code changes.  All customizations should be done by\n * overriding existing or implementing new methods, properties and variables\n * in the Account class.\n *\n * @package divblox_app\n * @subpackage GeneratedDataObjects\n * @property-read integer $Id the value for intId (Read-Only PK)\n * @property string $FullName the value for strFullName \n * @property string $FirstName the value for strFirstName \n * @property string $MiddleNames the value for strMiddleNames \n * @property string $LastName the value for strLastName \n * @property string $EmailAddress the value for strEmailAddress \n * @property string $Username the value for strUsername (Unique)\n * @property string $Password the value for strPassword \n * @property string $MaidenName the value for strMaidenName \n * @property string $ProfilePicturePath the value for strProfilePicturePath \n * @property string $MainContactNumber the value for strMainContactNumber \n * @property string $Title the value for strTitle \n * @property dxDateTime $DateOfBirth the value for dttDateOfBirth \n * @property string $PhysicalAddressLineOne the value for strPhysicalAddressLineOne \n * @property string $PhysicalAddressLineTwo the value for strPhysicalAddressLineTwo \n * @property string $PhysicalAddressPostalCode the value for strPhysicalAddressPostalCode \n * @property string $PhysicalAddressCountry the value for strPhysicalAddressCountry \n * @property string $PostalAddressLineOne the value for strPostalAddressLineOne \n * @property string $PostalAddressLineTwo the value for strPostalAddressLineTwo \n * @property string $PostalAddressPostalCode the value for strPostalAddressPostalCode \n * @property string $PostalAddressCountry the value for strPostalAddressCountry \n * @property string $IdentificationNumber the value for strIdentificationNumber \n * @property string $Nickname the value for strNickname \n * @property string $Status the value for strStatus \n * @property string $Gender the value for strGender \n * @property boolean $AccessBlocked the value for blnAccessBlocked \n * @property string $BlockedReason the value for strBlockedReason \n * @property integer $UserRole the value for intUserRole \n * @property string $SearchMetaInfo the value for strSearchMetaInfo \n * @property-read string $LastUpdated the value for strLastUpdated (Read-Only Timestamp)\n * @property integer $ObjectOwner the value for intObjectOwner \n * @property UserRole $UserRoleObject the value for the UserRole object referenced by intUserRole \n * @property-read AdditionalAccountInformation $_AdditionalAccountInformation the value for the private _objAdditionalAccountInformation (Read-Only) if set due to an expansion on the AdditionalAccountInformation.Account reverse relationship\n * @property-read AdditionalAccountInformation[] $_AdditionalAccountInformationArray the value for the private _objAdditionalAccountInformationArray (Read-Only) if set due to an ExpandAsArray on the AdditionalAccountInformation.Account reverse relationship\n * @property-read ClientConnection $_ClientConnection the value for the private _objClientConnection (Read-Only) if set due to an expansion on the ClientConnection.Account reverse relationship\n * @property-read ClientConnection[] $_ClientConnectionArray the value for the private _objClientConnectionArray (Read-Only) if set due to an ExpandAsArray on the ClientConnection.Account reverse relationship\n * @property-read PasswordReset $_PasswordReset the value for the private _objPasswordReset (Read-Only) if set due to an expansion on the PasswordReset.Account reverse relationship\n * @property-read PasswordReset[] $_PasswordResetArray the value for the private _objPasswordResetArray (Read-Only) if set due to an ExpandAsArray on the PasswordReset.Account reverse relationship\n * @property-read PushRegistration $_PushRegistration the value for the private _objPushRegistration (Read-Only) if set due to an expansion on the PushRegistration.Account reverse relationship\n * @property-read PushRegistration[] $_PushRegistrationArray the value for the private _objPushRegistrationArray (Read-Only) if set due to an ExpandAsArray on the PushRegistration.Account reverse relationship\n * @property-read boolean $__Restored whether or not this object was restored from the database (as opposed to created new)\n */\nclass AccountGen extends dxBaseClass implements IteratorAggregate {\n\n    ///////////////////////////////////////////////////////////////////////\n    // PROTECTED MEMBER VARIABLES and TEXT FIELD MAXLENGTHS (if applicable)\n    ///////////////////////////////////////////////////////////////////////\n\n    /**\n     * Protected member variable that maps to the database PK Identity column Account.Id\n     * @var integer intId\n     */\n    protected $intId;\n    const IdDefault = null;\n\n\n    /**\n     * Protected member variable that maps to the database column Account.FullName\n     * @var string strFullName\n     */\n    protected $strFullName;\n    const FullNameMaxLength = 50;\n    const FullNameDefault = null;\n\n\n    /**\n     * Protected member variable that maps to the database column Account.FirstName\n     * @var string strFirstName\n     */\n    protected $strFirstName;\n    const FirstNameMaxLength = 50;\n    const FirstNameDefault = null;\n\n\n    /**\n     * Protected member variable that maps to the database column Account.MiddleNames\n     * @var string strMiddleNames\n     */\n    protected $strMiddleNames;\n    const MiddleNamesMaxLength = 150;\n    const MiddleNamesDefault = null;\n\n\n    /**\n     * Protected member variable that maps to the database column Account.LastName\n     * @var string strLastName\n     */\n    protected $strLastName;\n    const LastNameMaxLength = 50;\n    const LastNameDefault = null;\n\n\n    /**\n     * Protected member variable that maps to the database column Account.EmailAddress\n     * @var string strEmailAddress\n     */\n    protected $strEmailAddress;\n    const EmailAddressMaxLength = 150;\n    const EmailAddressDefault = null;\n\n\n    /**\n     * Protected member variable that maps to the database column Account.Username\n     * @var string strUsername\n     */\n    protected $strUsername;\n    const UsernameMaxLength = 50;\n    const UsernameDefault = null;\n\n\n    /**\n     * Protected member variable that maps to the database column Account.Password\n     * @var string strPassword\n     */\n    protected $strPassword;\n    const PasswordMaxLength = 250;\n    const PasswordDefault = null;\n\n\n    /**\n     * Protected member variable that maps to the database column Account.MaidenName\n     * @var string strMaidenName\n     */\n    protected $strMaidenName;\n    const MaidenNameMaxLength = 50;\n    const MaidenNameDefault = null;\n\n\n    /**\n     * Protected member variable that maps to the database column Account.ProfilePicturePath\n     * @var string strProfilePicturePath\n     */\n    protected $strProfilePicturePath;\n    const ProfilePicturePathMaxLength = 250;\n    const ProfilePicturePathDefault = null;\n\n\n    /**\n     * Protected member variable that maps to the database column Account.MainContactNumber\n     * @var string strMainContactNumber\n     */\n    protected $strMainContactNumber;\n    const MainContactNumberMaxLength = 25;\n    const MainContactNumberDefault = null;\n\n\n    /**\n     * Protected member variable that maps to the database column Account.Title\n     * @var string strTitle\n     */\n    protected $strTitle;\n    const TitleMaxLength = 25;\n    const TitleDefault = null;\n\n\n    /**\n     * Protected member variable that maps to the database column Account.DateOfBirth\n     * @var dxDateTime dttDateOfBirth\n     */\n    protected $dttDateOfBirth;\n    const DateOfBirthDefault = null;\n\n\n    /**\n     * Protected member variable that maps to the database column Account.PhysicalAddressLineOne\n     * @var string strPhysicalAddressLineOne\n     */\n    protected $strPhysicalAddressLineOne;\n    const PhysicalAddressLineOneMaxLength = 150;\n    const PhysicalAddressLineOneDefault = null;\n\n\n    /**\n     * Protected member variable that maps to the database column Account.PhysicalAddressLineTwo\n     * @var string strPhysicalAddressLineTwo\n     */\n    protected $strPhysicalAddressLineTwo;\n    const PhysicalAddressLineTwoMaxLength = 150;\n    const PhysicalAddressLineTwoDefault = null;\n\n\n    /**\n     * Protected member variable that maps to the database column Account.PhysicalAddressPostalCode\n     * @var string strPhysicalAddressPostalCode\n     */\n    protected $strPhysicalAddressPostalCode;\n    const PhysicalAddressPostalCodeMaxLength = 150;\n    const PhysicalAddressPostalCodeDefault = null;\n\n\n    /**\n     * Protected member variable that maps to the database column Account.PhysicalAddressCountry\n     * @var string strPhysicalAddressCountry\n     */\n    protected $strPhysicalAddressCountry;\n    const PhysicalAddressCountryMaxLength = 150;\n    const PhysicalAddressCountryDefault = null;\n\n\n    /**\n     * Protected member variable that maps to the database column Account.PostalAddressLineOne\n     * @var string strPostalAddressLineOne\n     */\n    protected $strPostalAddressLineOne;\n    const PostalAddressLineOneMaxLength = 150;\n    const PostalAddressLineOneDefault = null;\n\n\n    /**\n     * Protected member variable that maps to the database column Account.PostalAddressLineTwo\n     * @var string strPostalAddressLineTwo\n     */\n    protected $strPostalAddressLineTwo;\n    const PostalAddressLineTwoMaxLength = 150;\n    const PostalAddressLineTwoDefault = null;\n\n\n    /**\n     * Protected member variable that maps to the database column Account.PostalAddressPostalCode\n     * @var string strPostalAddressPostalCode\n     */\n    protected $strPostalAddressPostalCode;\n    const PostalAddressPostalCodeMaxLength = 150;\n    const PostalAddressPostalCodeDefault = null;\n\n\n    /**\n     * Protected member variable that maps to the database column Account.PostalAddressCountry\n     * @var string strPostalAddressCountry\n     */\n    protected $strPostalAddressCountry;\n    const PostalAddressCountryMaxLength = 150;\n    const PostalAddressCountryDefault = null;\n\n\n    /**\n     * Protected member variable that maps to the database column Account.IdentificationNumber\n     * @var string strIdentificationNumber\n     */\n    protected $strIdentificationNumber;\n    const IdentificationNumberMaxLength = 50;\n    const IdentificationNumberDefault = null;\n\n\n    /**\n     * Protected member variable that maps to the database column Account.Nickname\n     * @var string strNickname\n     */\n    protected $strNickname;\n    const NicknameMaxLength = 50;\n    const NicknameDefault = null;\n\n\n    /**\n     * Protected member variable that maps to the database column Account.Status\n     * @var string strStatus\n     */\n    protected $strStatus;\n    const StatusMaxLength = 250;\n    const StatusDefault = null;\n\n\n    /**\n     * Protected member variable that maps to the database column Account.Gender\n     * @var string strGender\n     */\n    protected $strGender;\n    const GenderMaxLength = 25;\n    const GenderDefault = null;\n\n\n    /**\n     * Protected member variable that maps to the database column Account.AccessBlocked\n     * @var boolean blnAccessBlocked\n     */\n    protected $blnAccessBlocked;\n    const AccessBlockedDefault = null;\n\n\n    /**\n     * Protected member variable that maps to the database column Account.BlockedReason\n     * @var string strBlockedReason\n     */\n    protected $strBlockedReason;\n    const BlockedReasonDefault = null;\n\n\n    /**\n     * Protected member variable that maps to the database column Account.UserRole\n     * @var integer intUserRole\n     */\n    protected $intUserRole;\n    const UserRoleDefault = null;\n\n\n    /**\n     * Protected member variable that maps to the database column Account.SearchMetaInfo\n     * @var string strSearchMetaInfo\n     */\n    protected $strSearchMetaInfo;\n    const SearchMetaInfoDefault = null;\n\n\n    /**\n     * Protected member variable that maps to the database column Account.LastUpdated\n     * @var string strLastUpdated\n     */\n    protected $strLastUpdated;\n    const LastUpdatedDefault = null;\n\n\n    /**\n     * Protected member variable that maps to the database column Account.ObjectOwner\n     * @var integer intObjectOwner\n     */\n    protected $intObjectOwner;\n    const ObjectOwnerDefault = null;\n\n\n    /**\n     * Private member variable that stores a reference to a single AdditionalAccountInformation object\n     * (of type AdditionalAccountInformation), if this Account object was restored with\n     * an expansion on the AdditionalAccountInformation association table.\n     * @var AdditionalAccountInformation _objAdditionalAccountInformation;\n     */\n    private $_objAdditionalAccountInformation;\n\n    /**\n     * Private member variable that stores a reference to an array of AdditionalAccountInformation objects\n     * (of type AdditionalAccountInformation[]), if this Account object was restored with\n     * an ExpandAsArray on the AdditionalAccountInformation association table.\n     * @var AdditionalAccountInformation[] _objAdditionalAccountInformationArray;\n     */\n    private $_objAdditionalAccountInformationArray = null;\n\n    /**\n     * Private member variable that stores a reference to a single ClientConnection object\n     * (of type ClientConnection), if this Account object was restored with\n     * an expansion on the ClientConnection association table.\n     * @var ClientConnection _objClientConnection;\n     */\n    private $_objClientConnection;\n\n    /**\n     * Private member variable that stores a reference to an array of ClientConnection objects\n     * (of type ClientConnection[]), if this Account object was restored with\n     * an ExpandAsArray on the ClientConnection association table.\n     * @var ClientConnection[] _objClientConnectionArray;\n     */\n    private $_objClientConnectionArray = null;\n\n    /**\n     * Private member variable that stores a reference to a single PasswordReset object\n     * (of type PasswordReset), if this Account object was restored with\n     * an expansion on the PasswordReset association table.\n     * @var PasswordReset _objPasswordReset;\n     */\n    private $_objPasswordReset;\n\n    /**\n     * Private member variable that stores a reference to an array of PasswordReset objects\n     * (of type PasswordReset[]), if this Account object was restored with\n     * an ExpandAsArray on the PasswordReset association table.\n     * @var PasswordReset[] _objPasswordResetArray;\n     */\n    private $_objPasswordResetArray = null;\n\n    /**\n     * Private member variable that stores a reference to a single PushRegistration object\n     * (of type PushRegistration), if this Account object was restored with\n     * an expansion on the PushRegistration association table.\n     * @var PushRegistration _objPushRegistration;\n     */\n    private $_objPushRegistration;\n\n    /**\n     * Private member variable that stores a reference to an array of PushRegistration objects\n     * (of type PushRegistration[]), if this Account object was restored with\n     * an ExpandAsArray on the PushRegistration association table.\n     * @var PushRegistration[] _objPushRegistrationArray;\n     */\n    private $_objPushRegistrationArray = null;\n\n    /**\n     * Protected array of virtual attributes for this object (e.g. extra/other calculated and/or non-object bound\n     * columns from the run-time database query result for this object).  Used by InstantiateDbRow and\n     * GetVirtualAttribute.\n     * @var string[] $__strVirtualAttributeArray\n     */\n    protected $__strVirtualAttributeArray = array();\n\n    /**\n     * Protected internal member variable that specifies whether or not this object is Restored from the database.\n     * Used by Save() to determine if Save() should perform a db UPDATE or INSERT.\n     * @var bool __blnRestored;\n     */\n    protected $__blnRestored;\n\n    ///////////////////////////////\n    // PROTECTED MEMBER OBJECTS\n    ///////////////////////////////\n\n    /**\n     * Protected member variable that contains the object pointed by the reference\n     * in the database column Account.UserRole.\n     *\n     * NOTE: Always use the UserRoleObject property getter to correctly retrieve this UserRole object.\n     * (Because this class implements late binding, this variable reference MAY be null.)\n     * @var UserRole objUserRoleObject\n     */\n    protected $objUserRoleObject;\n\n\n    /**\n     * Initialize each property with default values from database definition\n     */\n    public function Initialize() {\n        $this->intId = Account::IdDefault;\n        $this->strFullName = Account::FullNameDefault;\n        $this->strFirstName = Account::FirstNameDefault;\n        $this->strMiddleNames = Account::MiddleNamesDefault;\n        $this->strLastName = Account::LastNameDefault;\n        $this->strEmailAddress = Account::EmailAddressDefault;\n        $this->strUsername = Account::UsernameDefault;\n        $this->strPassword = Account::PasswordDefault;\n        $this->strMaidenName = Account::MaidenNameDefault;\n        $this->strProfilePicturePath = Account::ProfilePicturePathDefault;\n        $this->strMainContactNumber = Account::MainContactNumberDefault;\n        $this->strTitle = Account::TitleDefault;\n        $this->dttDateOfBirth = (Account::DateOfBirthDefault === null)?null:new dxDateTime(Account::DateOfBirthDefault);\n        $this->strPhysicalAddressLineOne = Account::PhysicalAddressLineOneDefault;\n        $this->strPhysicalAddressLineTwo = Account::PhysicalAddressLineTwoDefault;\n        $this->strPhysicalAddressPostalCode = Account::PhysicalAddressPostalCodeDefault;\n        $this->strPhysicalAddressCountry = Account::PhysicalAddressCountryDefault;\n        $this->strPostalAddressLineOne = Account::PostalAddressLineOneDefault;\n        $this->strPostalAddressLineTwo = Account::PostalAddressLineTwoDefault;\n        $this->strPostalAddressPostalCode = Account::PostalAddressPostalCodeDefault;\n        $this->strPostalAddressCountry = Account::PostalAddressCountryDefault;\n        $this->strIdentificationNumber = Account::IdentificationNumberDefault;\n        $this->strNickname = Account::NicknameDefault;\n        $this->strStatus = Account::StatusDefault;\n        $this->strGender = Account::GenderDefault;\n        $this->blnAccessBlocked = Account::AccessBlockedDefault;\n        $this->strBlockedReason = Account::BlockedReasonDefault;\n        $this->intUserRole = Account::UserRoleDefault;\n        $this->strSearchMetaInfo = Account::SearchMetaInfoDefault;\n        $this->strLastUpdated = Account::LastUpdatedDefault;\n        $this->intObjectOwner = Account::ObjectOwnerDefault;\n    }\n\n    ///////////////////////////////\n    // CLASS-WIDE LOAD AND COUNT METHODS\n    ///////////////////////////////\n\n    /**\n     * Static method to retrieve the Database object that owns this class.\n     * @return dxDatabaseBase reference to the Database object that can query this class\n     */\n    public static function GetDatabase() {\n        return ProjectFunctions::$Database[1];\n    }\n\n    /**\n     * Load a Account from PK Info\n     * @param integer $intId\n     * @param dxQueryClause[] $objOptionalClauses additional optional dxQueryClause objects for this query\n     * @return Account\n     */\n    public static function Load($intId, $objOptionalClauses = null) {\n        $strCacheKey = false;\n        if (ProjectFunctions::$objCacheProvider && !$objOptionalClauses && ProjectFunctions::$Database[1]->Caching) {\n            $strCacheKey = ProjectFunctions::$objCacheProvider->CreateKey(ProjectFunctions::$Database[1]->Database, 'Account', $intId);\n            $objCachedObject = ProjectFunctions::$objCacheProvider->Get($strCacheKey);\n            if ($objCachedObject !== false) {\n                return $objCachedObject;\n            }\n        }\n        // Use QuerySingle to Perform the Query\n        $objToReturn = Account::QuerySingle(\n            dxQuery::AndCondition(\n                dxQuery::Equal(dxQueryN::Account()->Id, $intId)\n            ),\n            $objOptionalClauses\n        );\n        if ($strCacheKey !== false) {\n            ProjectFunctions::$objCacheProvider->Set($strCacheKey, $objToReturn);\n        }\n        return $objToReturn;\n    }\n\n    /**\n     * Load all Accounts\n     * @param dxQueryClause[] $objOptionalClauses additional optional dxQueryClause objects for this query\n     * @return Account[]\n     */\n    public static function LoadAll($objOptionalClauses = null) {\n        if (func_num_args() > 1) {\n            throw new dxCallerException(\"LoadAll must be called with an array of optional clauses as a single argument\");\n        }\n        // Call Account::QueryArray to perform the LoadAll query\n        try {\n            return Account::QueryArray(dxQuery::All(), $objOptionalClauses);\n        } catch (dxCallerException $objExc) {\n            $objExc->IncrementOffset();\n            throw $objExc;\n        }\n    }\n\n    /**\n     * Count all Accounts\n     * @return int\n     */\n    public static function CountAll() {\n        // Call Account::QueryCount to perform the CountAll query\n        return Account::QueryCount(dxQuery::All());\n    }\n\n    ///////////////////////////////\n    // DIVBLOX QUERY-RELATED METHODS\n    ///////////////////////////////\n\n    /**\n     * Internally called method to assist with calling divblox Query for this class\n     * on load methods.\n     * @param dxQueryBuilder &$objQueryBuilder the QueryBuilder object that will be created\n     * @param dxQueryCondition $objConditions any conditions on the query, itself\n     * @param dxQueryClause[] $objOptionalClausees additional optional dxQueryClause object or array of dxQueryClause objects for this query\n     * @param mixed[] $mixParameterArray a array of name-value pairs to perform PrepareStatement with (sending in null will skip the PrepareStatement step)\n     * @param boolean $blnCountOnly only select a rowcount\n     * @return string the query statement\n     */\n    protected static function BuildQueryStatement(&$objQueryBuilder, dxQueryCondition $objConditions, $objOptionalClauses, $mixParameterArray, $blnCountOnly) {\n        // Get the Database Object for this Class\n        $objDatabase = Account::GetDatabase();\n\n        // Create/Build out the QueryBuilder object with Account-specific SELET and FROM fields\n        $objQueryBuilder = new dxQueryBuilder($objDatabase, 'Account');\n\n        $blnAddAllFieldsToSelect = true;\n        if ($objDatabase->OnlyFullGroupBy) {\n            // see if we have any group by or aggregation clauses, if yes, don't add the fields to select clause\n            if ($objOptionalClauses instanceof dxQueryClause) {\n                if ($objOptionalClauses instanceof dxQueryAggregationClause || $objOptionalClauses instanceof dxQueryGroupBy) {\n                    $blnAddAllFieldsToSelect = false;\n                }\n            } else if (is_array($objOptionalClauses)) {\n                foreach ($objOptionalClauses as $objClause) {\n                    if ($objClause instanceof dxQueryAggregationClause || $objClause instanceof dxQueryGroupBy) {\n                        $blnAddAllFieldsToSelect = false;\n                        break;\n                    }\n                }\n            }\n        }\n        if ($blnAddAllFieldsToSelect) {\n            Account::GetSelectFields($objQueryBuilder, null, dxQuery::extractSelectClause($objOptionalClauses));\n        }\n        $objQueryBuilder->AddFromItem('Account');\n\n        // Set \"CountOnly\" option (if applicable)\n        if ($blnCountOnly)\n            $objQueryBuilder->SetCountOnlyFlag();\n\n        // Apply Any Conditions\n        if ($objConditions)\n            try {\n                $objConditions->UpdateQueryBuilder($objQueryBuilder);\n            } catch (dxCallerException $objExc) {\n                $objExc->IncrementOffset();\n                throw $objExc;\n            }\n\n        // Iterate through all the Optional Clauses (if any) and perform accordingly\n        if ($objOptionalClauses) {\n            if ($objOptionalClauses instanceof dxQueryClause)\n                $objOptionalClauses->UpdateQueryBuilder($objQueryBuilder);\n            else if (is_array($objOptionalClauses))\n                foreach ($objOptionalClauses as $objClause)\n                    $objClause->UpdateQueryBuilder($objQueryBuilder);\n            else\n                throw new dxCallerException('Optional Clauses must be a dxQueryClause object or an array of dxQueryClause objects');\n        }\n\n        // Get the SQL Statement\n        $strQuery = $objQueryBuilder->GetStatement();\n\n        // Prepare the Statement with the Query Parameters (if applicable)\n        if ($mixParameterArray) {\n            if (is_array($mixParameterArray)) {\n                if (ProjectFunctions::getDataSetSize($mixParameterArray))\n                    $strQuery = $objDatabase->PrepareStatement($strQuery, $mixParameterArray);\n\n                // Ensure that there are no other Unresolved Named Parameters\n                if (strpos($strQuery, chr(dxQueryNamedValue::DelimiterCode) . '{') !== false)\n                    throw new dxCallerException('Unresolved named parameters in the query');\n            } else\n                throw new dxCallerException('Parameter Array must be an array of name-value parameter pairs');\n        }\n\n        // Return the Objects\n        return $strQuery;\n    }\n\n    /**\n     * Static divblox Query method to query for a single Account object.\n     * Uses BuildQueryStatment to perform most of the work.\n     * @param dxQueryCondition $objConditions any conditions on the query, itself\n     * @param dxQueryClause[] $objOptionalClausees additional optional dxQueryClause objects for this query\n     * @param mixed[] $mixParameterArray a array of name-value pairs to perform PrepareStatement with\n     * @return Account the queried object\n     */\n    public static function QuerySingle(dxQueryCondition $objConditions, $objOptionalClauses = null, $mixParameterArray = null) {\n        // Get the Query Statement\n        try {\n            $strQuery = Account::BuildQueryStatement($objQueryBuilder, $objConditions, $objOptionalClauses, $mixParameterArray, false);\n        } catch (dxCallerException $objExc) {\n            $objExc->IncrementOffset();\n            throw $objExc;\n        }\n\n        // Perform the Query, Get the First Row, and Instantiate a new Account object\n        $objDbResult = $objQueryBuilder->Database->Query($strQuery);\n\n        // Do we have to expand anything?\n        if ($objQueryBuilder->ExpandAsArrayNode) {\n            $objToReturn = array();\n            $objPrevItemArray = array();\n            while ($objDbRow = $objDbResult->GetNextRow()) {\n                $objItem = Account::InstantiateDbRow($objDbRow, null, $objQueryBuilder->ExpandAsArrayNode, $objPrevItemArray, $objQueryBuilder->ColumnAliasArray);\n                if ($objItem) {\n                    $objToReturn[] = $objItem;\n                    $objPrevItemArray[$objItem->intId][] = $objItem;\n                }\n            }\n            if (ProjectFunctions::getDataSetSize($objToReturn)) {\n                // Since we only want the object to return, lets return the object and not the array.\n                return $objToReturn[0];\n            } else {\n                return null;\n            }\n        } else {\n            // No expands just return the first row\n            $objDbRow = $objDbResult->GetNextRow();\n            if(null === $objDbRow)\n                return null;\n            return Account::InstantiateDbRow($objDbRow, null, null, null, $objQueryBuilder->ColumnAliasArray);\n        }\n    }\n\n    /**\n     * Static divblox Query method to query for an array of Account objects.\n     * Uses BuildQueryStatment to perform most of the work.\n     * @param dxQueryCondition $objConditions any conditions on the query, itself\n     * @param dxQueryClause[] $objOptionalClausees additional optional dxQueryClause objects for this query\n     * @param mixed[] $mixParameterArray a array of name-value pairs to perform PrepareStatement with\n     * @return Account[] the queried objects as an array\n     */\n    public static function QueryArray(dxQueryCondition $objConditions, $objOptionalClauses = null, $mixParameterArray = null) {\n        // Get the Query Statement\n        try {\n            $strQuery = Account::BuildQueryStatement($objQueryBuilder, $objConditions, $objOptionalClauses, $mixParameterArray, false);\n        } catch (dxCallerException $objExc) {\n            $objExc->IncrementOffset();\n            throw $objExc;\n        }\n\n        // Perform the Query and Instantiate the Array Result\n        $objDbResult = $objQueryBuilder->Database->Query($strQuery);\n        return Account::InstantiateDbResult($objDbResult, $objQueryBuilder->ExpandAsArrayNode, $objQueryBuilder->ColumnAliasArray);\n    }\n\n    /**\n     * Static divblox query method to issue a query and get a cursor to progressively fetch its results.\n     * Uses BuildQueryStatment to perform most of the work.\n     * @param dxQueryCondition $objConditions any conditions on the query, itself\n     * @param dxQueryClause[] $objOptionalClauses additional optional dxQueryClause objects for this query\n     * @param mixed[] $mixParameterArray a array of name-value pairs to perform PrepareStatement with\n     * @return dxDatabaseResultBase the cursor resource instance\n     */\n    public static function QueryCursor(dxQueryCondition $objConditions, $objOptionalClauses = null, $mixParameterArray = null) {\n        // Get the query statement\n        try {\n            $strQuery = Account::BuildQueryStatement($objQueryBuilder, $objConditions, $objOptionalClauses, $mixParameterArray, false);\n        } catch (dxCallerException $objExc) {\n            $objExc->IncrementOffset();\n            throw $objExc;\n        }\n\n        // Perform the query\n        $objDbResult = $objQueryBuilder->Database->Query($strQuery);\n\n        // Return the results cursor\n        $objDbResult->QueryBuilder = $objQueryBuilder;\n        return $objDbResult;\n    }\n\n    /**\n     * Static divblox Query method to query for a count of Account objects.\n     * Uses BuildQueryStatment to perform most of the work.\n     * @param dxQueryCondition $objConditions any conditions on the query, itself\n     * @param dxQueryClause[] $objOptionalClausees additional optional dxQueryClause objects for this query\n     * @param mixed[] $mixParameterArray a array of name-value pairs to perform PrepareStatement with\n     * @return integer the count of queried objects as an integer\n     */\n    public static function QueryCount(dxQueryCondition $objConditions, $objOptionalClauses = null, $mixParameterArray = null) {\n        // Get the Query Statement\n        try {\n            $strQuery = Account::BuildQueryStatement($objQueryBuilder, $objConditions, $objOptionalClauses, $mixParameterArray, true);\n        } catch (dxCallerException $objExc) {\n            $objExc->IncrementOffset();\n            throw $objExc;\n        }\n\n        // Perform the Query and return the row_count\n        $objDbResult = $objQueryBuilder->Database->Query($strQuery);\n\n        // Figure out if the query is using GroupBy\n        $blnGrouped = false;\n\n        if ($objOptionalClauses) {\n            if ($objOptionalClauses instanceof dxQueryClause) {\n                if ($objOptionalClauses instanceof dxQueryGroupBy) {\n                    $blnGrouped = true;\n                }\n            } else if (is_array($objOptionalClauses)) {\n                foreach ($objOptionalClauses as $objClause) {\n                    if ($objClause instanceof dxQueryGroupBy) {\n                        $blnGrouped = true;\n                        break;\n                    }\n                }\n            } else {\n                throw new dxCallerException('Optional Clauses must be a dxQueryClause object or an array of dxQueryClause objects');\n            }\n        }\n\n        if ($blnGrouped)\n            // Groups in this query - return the count of Groups (which is the count of all rows)\n            return $objDbResult->CountRows();\n        else {\n            // No Groups - return the sql-calculated count(*) value\n            $strDbRow = $objDbResult->FetchRow();\n            return dxType::Cast($strDbRow[0], dxType::Integer);\n        }\n    }\n\n    public static function QueryArrayCached(dxQueryCondition $objConditions, $objOptionalClauses = null, $mixParameterArray = null, $blnForceUpdate = false) {\n        // Get the Database Object for this Class\n        $objDatabase = Account::GetDatabase();\n\n        $strQuery = Account::BuildQueryStatement($objQueryBuilder, $objConditions, $objOptionalClauses, $mixParameterArray, false);\n\n        $objCache = new dxCache('dxquery/account', $strQuery);\n        $cacheData = $objCache->GetData();\n\n        if (!$cacheData || $blnForceUpdate) {\n            $objDbResult = $objQueryBuilder->Database->Query($strQuery);\n            $arrResult = Account::InstantiateDbResult($objDbResult, $objQueryBuilder->ExpandAsArrayNode, $objQueryBuilder->ColumnAliasArray);\n            $objCache->SaveData(serialize($arrResult));\n        } else {\n            $arrResult = unserialize($cacheData);\n        }\n\n        return $arrResult;\n    }\n\n    /**\n     * Updates a dxQueryBuilder with the SELECT fields for this Account\n     * @param dxQueryBuilder $objBuilder the Query Builder object to update\n     * @param string $strPrefix optional prefix to add to the SELECT fields\n     */\n    public static function GetSelectFields(dxQueryBuilder $objBuilder, $strPrefix = null, dxQuerySelect $objSelect = null) {\n        if ($strPrefix) {\n            $strTableName = $strPrefix;\n            $strAliasPrefix = $strPrefix . '__';\n        } else {\n            $strTableName = 'Account';\n            $strAliasPrefix = '';\n        }\n\n        if ($objSelect) {\n            $objBuilder->AddSelectItem($strTableName, 'Id', $strAliasPrefix . 'Id');\n            $objSelect->AddSelectItems($objBuilder, $strTableName, $strAliasPrefix);\n        } else {\n            $objBuilder->AddSelectItem($strTableName, 'Id', $strAliasPrefix . 'Id');\n            $objBuilder->AddSelectItem($strTableName, 'FullName', $strAliasPrefix . 'FullName');\n            $objBuilder->AddSelectItem($strTableName, 'FirstName', $strAliasPrefix . 'FirstName');\n            $objBuilder->AddSelectItem($strTableName, 'MiddleNames', $strAliasPrefix . 'MiddleNames');\n            $objBuilder->AddSelectItem($strTableName, 'LastName', $strAliasPrefix . 'LastName');\n            $objBuilder->AddSelectItem($strTableName, 'EmailAddress', $strAliasPrefix . 'EmailAddress');\n            $objBuilder->AddSelectItem($strTableName, 'Username', $strAliasPrefix . 'Username');\n            $objBuilder->AddSelectItem($strTableName, 'Password', $strAliasPrefix . 'Password');\n            $objBuilder->AddSelectItem($strTableName, 'MaidenName', $strAliasPrefix . 'MaidenName');\n            $objBuilder->AddSelectItem($strTableName, 'ProfilePicturePath', $strAliasPrefix . 'ProfilePicturePath');\n            $objBuilder->AddSelectItem($strTableName, 'MainContactNumber', $strAliasPrefix . 'MainContactNumber');\n            $objBuilder->AddSelectItem($strTableName, 'Title', $strAliasPrefix . 'Title');\n            $objBuilder->AddSelectItem($strTableName, 'DateOfBirth', $strAliasPrefix . 'DateOfBirth');\n            $objBuilder->AddSelectItem($strTableName, 'PhysicalAddressLineOne', $strAliasPrefix . 'PhysicalAddressLineOne');\n            $objBuilder->AddSelectItem($strTableName, 'PhysicalAddressLineTwo', $strAliasPrefix . 'PhysicalAddressLineTwo');\n            $objBuilder->AddSelectItem($strTableName, 'PhysicalAddressPostalCode', $strAliasPrefix . 'PhysicalAddressPostalCode');\n            $objBuilder->AddSelectItem($strTableName, 'PhysicalAddressCountry', $strAliasPrefix . 'PhysicalAddressCountry');\n            $objBuilder->AddSelectItem($strTableName, 'PostalAddressLineOne', $strAliasPrefix . 'PostalAddressLineOne');\n            $objBuilder->AddSelectItem($strTableName, 'PostalAddressLineTwo', $strAliasPrefix . 'PostalAddressLineTwo');\n            $objBuilder->AddSelectItem($strTableName, 'PostalAddressPostalCode', $strAliasPrefix . 'PostalAddressPostalCode');\n            $objBuilder->AddSelectItem($strTableName, 'PostalAddressCountry', $strAliasPrefix . 'PostalAddressCountry');\n            $objBuilder->AddSelectItem($strTableName, 'IdentificationNumber', $strAliasPrefix . 'IdentificationNumber');\n            $objBuilder->AddSelectItem($strTableName, 'Nickname', $strAliasPrefix . 'Nickname');\n            $objBuilder->AddSelectItem($strTableName, 'Status', $strAliasPrefix . 'Status');\n            $objBuilder->AddSelectItem($strTableName, 'Gender', $strAliasPrefix . 'Gender');\n            $objBuilder->AddSelectItem($strTableName, 'AccessBlocked', $strAliasPrefix . 'AccessBlocked');\n            $objBuilder->AddSelectItem($strTableName, 'BlockedReason', $strAliasPrefix . 'BlockedReason');\n            $objBuilder->AddSelectItem($strTableName, 'UserRole', $strAliasPrefix . 'UserRole');\n            $objBuilder->AddSelectItem($strTableName, 'SearchMetaInfo', $strAliasPrefix . 'SearchMetaInfo');\n            $objBuilder->AddSelectItem($strTableName, 'LastUpdated', $strAliasPrefix . 'LastUpdated');\n            $objBuilder->AddSelectItem($strTableName, 'ObjectOwner', $strAliasPrefix . 'ObjectOwner');\n        }\n    }\n    ///////////////////////////////\n    // INSTANTIATION-RELATED METHODS\n    ///////////////////////////////\n\n    /**\n     * Do a possible array expansion on the given node. If the node is an ExpandAsArray node,\n     * it will add to the corresponding array in the object. Otherwise, it will follow the node\n     * so that any leaf expansions can be handled.\n     *\n     * @param DatabaseRowBase $objDbRow\n     * @param dxQueryBaseNode $objChildNode\n     * @param dxBaseClass $objPreviousItem\n     * @param string[] $strColumnAliasArray\n     */\n\n    public static function ExpandArray ($objDbRow, $strAliasPrefix, $objNode, $objPreviousItemArray, $strColumnAliasArray) {\n        if (!$objNode->ChildNodeArray) {\n            return false;\n        }\n\n        $strAlias = $strAliasPrefix . 'Id';\n        $strColumnAlias = !empty($strColumnAliasArray[$strAlias]) ? $strColumnAliasArray[$strAlias] : $strAlias;\n        $blnExpanded = false;\n\n        foreach ($objPreviousItemArray as $objPreviousItem) {\n            if ($objPreviousItem->intId != $objDbRow->GetColumn($strColumnAlias, 'Integer')) {\n                continue;\n            }\n\n            foreach ($objNode->ChildNodeArray as $objChildNode) {\n                $strPropName = $objChildNode->_PropertyName;\n                $strClassName = $objChildNode->_ClassName;\n                $blnExpanded = false;\n                $strLongAlias = $objChildNode->ExtendedAlias();\n\n                if ($objChildNode->ExpandAsArray) {\n                    $strVarName = '_obj' . $strPropName . 'Array';\n                    if (null === $objPreviousItem->$strVarName) {\n                        $objPreviousItem->$strVarName = array();\n                    }\n                    if ($intPreviousChildItemCount = ProjectFunctions::getDataSetSize($objPreviousItem->$strVarName)) {\n                        $objPreviousChildItems = $objPreviousItem->$strVarName;\n                        if ($objChildNode->_Type == \"association\") {\n                            $objChildNode = $objChildNode->FirstChild();\n                        }\n                        $nextAlias = $objChildNode->ExtendedAlias() . '__';\n\n                        $objChildItem = call_user_func(array ($strClassName, 'InstantiateDbRow'), $objDbRow, $nextAlias, $objChildNode, $objPreviousChildItems, $strColumnAliasArray);\n                        if ($objChildItem) {\n                            $objPreviousItem->{$strVarName}[] = $objChildItem;\n                            $blnExpanded = true;\n                        } elseif ($objChildItem === false) {\n                            $blnExpanded = true;\n                        }\n                    }\n                } else {\n\n                    // Follow single node if keys match\n                    $nodeType = $objChildNode->_Type;\n                    if ($nodeType == 'reverse_reference' || $nodeType == 'association') {\n                        $strVarName = '_obj' . $strPropName;\n                    } else {\n                        $strVarName = 'obj' . $strPropName;\n                    }\n\n                    if (null === $objPreviousItem->$strVarName) {\n                        return false;\n                    }\n\n                    $objPreviousChildItems = array($objPreviousItem->$strVarName);\n                    $blnResult = call_user_func(array ($strClassName, 'ExpandArray'), $objDbRow, $strLongAlias . '__', $objChildNode, $objPreviousChildItems, $strColumnAliasArray);\n\n                    if ($blnResult) {\n                        $blnExpanded = true;\n                    }\n                }\n            }\n        }\n        return $blnExpanded;\n    }\n\n    /**\n     * Instantiate a Account from a Database Row.\n     * Takes in an optional strAliasPrefix, used in case another Object::InstantiateDbRow\n     * is calling this Account::InstantiateDbRow in order to perform\n     * early binding on referenced objects.\n     * @param DatabaseRowBase $objDbRow\n     * @param string $strAliasPrefix\n     * @param dxQueryBaseNode $objExpandAsArrayNode\n     * @param dxBaseClass $arrPreviousItem\n     * @param string[] $strColumnAliasArray\n     * @return mixed Either a Account, or false to indicate the dbrow was used in an expansion, or null to indicate that this leaf is a duplicate.\n    */\n    public static function InstantiateDbRow($objDbRow, $strAliasPrefix = null, $objExpandAsArrayNode = null, $objPreviousItemArray = null, $strColumnAliasArray = array()) {\n        // If blank row, return null\n        if (!$objDbRow) {\n            return null;\n        }\n\n        if (empty ($strAliasPrefix) && $objPreviousItemArray) {\n            $strColumnAlias = !empty($strColumnAliasArray['Id']) ? $strColumnAliasArray['Id'] : 'Id';\n            $key = $objDbRow->GetColumn($strColumnAlias, 'Integer');\n            $objPreviousItemArray = (!empty ($objPreviousItemArray[$key]) ? $objPreviousItemArray[$key] : null);\n        }\n\n        // See if we're doing an array expansion on the previous item\n        if ($objExpandAsArrayNode &&\n                is_array($objPreviousItemArray) &&\n                ProjectFunctions::getDataSetSize($objPreviousItemArray)) {\n\n            if (Account::ExpandArray ($objDbRow, $strAliasPrefix, $objExpandAsArrayNode, $objPreviousItemArray, $strColumnAliasArray)) {\n                return false; // db row was used but no new object was created\n            }\n        }\n\n        // Create a new instance of the Account object\n        $objToReturn = new Account();\n        $objToReturn->__blnRestored = true;\n\n        $strAlias = $strAliasPrefix . 'Id';\n        $strAliasName = !empty($strColumnAliasArray[$strAlias]) ? $strColumnAliasArray[$strAlias] : $strAlias;\n        $objToReturn->intId = $objDbRow->GetColumn($strAliasName, 'Integer');\n        $strAlias = $strAliasPrefix . 'FullName';\n        $strAliasName = !empty($strColumnAliasArray[$strAlias]) ? $strColumnAliasArray[$strAlias] : $strAlias;\n        $objToReturn->strFullName = $objDbRow->GetColumn($strAliasName, 'VarChar');\n        $strAlias = $strAliasPrefix . 'FirstName';\n        $strAliasName = !empty($strColumnAliasArray[$strAlias]) ? $strColumnAliasArray[$strAlias] : $strAlias;\n        $objToReturn->strFirstName = $objDbRow->GetColumn($strAliasName, 'VarChar');\n        $strAlias = $strAliasPrefix . 'MiddleNames';\n        $strAliasName = !empty($strColumnAliasArray[$strAlias]) ? $strColumnAliasArray[$strAlias] : $strAlias;\n        $objToReturn->strMiddleNames = $objDbRow->GetColumn($strAliasName, 'VarChar');\n        $strAlias = $strAliasPrefix . 'LastName';\n        $strAliasName = !empty($strColumnAliasArray[$strAlias]) ? $strColumnAliasArray[$strAlias] : $strAlias;\n        $objToReturn->strLastName = $objDbRow->GetColumn($strAliasName, 'VarChar');\n        $strAlias = $strAliasPrefix . 'EmailAddress';\n        $strAliasName = !empty($strColumnAliasArray[$strAlias]) ? $strColumnAliasArray[$strAlias] : $strAlias;\n        $objToReturn->strEmailAddress = $objDbRow->GetColumn($strAliasName, 'VarChar');\n        $strAlias = $strAliasPrefix . 'Username';\n        $strAliasName = !empty($strColumnAliasArray[$strAlias]) ? $strColumnAliasArray[$strAlias] : $strAlias;\n        $objToReturn->strUsername = $objDbRow->GetColumn($strAliasName, 'VarChar');\n        $strAlias = $strAliasPrefix . 'Password';\n        $strAliasName = !empty($strColumnAliasArray[$strAlias]) ? $strColumnAliasArray[$strAlias] : $strAlias;\n        $objToReturn->strPassword = $objDbRow->GetColumn($strAliasName, 'VarChar');\n        $strAlias = $strAliasPrefix . 'MaidenName';\n        $strAliasName = !empty($strColumnAliasArray[$strAlias]) ? $strColumnAliasArray[$strAlias] : $strAlias;\n        $objToReturn->strMaidenName = $objDbRow->GetColumn($strAliasName, 'VarChar');\n        $strAlias = $strAliasPrefix . 'ProfilePicturePath';\n        $strAliasName = !empty($strColumnAliasArray[$strAlias]) ? $strColumnAliasArray[$strAlias] : $strAlias;\n        $objToReturn->strProfilePicturePath = $objDbRow->GetColumn($strAliasName, 'VarChar');\n        $strAlias = $strAliasPrefix . 'MainContactNumber';\n        $strAliasName = !empty($strColumnAliasArray[$strAlias]) ? $strColumnAliasArray[$strAlias] : $strAlias;\n        $objToReturn->strMainContactNumber = $objDbRow->GetColumn($strAliasName, 'VarChar');\n        $strAlias = $strAliasPrefix . 'Title';\n        $strAliasName = !empty($strColumnAliasArray[$strAlias]) ? $strColumnAliasArray[$strAlias] : $strAlias;\n        $objToReturn->strTitle = $objDbRow->GetColumn($strAliasName, 'VarChar');\n        $strAlias = $strAliasPrefix . 'DateOfBirth';\n        $strAliasName = !empty($strColumnAliasArray[$strAlias]) ? $strColumnAliasArray[$strAlias] : $strAlias;\n        $objToReturn->dttDateOfBirth = $objDbRow->GetColumn($strAliasName, 'Date');\n        $strAlias = $strAliasPrefix . 'PhysicalAddressLineOne';\n        $strAliasName = !empty($strColumnAliasArray[$strAlias]) ? $strColumnAliasArray[$strAlias] : $strAlias;\n        $objToReturn->strPhysicalAddressLineOne = $objDbRow->GetColumn($strAliasName, 'VarChar');\n        $strAlias = $strAliasPrefix . 'PhysicalAddressLineTwo';\n        $strAliasName = !empty($strColumnAliasArray[$strAlias]) ? $strColumnAliasArray[$strAlias] : $strAlias;\n        $objToReturn->strPhysicalAddressLineTwo = $objDbRow->GetColumn($strAliasName, 'VarChar');\n        $strAlias = $strAliasPrefix . 'PhysicalAddressPostalCode';\n        $strAliasName = !empty($strColumnAliasArray[$strAlias]) ? $strColumnAliasArray[$strAlias] : $strAlias;\n        $objToReturn->strPhysicalAddressPostalCode = $objDbRow->GetColumn($strAliasName, 'VarChar');\n        $strAlias = $strAliasPrefix . 'PhysicalAddressCountry';\n        $strAliasName = !empty($strColumnAliasArray[$strAlias]) ? $strColumnAliasArray[$strAlias] : $strAlias;\n        $objToReturn->strPhysicalAddressCountry = $objDbRow->GetColumn($strAliasName, 'VarChar');\n        $strAlias = $strAliasPrefix . 'PostalAddressLineOne';\n        $strAliasName = !empty($strColumnAliasArray[$strAlias]) ? $strColumnAliasArray[$strAlias] : $strAlias;\n        $objToReturn->strPostalAddressLineOne = $objDbRow->GetColumn($strAliasName, 'VarChar');\n        $strAlias = $strAliasPrefix . 'PostalAddressLineTwo';\n        $strAliasName = !empty($strColumnAliasArray[$strAlias]) ? $strColumnAliasArray[$strAlias] : $strAlias;\n        $objToReturn->strPostalAddressLineTwo = $objDbRow->GetColumn($strAliasName, 'VarChar');\n        $strAlias = $strAliasPrefix . 'PostalAddressPostalCode';\n        $strAliasName = !empty($strColumnAliasArray[$strAlias]) ? $strColumnAliasArray[$strAlias] : $strAlias;\n        $objToReturn->strPostalAddressPostalCode = $objDbRow->GetColumn($strAliasName, 'VarChar');\n        $strAlias = $strAliasPrefix . 'PostalAddressCountry';\n        $strAliasName = !empty($strColumnAliasArray[$strAlias]) ? $strColumnAliasArray[$strAlias] : $strAlias;\n        $objToReturn->strPostalAddressCountry = $objDbRow->GetColumn($strAliasName, 'VarChar');\n        $strAlias = $strAliasPrefix . 'IdentificationNumber';\n        $strAliasName = !empty($strColumnAliasArray[$strAlias]) ? $strColumnAliasArray[$strAlias] : $strAlias;\n        $objToReturn->strIdentificationNumber = $objDbRow->GetColumn($strAliasName, 'VarChar');\n        $strAlias = $strAliasPrefix . 'Nickname';\n        $strAliasName = !empty($strColumnAliasArray[$strAlias]) ? $strColumnAliasArray[$strAlias] : $strAlias;\n        $objToReturn->strNickname = $objDbRow->GetColumn($strAliasName, 'VarChar');\n        $strAlias = $strAliasPrefix . 'Status';\n        $strAliasName = !empty($strColumnAliasArray[$strAlias]) ? $strColumnAliasArray[$strAlias] : $strAlias;\n        $objToReturn->strStatus = $objDbRow->GetColumn($strAliasName, 'VarChar');\n        $strAlias = $strAliasPrefix . 'Gender';\n        $strAliasName = !empty($strColumnAliasArray[$strAlias]) ? $strColumnAliasArray[$strAlias] : $strAlias;\n        $objToReturn->strGender = $objDbRow->GetColumn($strAliasName, 'VarChar');\n        $strAlias = $strAliasPrefix . 'AccessBlocked';\n        $strAliasName = !empty($strColumnAliasArray[$strAlias]) ? $strColumnAliasArray[$strAlias] : $strAlias;\n        $objToReturn->blnAccessBlocked = $objDbRow->GetColumn($strAliasName, 'Bit');\n        $strAlias = $strAliasPrefix . 'BlockedReason';\n        $strAliasName = !empty($strColumnAliasArray[$strAlias]) ? $strColumnAliasArray[$strAlias] : $strAlias;\n        $objToReturn->strBlockedReason = $objDbRow->GetColumn($strAliasName, 'Blob');\n        $strAlias = $strAliasPrefix . 'UserRole';\n        $strAliasName = !empty($strColumnAliasArray[$strAlias]) ? $strColumnAliasArray[$strAlias] : $strAlias;\n        $objToReturn->intUserRole = $objDbRow->GetColumn($strAliasName, 'Integer');\n        $strAlias = $strAliasPrefix . 'SearchMetaInfo';\n        $strAliasName = !empty($strColumnAliasArray[$strAlias]) ? $strColumnAliasArray[$strAlias] : $strAlias;\n        $objToReturn->strSearchMetaInfo = $objDbRow->GetColumn($strAliasName, 'Blob');\n        $strAlias = $strAliasPrefix . 'LastUpdated';\n        $strAliasName = !empty($strColumnAliasArray[$strAlias]) ? $strColumnAliasArray[$strAlias] : $strAlias;\n        $objToReturn->strLastUpdated = $objDbRow->GetColumn($strAliasName, 'VarChar');\n        $strAlias = $strAliasPrefix . 'ObjectOwner';\n        $strAliasName = !empty($strColumnAliasArray[$strAlias]) ? $strColumnAliasArray[$strAlias] : $strAlias;\n        $objToReturn->intObjectOwner = $objDbRow->GetColumn($strAliasName, 'Integer');\n\n        if (isset($objPreviousItemArray) && is_array($objPreviousItemArray)) {\n            foreach ($objPreviousItemArray as $objPreviousItem) {\n                if ($objToReturn->Id != $objPreviousItem->Id) {\n                    continue;\n                }\n                // this is a duplicate leaf in a complex join\n                return null; // indicates no object created and the db row has not been used\n            }\n        }\n\n        // Instantiate Virtual Attributes\n        $strVirtualPrefix = $strAliasPrefix . '__';\n        $strVirtualPrefixLength = strlen($strVirtualPrefix);\n        foreach ($objDbRow->GetColumnNameArray() as $strColumnName => $mixValue) {\n            if (strncmp($strColumnName, $strVirtualPrefix, $strVirtualPrefixLength) == 0)\n                $objToReturn->__strVirtualAttributeArray[substr($strColumnName, $strVirtualPrefixLength)] = $mixValue;\n        }\n\n\n        // Prepare to Check for Early/Virtual Binding\n\n        $objExpansionAliasArray = array();\n        if ($objExpandAsArrayNode) {\n            $objExpansionAliasArray = $objExpandAsArrayNode->ChildNodeArray;\n        }\n\n        if (!$strAliasPrefix)\n            $strAliasPrefix = 'Account__';\n\n        // Check for UserRoleObject Early Binding\n        $strAlias = $strAliasPrefix . 'UserRole__Id';\n        $strAliasName = !empty($strColumnAliasArray[$strAlias]) ? $strColumnAliasArray[$strAlias] : $strAlias;\n        if (!is_null($objDbRow->GetColumn($strAliasName))) {\n            $objExpansionNode = (empty($objExpansionAliasArray['UserRole']) ? null : $objExpansionAliasArray['UserRole']);\n            $objToReturn->objUserRoleObject = UserRole::InstantiateDbRow($objDbRow, $strAliasPrefix . 'UserRole__', $objExpansionNode, null, $strColumnAliasArray);\n        }\n\n\n\n        // Check for AdditionalAccountInformation Virtual Binding\n        $strAlias = $strAliasPrefix . 'additionalaccountinformation__Id';\n        $strAliasName = !empty($strColumnAliasArray[$strAlias]) ? $strColumnAliasArray[$strAlias] : $strAlias;\n        $objExpansionNode = (empty($objExpansionAliasArray['additionalaccountinformation']) ? null : $objExpansionAliasArray['additionalaccountinformation']);\n        $blnExpanded = ($objExpansionNode && $objExpansionNode->ExpandAsArray);\n        if ($blnExpanded && null === $objToReturn->_objAdditionalAccountInformationArray)\n            $objToReturn->_objAdditionalAccountInformationArray = array();\n        if (!is_null($objDbRow->GetColumn($strAliasName))) {\n            if ($blnExpanded) {\n                $objToReturn->_objAdditionalAccountInformationArray[] = AdditionalAccountInformation::InstantiateDbRow($objDbRow, $strAliasPrefix . 'additionalaccountinformation__', $objExpansionNode, null, $strColumnAliasArray);\n            } elseif (is_null($objToReturn->_objAdditionalAccountInformation)) {\n                $objToReturn->_objAdditionalAccountInformation = AdditionalAccountInformation::InstantiateDbRow($objDbRow, $strAliasPrefix . 'additionalaccountinformation__', $objExpansionNode, null, $strColumnAliasArray);\n            }\n        }\n\n        // Check for ClientConnection Virtual Binding\n        $strAlias = $strAliasPrefix . 'clientconnection__Id';\n        $strAliasName = !empty($strColumnAliasArray[$strAlias]) ? $strColumnAliasArray[$strAlias] : $strAlias;\n        $objExpansionNode = (empty($objExpansionAliasArray['clientconnection']) ? null : $objExpansionAliasArray['clientconnection']);\n        $blnExpanded = ($objExpansionNode && $objExpansionNode->ExpandAsArray);\n        if ($blnExpanded && null === $objToReturn->_objClientConnectionArray)\n            $objToReturn->_objClientConnectionArray = array();\n        if (!is_null($objDbRow->GetColumn($strAliasName))) {\n            if ($blnExpanded) {\n                $objToReturn->_objClientConnectionArray[] = ClientConnection::InstantiateDbRow($objDbRow, $strAliasPrefix . 'clientconnection__', $objExpansionNode, null, $strColumnAliasArray);\n            } elseif (is_null($objToReturn->_objClientConnection)) {\n                $objToReturn->_objClientConnection = ClientConnection::InstantiateDbRow($objDbRow, $strAliasPrefix . 'clientconnection__', $objExpansionNode, null, $strColumnAliasArray);\n            }\n        }\n\n        // Check for PasswordReset Virtual Binding\n        $strAlias = $strAliasPrefix . 'passwordreset__Id';\n        $strAliasName = !empty($strColumnAliasArray[$strAlias]) ? $strColumnAliasArray[$strAlias] : $strAlias;\n        $objExpansionNode = (empty($objExpansionAliasArray['passwordreset']) ? null : $objExpansionAliasArray['passwordreset']);\n        $blnExpanded = ($objExpansionNode && $objExpansionNode->ExpandAsArray);\n        if ($blnExpanded && null === $objToReturn->_objPasswordResetArray)\n            $objToReturn->_objPasswordResetArray = array();\n        if (!is_null($objDbRow->GetColumn($strAliasName))) {\n            if ($blnExpanded) {\n                $objToReturn->_objPasswordResetArray[] = PasswordReset::InstantiateDbRow($objDbRow, $strAliasPrefix . 'passwordreset__', $objExpansionNode, null, $strColumnAliasArray);\n            } elseif (is_null($objToReturn->_objPasswordReset)) {\n                $objToReturn->_objPasswordReset = PasswordReset::InstantiateDbRow($objDbRow, $strAliasPrefix . 'passwordreset__', $objExpansionNode, null, $strColumnAliasArray);\n            }\n        }\n\n        // Check for PushRegistration Virtual Binding\n        $strAlias = $strAliasPrefix . 'pushregistration__Id';\n        $strAliasName = !empty($strColumnAliasArray[$strAlias]) ? $strColumnAliasArray[$strAlias] : $strAlias;\n        $objExpansionNode = (empty($objExpansionAliasArray['pushregistration']) ? null : $objExpansionAliasArray['pushregistration']);\n        $blnExpanded = ($objExpansionNode && $objExpansionNode->ExpandAsArray);\n        if ($blnExpanded && null === $objToReturn->_objPushRegistrationArray)\n            $objToReturn->_objPushRegistrationArray = array();\n        if (!is_null($objDbRow->GetColumn($strAliasName))) {\n            if ($blnExpanded) {\n                $objToReturn->_objPushRegistrationArray[] = PushRegistration::InstantiateDbRow($objDbRow, $strAliasPrefix . 'pushregistration__', $objExpansionNode, null, $strColumnAliasArray);\n            } elseif (is_null($objToReturn->_objPushRegistration)) {\n                $objToReturn->_objPushRegistration = PushRegistration::InstantiateDbRow($objDbRow, $strAliasPrefix . 'pushregistration__', $objExpansionNode, null, $strColumnAliasArray);\n            }\n        }\n\n        return $objToReturn;\n    }\n\n    /**\n     * Instantiate an array of Accounts from a Database Result\n     * @param DatabaseResultBase $objDbResult\n     * @param dxQueryBaseNode $objExpandAsArrayNode\n     * @param string[] $strColumnAliasArray\n     * @return Account[]\n     */\n    public static function InstantiateDbResult(dxDatabaseResultBase $objDbResult, $objExpandAsArrayNode = null, $strColumnAliasArray = null) {\n        $objToReturn = array();\n\n        if (!$strColumnAliasArray)\n            $strColumnAliasArray = array();\n\n        // If blank resultset, then return empty array\n        if (!$objDbResult)\n            return $objToReturn;\n\n        // Load up the return array with each row\n        if ($objExpandAsArrayNode) {\n            $objToReturn = array();\n            $objPrevItemArray = array();\n            while ($objDbRow = $objDbResult->GetNextRow()) {\n                $objItem = Account::InstantiateDbRow($objDbRow, null, $objExpandAsArrayNode, $objPrevItemArray, $strColumnAliasArray);\n                if ($objItem) {\n                    $objToReturn[] = $objItem;\n                    $objPrevItemArray[$objItem->intId][] = $objItem;\n                }\n            }\n        } else {\n            while ($objDbRow = $objDbResult->GetNextRow())\n                $objToReturn[] = Account::InstantiateDbRow($objDbRow, null, null, null, $strColumnAliasArray);\n        }\n\n        return $objToReturn;\n    }\n\n\n    /**\n     * Instantiate a single Account object from a query cursor (e.g. a DB ResultSet).\n     * Cursor is automatically moved to the \"next row\" of the result set.\n     * Will return NULL if no cursor or if the cursor has no more rows in the resultset.\n     * @param dxDatabaseResultBase $objDbResult cursor resource\n     * @return Account next row resulting from the query\n     */\n    public static function InstantiateCursor(dxDatabaseResultBase $objDbResult) {\n        // If blank resultset, then return empty result\n        if (!$objDbResult) return null;\n\n        // If empty resultset, then return empty result\n        $objDbRow = $objDbResult->GetNextRow();\n        if (!$objDbRow) return null;\n\n        // We need the Column Aliases\n        $strColumnAliasArray = $objDbResult->QueryBuilder->ColumnAliasArray;\n        if (!$strColumnAliasArray) $strColumnAliasArray = array();\n\n        // Pull Expansions\n        $objExpandAsArrayNode = $objDbResult->QueryBuilder->ExpandAsArrayNode;\n        if (!empty ($objExpandAsArrayNode)) {\n            throw new dxCallerException (\"Cannot use InstantiateCursor with ExpandAsArray\");\n        }\n\n        // Load up the return result with a row and return it\n        return Account::InstantiateDbRow($objDbRow, null, null, null, $strColumnAliasArray);\n    }\n\n    ///////////////////////////////////////////////////\n    // INDEX-BASED LOAD METHODS (Single Load and Array)\n    ///////////////////////////////////////////////////\n\n    /**\n     * Load a single Account object,\n     * by Id Index(es)\n     * @param integer $intId\n     * @param dxQueryClause[] $objOptionalClauses additional optional dxQueryClause objects for this query\n     * @return Account\n    */\n    public static function LoadById($intId, $objOptionalClauses = null) {\n        return Account::QuerySingle(\n            dxQuery::AndCondition(\n                dxQuery::Equal(dxQueryN::Account()->Id, $intId)\n            ),\n            $objOptionalClauses\n        );\n    }\n\n    /**\n     * Load a single Account object,\n     * by Username Index(es)\n     * @param string $strUsername\n     * @param dxQueryClause[] $objOptionalClauses additional optional dxQueryClause objects for this query\n     * @return Account\n    */\n    public static function LoadByUsername($strUsername, $objOptionalClauses = null) {\n        return Account::QuerySingle(\n            dxQuery::AndCondition(\n                dxQuery::Equal(dxQueryN::Account()->Username, $strUsername)\n            ),\n            $objOptionalClauses\n        );\n    }\n\n    /**\n     * Load an array of Account objects,\n     * by UserRole Index(es)\n     * @param integer $intUserRole\n     * @param dxQueryClause[] $objOptionalClauses additional optional dxQueryClause objects for this query\n     * @return Account[]\n    */\n    public static function LoadArrayByUserRole($intUserRole, $objOptionalClauses = null) {\n        // Call Account::QueryArray to perform the LoadArrayByUserRole query\n        try {\n            return Account::QueryArray(\n                dxQuery::Equal(dxQueryN::Account()->UserRole, $intUserRole),\n                $objOptionalClauses);\n        } catch (dxCallerException $objExc) {\n            $objExc->IncrementOffset();\n            throw $objExc;\n        }\n    }\n\n    /**\n     * Count Accounts\n     * by UserRole Index(es)\n     * @param integer $intUserRole\n     * @return int\n    */\n    public static function CountByUserRole($intUserRole) {\n        // Call Account::QueryCount to perform the CountByUserRole query\n        return Account::QueryCount(\n            dxQuery::Equal(dxQueryN::Account()->UserRole, $intUserRole)\n        );\n    }\n    ////////////////////////////////////////////////////\n    // INDEX-BASED LOAD METHODS (Array via Many to Many)\n    ////////////////////////////////////////////////////\n\n\n    //////////////////////////\n    // SAVE, DELETE AND RELOAD\n    //////////////////////////\n\n    /**\n    * Save this Account\n    * @param bool $blnForceInsert\n    * @param bool $blnForceUpdate\n    * @return int\n    */\n    public function Save($blnForceInsert = false, $blnForceUpdate = false) {\n        $ObjectAccessArray = ProjectAccessManager::getObjectAccess(ProjectFunctions::getCurrentAccountId(),\"Account\",$this->intId);\n        // Get the Database Object for this Class\n        $objDatabase = Account::GetDatabase();\n        $mixToReturn = null;\n        if (!is_numeric($this->intObjectOwner)) {\n            $this->intObjectOwner = ProjectFunctions::getCurrentAccountId();\n        }\n        $ExistingObj = Account::Load($this->intId);\n        $newAuditLogEntry = new AuditLogEntry();\n        $ChangedArray = array();\n        $newAuditLogEntry->EntryTimeStamp = dxDateTime::Now();\n        $newAuditLogEntry->ObjectId = $this->intId;\n        $newAuditLogEntry->ObjectName = 'Account';\n        $newAuditLogEntry->UserEmail = ProjectFunctions::getCurrentUserEmailForAudit();\n        if (!$ExistingObj) {\n            $newAuditLogEntry->ModificationType = 'Create';\n            $ChangedArray = array_merge($ChangedArray,array(\"Id\" => $this->intId));\n            $ChangedArray = array_merge($ChangedArray,array(\"FullName\" => $this->strFullName));\n            $ChangedArray = array_merge($ChangedArray,array(\"FirstName\" => $this->strFirstName));\n            $ChangedArray = array_merge($ChangedArray,array(\"MiddleNames\" => $this->strMiddleNames));\n            $ChangedArray = array_merge($ChangedArray,array(\"LastName\" => $this->strLastName));\n            $ChangedArray = array_merge($ChangedArray,array(\"EmailAddress\" => $this->strEmailAddress));\n            $ChangedArray = array_merge($ChangedArray,array(\"Username\" => $this->strUsername));\n            $ChangedArray = array_merge($ChangedArray,array(\"Password\" => $this->strPassword));\n            $ChangedArray = array_merge($ChangedArray,array(\"MaidenName\" => $this->strMaidenName));\n            $ChangedArray = array_merge($ChangedArray,array(\"ProfilePicturePath\" => $this->strProfilePicturePath));\n            $ChangedArray = array_merge($ChangedArray,array(\"MainContactNumber\" => $this->strMainContactNumber));\n            $ChangedArray = array_merge($ChangedArray,array(\"Title\" => $this->strTitle));\n            $ChangedArray = array_merge($ChangedArray,array(\"DateOfBirth\" => $this->dttDateOfBirth));\n            $ChangedArray = array_merge($ChangedArray,array(\"PhysicalAddressLineOne\" => $this->strPhysicalAddressLineOne));\n            $ChangedArray = array_merge($ChangedArray,array(\"PhysicalAddressLineTwo\" => $this->strPhysicalAddressLineTwo));\n            $ChangedArray = array_merge($ChangedArray,array(\"PhysicalAddressPostalCode\" => $this->strPhysicalAddressPostalCode));\n            $ChangedArray = array_merge($ChangedArray,array(\"PhysicalAddressCountry\" => $this->strPhysicalAddressCountry));\n            $ChangedArray = array_merge($ChangedArray,array(\"PostalAddressLineOne\" => $this->strPostalAddressLineOne));\n            $ChangedArray = array_merge($ChangedArray,array(\"PostalAddressLineTwo\" => $this->strPostalAddressLineTwo));\n            $ChangedArray = array_merge($ChangedArray,array(\"PostalAddressPostalCode\" => $this->strPostalAddressPostalCode));\n            $ChangedArray = array_merge($ChangedArray,array(\"PostalAddressCountry\" => $this->strPostalAddressCountry));\n            $ChangedArray = array_merge($ChangedArray,array(\"IdentificationNumber\" => $this->strIdentificationNumber));\n            $ChangedArray = array_merge($ChangedArray,array(\"Nickname\" => $this->strNickname));\n            $ChangedArray = array_merge($ChangedArray,array(\"Status\" => $this->strStatus));\n            $ChangedArray = array_merge($ChangedArray,array(\"Gender\" => $this->strGender));\n            $ChangedArray = array_merge($ChangedArray,array(\"AccessBlocked\" => $this->blnAccessBlocked));\n            $ChangedArray = array_merge($ChangedArray,array(\"BlockedReason\" => $this->strBlockedReason));\n            $ChangedArray = array_merge($ChangedArray,array(\"UserRole\" => $this->intUserRole));\n            $ChangedArray = array_merge($ChangedArray,array(\"SearchMetaInfo\" => $this->strSearchMetaInfo));\n            $ChangedArray = array_merge($ChangedArray,array(\"LastUpdated\" => $this->strLastUpdated));\n            $ChangedArray = array_merge($ChangedArray,array(\"ObjectOwner\" => $this->intObjectOwner));\n            $newAuditLogEntry->AuditLogEntryDetail = json_encode($ChangedArray);\n        } else {\n            $newAuditLogEntry->ModificationType = 'Update';\n            $ExistingValueStr = \"NULL\";\n            if (!is_null($ExistingObj->Id)) {\n                $ExistingValueStr = $ExistingObj->Id;\n            }\n            if ($ExistingObj->Id != $this->intId) {\n                $ChangedArray = array_merge($ChangedArray,array(\"Id\" => array(\"Before\" => $ExistingValueStr,\"After\" => $this->intId)));\n                //$ChangedArray = array_merge($ChangedArray,array(\"Id\" => \"From: \".$ExistingValueStr.\" to: \".$this->intId));\n            }\n            $ExistingValueStr = \"NULL\";\n            if (!is_null($ExistingObj->FullName)) {\n                $ExistingValueStr = $ExistingObj->FullName;\n            }\n            if ($ExistingObj->FullName != $this->strFullName) {\n                $ChangedArray = array_merge($ChangedArray,array(\"FullName\" => array(\"Before\" => $ExistingValueStr,\"After\" => $this->strFullName)));\n                //$ChangedArray = array_merge($ChangedArray,array(\"FullName\" => \"From: \".$ExistingValueStr.\" to: \".$this->strFullName));\n            }\n            $ExistingValueStr = \"NULL\";\n            if (!is_null($ExistingObj->FirstName)) {\n                $ExistingValueStr = $ExistingObj->FirstName;\n            }\n            if ($ExistingObj->FirstName != $this->strFirstName) {\n                $ChangedArray = array_merge($ChangedArray,array(\"FirstName\" => array(\"Before\" => $ExistingValueStr,\"After\" => $this->strFirstName)));\n                //$ChangedArray = array_merge($ChangedArray,array(\"FirstName\" => \"From: \".$ExistingValueStr.\" to: \".$this->strFirstName));\n            }\n            $ExistingValueStr = \"NULL\";\n            if (!is_null($ExistingObj->MiddleNames)) {\n                $ExistingValueStr = $ExistingObj->MiddleNames;\n            }\n            if ($ExistingObj->MiddleNames != $this->strMiddleNames) {\n                $ChangedArray = array_merge($ChangedArray,array(\"MiddleNames\" => array(\"Before\" => $ExistingValueStr,\"After\" => $this->strMiddleNames)));\n                //$ChangedArray = array_merge($ChangedArray,array(\"MiddleNames\" => \"From: \".$ExistingValueStr.\" to: \".$this->strMiddleNames));\n            }\n            $ExistingValueStr = \"NULL\";\n            if (!is_null($ExistingObj->LastName)) {\n                $ExistingValueStr = $ExistingObj->LastName;\n            }\n            if ($ExistingObj->LastName != $this->strLastName) {\n                $ChangedArray = array_merge($ChangedArray,array(\"LastName\" => array(\"Before\" => $ExistingValueStr,\"After\" => $this->strLastName)));\n                //$ChangedArray = array_merge($ChangedArray,array(\"LastName\" => \"From: \".$ExistingValueStr.\" to: \".$this->strLastName));\n            }\n            $ExistingValueStr = \"NULL\";\n            if (!is_null($ExistingObj->EmailAddress)) {\n                $ExistingValueStr = $ExistingObj->EmailAddress;\n            }\n            if ($ExistingObj->EmailAddress != $this->strEmailAddress) {\n                $ChangedArray = array_merge($ChangedArray,array(\"EmailAddress\" => array(\"Before\" => $ExistingValueStr,\"After\" => $this->strEmailAddress)));\n                //$ChangedArray = array_merge($ChangedArray,array(\"EmailAddress\" => \"From: \".$ExistingValueStr.\" to: \".$this->strEmailAddress));\n            }\n            $ExistingValueStr = \"NULL\";\n            if (!is_null($ExistingObj->Username)) {\n                $ExistingValueStr = $ExistingObj->Username;\n            }\n            if ($ExistingObj->Username != $this->strUsername) {\n                $ChangedArray = array_merge($ChangedArray,array(\"Username\" => array(\"Before\" => $ExistingValueStr,\"After\" => $this->strUsername)));\n                //$ChangedArray = array_merge($ChangedArray,array(\"Username\" => \"From: \".$ExistingValueStr.\" to: \".$this->strUsername));\n            }\n            $ExistingValueStr = \"NULL\";\n            if (!is_null($ExistingObj->Password)) {\n                $ExistingValueStr = $ExistingObj->Password;\n            }\n            if ($ExistingObj->Password != $this->strPassword) {\n                $ChangedArray = array_merge($ChangedArray,array(\"Password\" => array(\"Before\" => $ExistingValueStr,\"After\" => $this->strPassword)));\n                //$ChangedArray = array_merge($ChangedArray,array(\"Password\" => \"From: \".$ExistingValueStr.\" to: \".$this->strPassword));\n            }\n            $ExistingValueStr = \"NULL\";\n            if (!is_null($ExistingObj->MaidenName)) {\n                $ExistingValueStr = $ExistingObj->MaidenName;\n            }\n            if ($ExistingObj->MaidenName != $this->strMaidenName) {\n                $ChangedArray = array_merge($ChangedArray,array(\"MaidenName\" => array(\"Before\" => $ExistingValueStr,\"After\" => $this->strMaidenName)));\n                //$ChangedArray = array_merge($ChangedArray,array(\"MaidenName\" => \"From: \".$ExistingValueStr.\" to: \".$this->strMaidenName));\n            }\n            $ExistingValueStr = \"NULL\";\n            if (!is_null($ExistingObj->ProfilePicturePath)) {\n                $ExistingValueStr = $ExistingObj->ProfilePicturePath;\n            }\n            if ($ExistingObj->ProfilePicturePath != $this->strProfilePicturePath) {\n                $ChangedArray = array_merge($ChangedArray,array(\"ProfilePicturePath\" => array(\"Before\" => $ExistingValueStr,\"After\" => $this->strProfilePicturePath)));\n                //$ChangedArray = array_merge($ChangedArray,array(\"ProfilePicturePath\" => \"From: \".$ExistingValueStr.\" to: \".$this->strProfilePicturePath));\n            }\n            $ExistingValueStr = \"NULL\";\n            if (!is_null($ExistingObj->MainContactNumber)) {\n                $ExistingValueStr = $ExistingObj->MainContactNumber;\n            }\n            if ($ExistingObj->MainContactNumber != $this->strMainContactNumber) {\n                $ChangedArray = array_merge($ChangedArray,array(\"MainContactNumber\" => array(\"Before\" => $ExistingValueStr,\"After\" => $this->strMainContactNumber)));\n                //$ChangedArray = array_merge($ChangedArray,array(\"MainContactNumber\" => \"From: \".$ExistingValueStr.\" to: \".$this->strMainContactNumber));\n            }\n            $ExistingValueStr = \"NULL\";\n            if (!is_null($ExistingObj->Title)) {\n                $ExistingValueStr = $ExistingObj->Title;\n            }\n            if ($ExistingObj->Title != $this->strTitle) {\n                $ChangedArray = array_merge($ChangedArray,array(\"Title\" => array(\"Before\" => $ExistingValueStr,\"After\" => $this->strTitle)));\n                //$ChangedArray = array_merge($ChangedArray,array(\"Title\" => \"From: \".$ExistingValueStr.\" to: \".$this->strTitle));\n            }\n            $ExistingValueStr = \"NULL\";\n            if (!is_null($ExistingObj->DateOfBirth)) {\n                $ExistingValueStr = $ExistingObj->DateOfBirth;\n            }\n            if ($ExistingObj->DateOfBirth != $this->dttDateOfBirth) {\n                $ChangedArray = array_merge($ChangedArray,array(\"DateOfBirth\" => array(\"Before\" => $ExistingValueStr,\"After\" => $this->dttDateOfBirth)));\n                //$ChangedArray = array_merge($ChangedArray,array(\"DateOfBirth\" => \"From: \".$ExistingValueStr.\" to: \".$this->dttDateOfBirth));\n            }\n            $ExistingValueStr = \"NULL\";\n            if (!is_null($ExistingObj->PhysicalAddressLineOne)) {\n                $ExistingValueStr = $ExistingObj->PhysicalAddressLineOne;\n            }\n            if ($ExistingObj->PhysicalAddressLineOne != $this->strPhysicalAddressLineOne) {\n                $ChangedArray = array_merge($ChangedArray,array(\"PhysicalAddressLineOne\" => array(\"Before\" => $ExistingValueStr,\"After\" => $this->strPhysicalAddressLineOne)));\n                //$ChangedArray = array_merge($ChangedArray,array(\"PhysicalAddressLineOne\" => \"From: \".$ExistingValueStr.\" to: \".$this->strPhysicalAddressLineOne));\n            }\n            $ExistingValueStr = \"NULL\";\n            if (!is_null($ExistingObj->PhysicalAddressLineTwo)) {\n                $ExistingValueStr = $ExistingObj->PhysicalAddressLineTwo;\n            }\n            if ($ExistingObj->PhysicalAddressLineTwo != $this->strPhysicalAddressLineTwo) {\n                $ChangedArray = array_merge($ChangedArray,array(\"PhysicalAddressLineTwo\" => array(\"Before\" => $ExistingValueStr,\"After\" => $this->strPhysicalAddressLineTwo)));\n                //$ChangedArray = array_merge($ChangedArray,array(\"PhysicalAddressLineTwo\" => \"From: \".$ExistingValueStr.\" to: \".$this->strPhysicalAddressLineTwo));\n            }\n            $ExistingValueStr = \"NULL\";\n            if (!is_null($ExistingObj->PhysicalAddressPostalCode)) {\n                $ExistingValueStr = $ExistingObj->PhysicalAddressPostalCode;\n            }\n            if ($ExistingObj->PhysicalAddressPostalCode != $this->strPhysicalAddressPostalCode) {\n                $ChangedArray = array_merge($ChangedArray,array(\"PhysicalAddressPostalCode\" => array(\"Before\" => $ExistingValueStr,\"After\" => $this->strPhysicalAddressPostalCode)));\n                //$ChangedArray = array_merge($ChangedArray,array(\"PhysicalAddressPostalCode\" => \"From: \".$ExistingValueStr.\" to: \".$this->strPhysicalAddressPostalCode));\n            }\n            $ExistingValueStr = \"NULL\";\n            if (!is_null($ExistingObj->PhysicalAddressCountry)) {\n                $ExistingValueStr = $ExistingObj->PhysicalAddressCountry;\n            }\n            if ($ExistingObj->PhysicalAddressCountry != $this->strPhysicalAddressCountry) {\n                $ChangedArray = array_merge($ChangedArray,array(\"PhysicalAddressCountry\" => array(\"Before\" => $ExistingValueStr,\"After\" => $this->strPhysicalAddressCountry)));\n                //$ChangedArray = array_merge($ChangedArray,array(\"PhysicalAddressCountry\" => \"From: \".$ExistingValueStr.\" to: \".$this->strPhysicalAddressCountry));\n            }\n            $ExistingValueStr = \"NULL\";\n            if (!is_null($ExistingObj->PostalAddressLineOne)) {\n                $ExistingValueStr = $ExistingObj->PostalAddressLineOne;\n            }\n            if ($ExistingObj->PostalAddressLineOne != $this->strPostalAddressLineOne) {\n                $ChangedArray = array_merge($ChangedArray,array(\"PostalAddressLineOne\" => array(\"Before\" => $ExistingValueStr,\"After\" => $this->strPostalAddressLineOne)));\n                //$ChangedArray = array_merge($ChangedArray,array(\"PostalAddressLineOne\" => \"From: \".$ExistingValueStr.\" to: \".$this->strPostalAddressLineOne));\n            }\n            $ExistingValueStr = \"NULL\";\n            if (!is_null($ExistingObj->PostalAddressLineTwo)) {\n                $ExistingValueStr = $ExistingObj->PostalAddressLineTwo;\n            }\n            if ($ExistingObj->PostalAddressLineTwo != $this->strPostalAddressLineTwo) {\n                $ChangedArray = array_merge($ChangedArray,array(\"PostalAddressLineTwo\" => array(\"Before\" => $ExistingValueStr,\"After\" => $this->strPostalAddressLineTwo)));\n                //$ChangedArray = array_merge($ChangedArray,array(\"PostalAddressLineTwo\" => \"From: \".$ExistingValueStr.\" to: \".$this->strPostalAddressLineTwo));\n            }\n            $ExistingValueStr = \"NULL\";\n            if (!is_null($ExistingObj->PostalAddressPostalCode)) {\n                $ExistingValueStr = $ExistingObj->PostalAddressPostalCode;\n            }\n            if ($ExistingObj->PostalAddressPostalCode != $this->strPostalAddressPostalCode) {\n                $ChangedArray = array_merge($ChangedArray,array(\"PostalAddressPostalCode\" => array(\"Before\" => $ExistingValueStr,\"After\" => $this->strPostalAddressPostalCode)));\n                //$ChangedArray = array_merge($ChangedArray,array(\"PostalAddressPostalCode\" => \"From: \".$ExistingValueStr.\" to: \".$this->strPostalAddressPostalCode));\n            }\n            $ExistingValueStr = \"NULL\";\n            if (!is_null($ExistingObj->PostalAddressCountry)) {\n                $ExistingValueStr = $ExistingObj->PostalAddressCountry;\n            }\n            if ($ExistingObj->PostalAddressCountry != $this->strPostalAddressCountry) {\n                $ChangedArray = array_merge($ChangedArray,array(\"PostalAddressCountry\" => array(\"Before\" => $ExistingValueStr,\"After\" => $this->strPostalAddressCountry)));\n                //$ChangedArray = array_merge($ChangedArray,array(\"PostalAddressCountry\" => \"From: \".$ExistingValueStr.\" to: \".$this->strPostalAddressCountry));\n            }\n            $ExistingValueStr = \"NULL\";\n            if (!is_null($ExistingObj->IdentificationNumber)) {\n                $ExistingValueStr = $ExistingObj->IdentificationNumber;\n            }\n            if ($ExistingObj->IdentificationNumber != $this->strIdentificationNumber) {\n                $ChangedArray = array_merge($ChangedArray,array(\"IdentificationNumber\" => array(\"Before\" => $ExistingValueStr,\"After\" => $this->strIdentificationNumber)));\n                //$ChangedArray = array_merge($ChangedArray,array(\"IdentificationNumber\" => \"From: \".$ExistingValueStr.\" to: \".$this->strIdentificationNumber));\n            }\n            $ExistingValueStr = \"NULL\";\n            if (!is_null($ExistingObj->Nickname)) {\n                $ExistingValueStr = $ExistingObj->Nickname;\n            }\n            if ($ExistingObj->Nickname != $this->strNickname) {\n                $ChangedArray = array_merge($ChangedArray,array(\"Nickname\" => array(\"Before\" => $ExistingValueStr,\"After\" => $this->strNickname)));\n                //$ChangedArray = array_merge($ChangedArray,array(\"Nickname\" => \"From: \".$ExistingValueStr.\" to: \".$this->strNickname));\n            }\n            $ExistingValueStr = \"NULL\";\n            if (!is_null($ExistingObj->Status)) {\n                $ExistingValueStr = $ExistingObj->Status;\n            }\n            if ($ExistingObj->Status != $this->strStatus) {\n                $ChangedArray = array_merge($ChangedArray,array(\"Status\" => array(\"Before\" => $ExistingValueStr,\"After\" => $this->strStatus)));\n                //$ChangedArray = array_merge($ChangedArray,array(\"Status\" => \"From: \".$ExistingValueStr.\" to: \".$this->strStatus));\n            }\n            $ExistingValueStr = \"NULL\";\n            if (!is_null($ExistingObj->Gender)) {\n                $ExistingValueStr = $ExistingObj->Gender;\n            }\n            if ($ExistingObj->Gender != $this->strGender) {\n                $ChangedArray = array_merge($ChangedArray,array(\"Gender\" => array(\"Before\" => $ExistingValueStr,\"After\" => $this->strGender)));\n                //$ChangedArray = array_merge($ChangedArray,array(\"Gender\" => \"From: \".$ExistingValueStr.\" to: \".$this->strGender));\n            }\n            $ExistingValueStr = \"NULL\";\n            if (!is_null($ExistingObj->AccessBlocked)) {\n                $ExistingValueStr = $ExistingObj->AccessBlocked;\n            }\n            if ($ExistingObj->AccessBlocked != $this->blnAccessBlocked) {\n                $ChangedArray = array_merge($ChangedArray,array(\"AccessBlocked\" => array(\"Before\" => $ExistingValueStr,\"After\" => $this->blnAccessBlocked)));\n                //$ChangedArray = array_merge($ChangedArray,array(\"AccessBlocked\" => \"From: \".$ExistingValueStr.\" to: \".$this->blnAccessBlocked));\n            }\n            $ExistingValueStr = \"NULL\";\n            if (!is_null($ExistingObj->BlockedReason)) {\n                $ExistingValueStr = $ExistingObj->BlockedReason;\n            }\n            if ($ExistingObj->BlockedReason != $this->strBlockedReason) {\n                $ChangedArray = array_merge($ChangedArray,array(\"BlockedReason\" => array(\"Before\" => $ExistingValueStr,\"After\" => $this->strBlockedReason)));\n                //$ChangedArray = array_merge($ChangedArray,array(\"BlockedReason\" => \"From: \".$ExistingValueStr.\" to: \".$this->strBlockedReason));\n            }\n            $ExistingValueStr = \"NULL\";\n            if (!is_null($ExistingObj->UserRole)) {\n                $ExistingValueStr = $ExistingObj->UserRole;\n            }\n            if ($ExistingObj->UserRole != $this->intUserRole) {\n                $ChangedArray = array_merge($ChangedArray,array(\"UserRole\" => array(\"Before\" => $ExistingValueStr,\"After\" => $this->intUserRole)));\n                //$ChangedArray = array_merge($ChangedArray,array(\"UserRole\" => \"From: \".$ExistingValueStr.\" to: \".$this->intUserRole));\n            }\n            $ExistingValueStr = \"NULL\";\n            if (!is_null($ExistingObj->SearchMetaInfo)) {\n                $ExistingValueStr = $ExistingObj->SearchMetaInfo;\n            }\n            if ($ExistingObj->SearchMetaInfo != $this->strSearchMetaInfo) {\n                $ChangedArray = array_merge($ChangedArray,array(\"SearchMetaInfo\" => array(\"Before\" => $ExistingValueStr,\"After\" => $this->strSearchMetaInfo)));\n                //$ChangedArray = array_merge($ChangedArray,array(\"SearchMetaInfo\" => \"From: \".$ExistingValueStr.\" to: \".$this->strSearchMetaInfo));\n            }\n            $ExistingValueStr = \"NULL\";\n            if (!is_null($ExistingObj->LastUpdated)) {\n                $ExistingValueStr = $ExistingObj->LastUpdated;\n            }\n            if ($ExistingObj->LastUpdated != $this->strLastUpdated) {\n                $ChangedArray = array_merge($ChangedArray,array(\"LastUpdated\" => array(\"Before\" => $ExistingValueStr,\"After\" => $this->strLastUpdated)));\n                //$ChangedArray = array_merge($ChangedArray,array(\"LastUpdated\" => \"From: \".$ExistingValueStr.\" to: \".$this->strLastUpdated));\n            }\n            $ExistingValueStr = \"NULL\";\n            if (!is_null($ExistingObj->ObjectOwner)) {\n                $ExistingValueStr = $ExistingObj->ObjectOwner;\n            }\n            if ($ExistingObj->ObjectOwner != $this->intObjectOwner) {\n                $ChangedArray = array_merge($ChangedArray,array(\"ObjectOwner\" => array(\"Before\" => $ExistingValueStr,\"After\" => $this->intObjectOwner)));\n                //$ChangedArray = array_merge($ChangedArray,array(\"ObjectOwner\" => \"From: \".$ExistingValueStr.\" to: \".$this->intObjectOwner));\n            }\n            $newAuditLogEntry->AuditLogEntryDetail = json_encode($ChangedArray);\n        }\n        try {\n            if ((!$this->__blnRestored) || ($blnForceInsert)) {\n                if (!in_array(AccessOperation::CREATE_STR,$ObjectAccessArray)) {\n                    // This user is not allowed to create an object of this type\n                    throw new Exception(\"User is not allowed to perform operation \".AccessOperation::CREATE_STR.\" on entity of type 'Account'. Allowed access is \".json_encode($ObjectAccessArray));\n                }\n                // Perform an INSERT query\n                $objDatabase->NonQuery('\n                INSERT INTO `Account` (\n\t\t\t\t\t\t\t`FullName`,\n\t\t\t\t\t\t\t`FirstName`,\n\t\t\t\t\t\t\t`MiddleNames`,\n\t\t\t\t\t\t\t`LastName`,\n\t\t\t\t\t\t\t`EmailAddress`,\n\t\t\t\t\t\t\t`Username`,\n\t\t\t\t\t\t\t`Password`,\n\t\t\t\t\t\t\t`MaidenName`,\n\t\t\t\t\t\t\t`ProfilePicturePath`,\n\t\t\t\t\t\t\t`MainContactNumber`,\n\t\t\t\t\t\t\t`Title`,\n\t\t\t\t\t\t\t`DateOfBirth`,\n\t\t\t\t\t\t\t`PhysicalAddressLineOne`,\n\t\t\t\t\t\t\t`PhysicalAddressLineTwo`,\n\t\t\t\t\t\t\t`PhysicalAddressPostalCode`,\n\t\t\t\t\t\t\t`PhysicalAddressCountry`,\n\t\t\t\t\t\t\t`PostalAddressLineOne`,\n\t\t\t\t\t\t\t`PostalAddressLineTwo`,\n\t\t\t\t\t\t\t`PostalAddressPostalCode`,\n\t\t\t\t\t\t\t`PostalAddressCountry`,\n\t\t\t\t\t\t\t`IdentificationNumber`,\n\t\t\t\t\t\t\t`Nickname`,\n\t\t\t\t\t\t\t`Status`,\n\t\t\t\t\t\t\t`Gender`,\n\t\t\t\t\t\t\t`AccessBlocked`,\n\t\t\t\t\t\t\t`BlockedReason`,\n\t\t\t\t\t\t\t`UserRole`,\n\t\t\t\t\t\t\t`SearchMetaInfo`,\n\t\t\t\t\t\t\t`ObjectOwner`\n\t\t\t\t\t\t) VALUES (\n\t\t\t\t\t\t\t' . $objDatabase->SqlVariable($this->strFullName) . ',\n\t\t\t\t\t\t\t' . $objDatabase->SqlVariable($this->strFirstName) . ',\n\t\t\t\t\t\t\t' . $objDatabase->SqlVariable($this->strMiddleNames) . ',\n\t\t\t\t\t\t\t' . $objDatabase->SqlVariable($this->strLastName) . ',\n\t\t\t\t\t\t\t' . $objDatabase->SqlVariable($this->strEmailAddress) . ',\n\t\t\t\t\t\t\t' . $objDatabase->SqlVariable($this->strUsername) . ',\n\t\t\t\t\t\t\t' . $objDatabase->SqlVariable($this->strPassword) . ',\n\t\t\t\t\t\t\t' . $objDatabase->SqlVariable($this->strMaidenName) . ',\n\t\t\t\t\t\t\t' . $objDatabase->SqlVariable($this->strProfilePicturePath) . ',\n\t\t\t\t\t\t\t' . $objDatabase->SqlVariable($this->strMainContactNumber) . ',\n\t\t\t\t\t\t\t' . $objDatabase->SqlVariable($this->strTitle) . ',\n\t\t\t\t\t\t\t' . $objDatabase->SqlVariable($this->dttDateOfBirth) . ',\n\t\t\t\t\t\t\t' . $objDatabase->SqlVariable($this->strPhysicalAddressLineOne) . ',\n\t\t\t\t\t\t\t' . $objDatabase->SqlVariable($this->strPhysicalAddressLineTwo) . ',\n\t\t\t\t\t\t\t' . $objDatabase->SqlVariable($this->strPhysicalAddressPostalCode) . ',\n\t\t\t\t\t\t\t' . $objDatabase->SqlVariable($this->strPhysicalAddressCountry) . ',\n\t\t\t\t\t\t\t' . $objDatabase->SqlVariable($this->strPostalAddressLineOne) . ',\n\t\t\t\t\t\t\t' . $objDatabase->SqlVariable($this->strPostalAddressLineTwo) . ',\n\t\t\t\t\t\t\t' . $objDatabase->SqlVariable($this->strPostalAddressPostalCode) . ',\n\t\t\t\t\t\t\t' . $objDatabase->SqlVariable($this->strPostalAddressCountry) . ',\n\t\t\t\t\t\t\t' . $objDatabase->SqlVariable($this->strIdentificationNumber) . ',\n\t\t\t\t\t\t\t' . $objDatabase->SqlVariable($this->strNickname) . ',\n\t\t\t\t\t\t\t' . $objDatabase->SqlVariable($this->strStatus) . ',\n\t\t\t\t\t\t\t' . $objDatabase->SqlVariable($this->strGender) . ',\n\t\t\t\t\t\t\t' . $objDatabase->SqlVariable($this->blnAccessBlocked) . ',\n\t\t\t\t\t\t\t' . $objDatabase->SqlVariable($this->strBlockedReason) . ',\n\t\t\t\t\t\t\t' . $objDatabase->SqlVariable($this->intUserRole) . ',\n\t\t\t\t\t\t\t' . $objDatabase->SqlVariable($this->strSearchMetaInfo) . ',\n\t\t\t\t\t\t\t' . $objDatabase->SqlVariable($this->intObjectOwner) . '\n\t\t\t\t\t\t)\n                ');\n\t\t\t\t\t// Update Identity column and return its value\n                $mixToReturn = $this->intId = $objDatabase->InsertId('Account', 'Id');\n            } else {\n                // Perform an UPDATE query\n                // First checking for Optimistic Locking constraints (if applicable)\n                if (!in_array(AccessOperation::UPDATE_STR,$ObjectAccessArray)) {\n                    // This user is not allowed to create an object of this type\n                    throw new Exception(\"User is not allowed to perform operation \".AccessOperation::UPDATE_STR.\" on entity of type 'Account'. Allowed access is \".json_encode($ObjectAccessArray));\n                }\n                if (!$blnForceUpdate) {\n                    // Perform the Optimistic Locking check\n                    $objResult = $objDatabase->Query('\n                    SELECT `LastUpdated` FROM `Account` WHERE\n\t\t\t\t\t\t\t`Id` = ' . $objDatabase->SqlVariable($this->intId) . '');\n\n                $objRow = $objResult->FetchArray();\n                if ($objRow[0] != $this->strLastUpdated)\n                    throw new dxOptimisticLockingException('Account');\n            }\n\n            // Perform the UPDATE query\n            $objDatabase->NonQuery('\n            UPDATE `Account` SET\n\t\t\t\t\t\t\t`FullName` = ' . $objDatabase->SqlVariable($this->strFullName) . ',\n\t\t\t\t\t\t\t`FirstName` = ' . $objDatabase->SqlVariable($this->strFirstName) . ',\n\t\t\t\t\t\t\t`MiddleNames` = ' . $objDatabase->SqlVariable($this->strMiddleNames) . ',\n\t\t\t\t\t\t\t`LastName` = ' . $objDatabase->SqlVariable($this->strLastName) . ',\n\t\t\t\t\t\t\t`EmailAddress` = ' . $objDatabase->SqlVariable($this->strEmailAddress) . ',\n\t\t\t\t\t\t\t`Username` = ' . $objDatabase->SqlVariable($this->strUsername) . ',\n\t\t\t\t\t\t\t`Password` = ' . $objDatabase->SqlVariable($this->strPassword) . ',\n\t\t\t\t\t\t\t`MaidenName` = ' . $objDatabase->SqlVariable($this->strMaidenName) . ',\n\t\t\t\t\t\t\t`ProfilePicturePath` = ' . $objDatabase->SqlVariable($this->strProfilePicturePath) . ',\n\t\t\t\t\t\t\t`MainContactNumber` = ' . $objDatabase->SqlVariable($this->strMainContactNumber) . ',\n\t\t\t\t\t\t\t`Title` = ' . $objDatabase->SqlVariable($this->strTitle) . ',\n\t\t\t\t\t\t\t`DateOfBirth` = ' . $objDatabase->SqlVariable($this->dttDateOfBirth) . ',\n\t\t\t\t\t\t\t`PhysicalAddressLineOne` = ' . $objDatabase->SqlVariable($this->strPhysicalAddressLineOne) . ',\n\t\t\t\t\t\t\t`PhysicalAddressLineTwo` = ' . $objDatabase->SqlVariable($this->strPhysicalAddressLineTwo) . ',\n\t\t\t\t\t\t\t`PhysicalAddressPostalCode` = ' . $objDatabase->SqlVariable($this->strPhysicalAddressPostalCode) . ',\n\t\t\t\t\t\t\t`PhysicalAddressCountry` = ' . $objDatabase->SqlVariable($this->strPhysicalAddressCountry) . ',\n\t\t\t\t\t\t\t`PostalAddressLineOne` = ' . $objDatabase->SqlVariable($this->strPostalAddressLineOne) . ',\n\t\t\t\t\t\t\t`PostalAddressLineTwo` = ' . $objDatabase->SqlVariable($this->strPostalAddressLineTwo) . ',\n\t\t\t\t\t\t\t`PostalAddressPostalCode` = ' . $objDatabase->SqlVariable($this->strPostalAddressPostalCode) . ',\n\t\t\t\t\t\t\t`PostalAddressCountry` = ' . $objDatabase->SqlVariable($this->strPostalAddressCountry) . ',\n\t\t\t\t\t\t\t`IdentificationNumber` = ' . $objDatabase->SqlVariable($this->strIdentificationNumber) . ',\n\t\t\t\t\t\t\t`Nickname` = ' . $objDatabase->SqlVariable($this->strNickname) . ',\n\t\t\t\t\t\t\t`Status` = ' . $objDatabase->SqlVariable($this->strStatus) . ',\n\t\t\t\t\t\t\t`Gender` = ' . $objDatabase->SqlVariable($this->strGender) . ',\n\t\t\t\t\t\t\t`AccessBlocked` = ' . $objDatabase->SqlVariable($this->blnAccessBlocked) . ',\n\t\t\t\t\t\t\t`BlockedReason` = ' . $objDatabase->SqlVariable($this->strBlockedReason) . ',\n\t\t\t\t\t\t\t`UserRole` = ' . $objDatabase->SqlVariable($this->intUserRole) . ',\n\t\t\t\t\t\t\t`SearchMetaInfo` = ' . $objDatabase->SqlVariable($this->strSearchMetaInfo) . ',\n\t\t\t\t\t\t\t`ObjectOwner` = ' . $objDatabase->SqlVariable($this->intObjectOwner) . '\n            WHERE\n\t\t\t\t\t\t\t`Id` = ' . $objDatabase->SqlVariable($this->intId) . '');\n            }\n\n        } catch (dxCallerException $objExc) {\n            $objExc->IncrementOffset();\n            throw $objExc;\n        }\n        try {\n            $newAuditLogEntry->ObjectId = $this->intId;\n            $newAuditLogEntry->Save();\n        } catch(dxCallerException $e) {\n            error_log('Could not save audit log while saving Account. Details: '.$newAuditLogEntry->getJson().'<br>Error details: '.$e->getMessage());\n        }\n        // Update __blnRestored and any Non-Identity PK Columns (if applicable)\n        $this->__blnRestored = true;\n\n        // Update Local Timestamp\n        $objResult = $objDatabase->Query('SELECT `LastUpdated` FROM\n                                            `Account` WHERE\n                \t\t\t\t\t\t\t`Id` = ' . $objDatabase->SqlVariable($this->intId) . '');\n\n        $objRow = $objResult->FetchArray();\n        $this->strLastUpdated = $objRow[0];\n\n        $this->DeleteCache();\n\n        // Return\n        return $mixToReturn;\n    }\n    /**\n     * Delete this Account\n     * @return void\n     */\n    public function Delete() {\n        if ((is_null($this->intId)))\n            throw new dxUndefinedPrimaryKeyException('Cannot delete this Account with an unset primary key.');\n\n        $ObjectAccessArray = ProjectAccessManager::getObjectAccess(ProjectFunctions::getCurrentAccountId(),\"Account\",$this->intId);\n        if (!in_array(AccessOperation::DELETE_STR,$ObjectAccessArray)) {\n            // This user is not allowed to delete an object of this type\n            throw new Exception(\"User is not allowed to perform operation \".AccessOperation::DELETE_STR.\" on entity of type 'Account'. Allowed access is \".json_encode($ObjectAccessArray));\n        }\n\n        // Get the Database Object for this Class\n        $objDatabase = Account::GetDatabase();\n        $newAuditLogEntry = new AuditLogEntry();\n        $ChangedArray = array();\n        $newAuditLogEntry->EntryTimeStamp = dxDateTime::Now();\n        $newAuditLogEntry->ObjectId = $this->intId;\n        $newAuditLogEntry->ObjectName = 'Account';\n        $newAuditLogEntry->UserEmail = ProjectFunctions::getCurrentUserEmailForAudit();\n        $newAuditLogEntry->ModificationType = 'Delete';\n        $ChangedArray = array_merge($ChangedArray,array(\"Id\" => $this->intId));\n        $ChangedArray = array_merge($ChangedArray,array(\"FullName\" => $this->strFullName));\n        $ChangedArray = array_merge($ChangedArray,array(\"FirstName\" => $this->strFirstName));\n        $ChangedArray = array_merge($ChangedArray,array(\"MiddleNames\" => $this->strMiddleNames));\n        $ChangedArray = array_merge($ChangedArray,array(\"LastName\" => $this->strLastName));\n        $ChangedArray = array_merge($ChangedArray,array(\"EmailAddress\" => $this->strEmailAddress));\n        $ChangedArray = array_merge($ChangedArray,array(\"Username\" => $this->strUsername));\n        $ChangedArray = array_merge($ChangedArray,array(\"Password\" => $this->strPassword));\n        $ChangedArray = array_merge($ChangedArray,array(\"MaidenName\" => $this->strMaidenName));\n        $ChangedArray = array_merge($ChangedArray,array(\"ProfilePicturePath\" => $this->strProfilePicturePath));\n        $ChangedArray = array_merge($ChangedArray,array(\"MainContactNumber\" => $this->strMainContactNumber));\n        $ChangedArray = array_merge($ChangedArray,array(\"Title\" => $this->strTitle));\n        $ChangedArray = array_merge($ChangedArray,array(\"DateOfBirth\" => $this->dttDateOfBirth));\n        $ChangedArray = array_merge($ChangedArray,array(\"PhysicalAddressLineOne\" => $this->strPhysicalAddressLineOne));\n        $ChangedArray = array_merge($ChangedArray,array(\"PhysicalAddressLineTwo\" => $this->strPhysicalAddressLineTwo));\n        $ChangedArray = array_merge($ChangedArray,array(\"PhysicalAddressPostalCode\" => $this->strPhysicalAddressPostalCode));\n        $ChangedArray = array_merge($ChangedArray,array(\"PhysicalAddressCountry\" => $this->strPhysicalAddressCountry));\n        $ChangedArray = array_merge($ChangedArray,array(\"PostalAddressLineOne\" => $this->strPostalAddressLineOne));\n        $ChangedArray = array_merge($ChangedArray,array(\"PostalAddressLineTwo\" => $this->strPostalAddressLineTwo));\n        $ChangedArray = array_merge($ChangedArray,array(\"PostalAddressPostalCode\" => $this->strPostalAddressPostalCode));\n        $ChangedArray = array_merge($ChangedArray,array(\"PostalAddressCountry\" => $this->strPostalAddressCountry));\n        $ChangedArray = array_merge($ChangedArray,array(\"IdentificationNumber\" => $this->strIdentificationNumber));\n        $ChangedArray = array_merge($ChangedArray,array(\"Nickname\" => $this->strNickname));\n        $ChangedArray = array_merge($ChangedArray,array(\"Status\" => $this->strStatus));\n        $ChangedArray = array_merge($ChangedArray,array(\"Gender\" => $this->strGender));\n        $ChangedArray = array_merge($ChangedArray,array(\"AccessBlocked\" => $this->blnAccessBlocked));\n        $ChangedArray = array_merge($ChangedArray,array(\"BlockedReason\" => $this->strBlockedReason));\n        $ChangedArray = array_merge($ChangedArray,array(\"UserRole\" => $this->intUserRole));\n        $ChangedArray = array_merge($ChangedArray,array(\"SearchMetaInfo\" => $this->strSearchMetaInfo));\n        $ChangedArray = array_merge($ChangedArray,array(\"LastUpdated\" => $this->strLastUpdated));\n        $ChangedArray = array_merge($ChangedArray,array(\"ObjectOwner\" => $this->intObjectOwner));\n        $newAuditLogEntry->AuditLogEntryDetail = json_encode($ChangedArray);\n        try {\n            $newAuditLogEntry->Save();\n        } catch(dxCallerException $e) {\n            error_log('Could not save audit log while deleting Account. Details: '.$newAuditLogEntry->getJson().'<br>Error details: '.$e->getMessage());\n        }\n\n        // Perform the SQL Query\n        $objDatabase->NonQuery('\n            DELETE FROM\n                `Account`\n            WHERE\n                `Id` = ' . $objDatabase->SqlVariable($this->intId) . '');\n\n        $this->DeleteCache();\n    }\n\n    /**\n     * Delete this Account ONLY from the cache\n     * @return void\n     */\n    public function DeleteCache() {\n        if (ProjectFunctions::$objCacheProvider && ProjectFunctions::$Database[1]->Caching) {\n            $strCacheKey = ProjectFunctions::$objCacheProvider->CreateKey(ProjectFunctions::$Database[1]->Database, 'Account', $this->intId);\n            ProjectFunctions::$objCacheProvider->Delete($strCacheKey);\n        }\n    }\n\n    /**\n     * Delete all Accounts\n     * @return void\n     */\n    public static function DeleteAll() {\n        // Get the Database Object for this Class\n        $objDatabase = Account::GetDatabase();\n\n        // Perform the Query\n        $objDatabase->NonQuery('\n            DELETE FROM\n                `Account`');\n\n        if (ProjectFunctions::$objCacheProvider && ProjectFunctions::$Database[1]->Caching) {\n            ProjectFunctions::$objCacheProvider->DeleteAll();\n        }\n    }\n\n    /**\n     * Truncate Account table\n     * @return void\n     */\n    public static function Truncate() {\n        // Get the Database Object for this Class\n        $objDatabase = Account::GetDatabase();\n\n        // Perform the Query\n        $objDatabase->NonQuery('\n            TRUNCATE `Account`');\n\n        if (ProjectFunctions::$objCacheProvider && ProjectFunctions::$Database[1]->Caching) {\n            ProjectFunctions::$objCacheProvider->DeleteAll();\n        }\n    }\n    /**\n     * Reload this Account from the database.\n     * @return void\n     */\n    public function Reload() {\n        // Make sure we are actually Restored from the database\n        if (!$this->__blnRestored)\n            throw new dxCallerException('Cannot call Reload() on a new, unsaved Account object.');\n\n        $this->DeleteCache();\n\n        // Reload the Object\n        $objReloaded = Account::Load($this->intId);\n\n        // Update $this's local variables to match\n        $this->strFullName = $objReloaded->strFullName;\n        $this->strFirstName = $objReloaded->strFirstName;\n        $this->strMiddleNames = $objReloaded->strMiddleNames;\n        $this->strLastName = $objReloaded->strLastName;\n        $this->strEmailAddress = $objReloaded->strEmailAddress;\n        $this->strUsername = $objReloaded->strUsername;\n        $this->strPassword = $objReloaded->strPassword;\n        $this->strMaidenName = $objReloaded->strMaidenName;\n        $this->strProfilePicturePath = $objReloaded->strProfilePicturePath;\n        $this->strMainContactNumber = $objReloaded->strMainContactNumber;\n        $this->strTitle = $objReloaded->strTitle;\n        $this->dttDateOfBirth = $objReloaded->dttDateOfBirth;\n        $this->strPhysicalAddressLineOne = $objReloaded->strPhysicalAddressLineOne;\n        $this->strPhysicalAddressLineTwo = $objReloaded->strPhysicalAddressLineTwo;\n        $this->strPhysicalAddressPostalCode = $objReloaded->strPhysicalAddressPostalCode;\n        $this->strPhysicalAddressCountry = $objReloaded->strPhysicalAddressCountry;\n        $this->strPostalAddressLineOne = $objReloaded->strPostalAddressLineOne;\n        $this->strPostalAddressLineTwo = $objReloaded->strPostalAddressLineTwo;\n        $this->strPostalAddressPostalCode = $objReloaded->strPostalAddressPostalCode;\n        $this->strPostalAddressCountry = $objReloaded->strPostalAddressCountry;\n        $this->strIdentificationNumber = $objReloaded->strIdentificationNumber;\n        $this->strNickname = $objReloaded->strNickname;\n        $this->strStatus = $objReloaded->strStatus;\n        $this->strGender = $objReloaded->strGender;\n        $this->blnAccessBlocked = $objReloaded->blnAccessBlocked;\n        $this->strBlockedReason = $objReloaded->strBlockedReason;\n        $this->UserRole = $objReloaded->UserRole;\n        $this->strSearchMetaInfo = $objReloaded->strSearchMetaInfo;\n        $this->strLastUpdated = $objReloaded->strLastUpdated;\n        $this->intObjectOwner = $objReloaded->intObjectOwner;\n    }\n    ////////////////////\n    // PUBLIC OVERRIDERS\n    ////////////////////\n\n        /**\n     * Override method to perform a property \"Get\"\n     * This will get the value of $strName\n     *\n     * @param string $strName Name of the property to get\n     * @return mixed\n     */\n    public function __get($strName) {\n        switch ($strName) {\n            ///////////////////\n            // Member Variables\n            ///////////////////\n            case 'Id':\n                /**\n                 * Gets the value for intId (Read-Only PK)\n                 * @return integer\n                 */\n                return $this->intId;\n\n            case 'FullName':\n                /**\n                 * Gets the value for strFullName \n                 * @return string\n                 */\n                return $this->strFullName;\n\n            case 'FirstName':\n                /**\n                 * Gets the value for strFirstName \n                 * @return string\n                 */\n                return $this->strFirstName;\n\n            case 'MiddleNames':\n                /**\n                 * Gets the value for strMiddleNames \n                 * @return string\n                 */\n                return $this->strMiddleNames;\n\n            case 'LastName':\n                /**\n                 * Gets the value for strLastName \n                 * @return string\n                 */\n                return $this->strLastName;\n\n            case 'EmailAddress':\n                /**\n                 * Gets the value for strEmailAddress \n                 * @return string\n                 */\n                return $this->strEmailAddress;\n\n            case 'Username':\n                /**\n                 * Gets the value for strUsername (Unique)\n                 * @return string\n                 */\n                return $this->strUsername;\n\n            case 'Password':\n                /**\n                 * Gets the value for strPassword \n                 * @return string\n                 */\n                return $this->strPassword;\n\n            case 'MaidenName':\n                /**\n                 * Gets the value for strMaidenName \n                 * @return string\n                 */\n                return $this->strMaidenName;\n\n            case 'ProfilePicturePath':\n                /**\n                 * Gets the value for strProfilePicturePath \n                 * @return string\n                 */\n                return $this->strProfilePicturePath;\n\n            case 'MainContactNumber':\n                /**\n                 * Gets the value for strMainContactNumber \n                 * @return string\n                 */\n                return $this->strMainContactNumber;\n\n            case 'Title':\n                /**\n                 * Gets the value for strTitle \n                 * @return string\n                 */\n                return $this->strTitle;\n\n            case 'DateOfBirth':\n                /**\n                 * Gets the value for dttDateOfBirth \n                 * @return dxDateTime\n                 */\n                return $this->dttDateOfBirth;\n\n            case 'PhysicalAddressLineOne':\n                /**\n                 * Gets the value for strPhysicalAddressLineOne \n                 * @return string\n                 */\n                return $this->strPhysicalAddressLineOne;\n\n            case 'PhysicalAddressLineTwo':\n                /**\n                 * Gets the value for strPhysicalAddressLineTwo \n                 * @return string\n                 */\n                return $this->strPhysicalAddressLineTwo;\n\n            case 'PhysicalAddressPostalCode':\n                /**\n                 * Gets the value for strPhysicalAddressPostalCode \n                 * @return string\n                 */\n                return $this->strPhysicalAddressPostalCode;\n\n            case 'PhysicalAddressCountry':\n                /**\n                 * Gets the value for strPhysicalAddressCountry \n                 * @return string\n                 */\n                return $this->strPhysicalAddressCountry;\n\n            case 'PostalAddressLineOne':\n                /**\n                 * Gets the value for strPostalAddressLineOne \n                 * @return string\n                 */\n                return $this->strPostalAddressLineOne;\n\n            case 'PostalAddressLineTwo':\n                /**\n                 * Gets the value for strPostalAddressLineTwo \n                 * @return string\n                 */\n                return $this->strPostalAddressLineTwo;\n\n            case 'PostalAddressPostalCode':\n                /**\n                 * Gets the value for strPostalAddressPostalCode \n                 * @return string\n                 */\n                return $this->strPostalAddressPostalCode;\n\n            case 'PostalAddressCountry':\n                /**\n                 * Gets the value for strPostalAddressCountry \n                 * @return string\n                 */\n                return $this->strPostalAddressCountry;\n\n            case 'IdentificationNumber':\n                /**\n                 * Gets the value for strIdentificationNumber \n                 * @return string\n                 */\n                return $this->strIdentificationNumber;\n\n            case 'Nickname':\n                /**\n                 * Gets the value for strNickname \n                 * @return string\n                 */\n                return $this->strNickname;\n\n            case 'Status':\n                /**\n                 * Gets the value for strStatus \n                 * @return string\n                 */\n                return $this->strStatus;\n\n            case 'Gender':\n                /**\n                 * Gets the value for strGender \n                 * @return string\n                 */\n                return $this->strGender;\n\n            case 'AccessBlocked':\n                /**\n                 * Gets the value for blnAccessBlocked \n                 * @return boolean\n                 */\n                return $this->blnAccessBlocked;\n\n            case 'BlockedReason':\n                /**\n                 * Gets the value for strBlockedReason \n                 * @return string\n                 */\n                return $this->strBlockedReason;\n\n            case 'UserRole':\n                /**\n                 * Gets the value for intUserRole \n                 * @return integer\n                 */\n                return $this->intUserRole;\n\n            case 'SearchMetaInfo':\n                /**\n                 * Gets the value for strSearchMetaInfo \n                 * @return string\n                 */\n                return $this->strSearchMetaInfo;\n\n            case 'LastUpdated':\n                /**\n                 * Gets the value for strLastUpdated (Read-Only Timestamp)\n                 * @return string\n                 */\n                return $this->strLastUpdated;\n\n            case 'ObjectOwner':\n                /**\n                 * Gets the value for intObjectOwner \n                 * @return integer\n                 */\n                return $this->intObjectOwner;\n\n\n            ///////////////////\n            // Member Objects\n            ///////////////////\n            case 'UserRoleObject':\n                /**\n                 * Gets the value for the UserRole object referenced by intUserRole \n                 * @return UserRole\n                 */\n                try {\n                    if ((!$this->objUserRoleObject) && (!is_null($this->intUserRole)))\n                        $this->objUserRoleObject = UserRole::Load($this->intUserRole);\n                    return $this->objUserRoleObject;\n                } catch (dxCallerException $objExc) {\n                    $objExc->IncrementOffset();\n                    throw $objExc;\n                }\n\n\n            ////////////////////////////\n            // Virtual Object References (Many to Many and Reverse References)\n            // (If restored via a \"Many-to\" expansion)\n            ////////////////////////////\n\n            case '_AdditionalAccountInformation':\n                /**\n                 * Gets the value for the private _objAdditionalAccountInformation (Read-Only)\n                 * if set due to an expansion on the AdditionalAccountInformation.Account reverse relationship\n                 * @return AdditionalAccountInformation\n                 */\n                return $this->_objAdditionalAccountInformation;\n\n            case '_AdditionalAccountInformationArray':\n                /**\n                 * Gets the value for the private _objAdditionalAccountInformationArray (Read-Only)\n                 * if set due to an ExpandAsArray on the AdditionalAccountInformation.Account reverse relationship\n                 * @return AdditionalAccountInformation[]\n                 */\n                return $this->_objAdditionalAccountInformationArray;\n\n            case '_ClientConnection':\n                /**\n                 * Gets the value for the private _objClientConnection (Read-Only)\n                 * if set due to an expansion on the ClientConnection.Account reverse relationship\n                 * @return ClientConnection\n                 */\n                return $this->_objClientConnection;\n\n            case '_ClientConnectionArray':\n                /**\n                 * Gets the value for the private _objClientConnectionArray (Read-Only)\n                 * if set due to an ExpandAsArray on the ClientConnection.Account reverse relationship\n                 * @return ClientConnection[]\n                 */\n                return $this->_objClientConnectionArray;\n\n            case '_PasswordReset':\n                /**\n                 * Gets the value for the private _objPasswordReset (Read-Only)\n                 * if set due to an expansion on the PasswordReset.Account reverse relationship\n                 * @return PasswordReset\n                 */\n                return $this->_objPasswordReset;\n\n            case '_PasswordResetArray':\n                /**\n                 * Gets the value for the private _objPasswordResetArray (Read-Only)\n                 * if set due to an ExpandAsArray on the PasswordReset.Account reverse relationship\n                 * @return PasswordReset[]\n                 */\n                return $this->_objPasswordResetArray;\n\n            case '_PushRegistration':\n                /**\n                 * Gets the value for the private _objPushRegistration (Read-Only)\n                 * if set due to an expansion on the PushRegistration.Account reverse relationship\n                 * @return PushRegistration\n                 */\n                return $this->_objPushRegistration;\n\n            case '_PushRegistrationArray':\n                /**\n                 * Gets the value for the private _objPushRegistrationArray (Read-Only)\n                 * if set due to an ExpandAsArray on the PushRegistration.Account reverse relationship\n                 * @return PushRegistration[]\n                 */\n                return $this->_objPushRegistrationArray;\n\n\n            case '__Restored':\n                return $this->__blnRestored;\n\n            default:\n                try {\n                    return parent::__get($strName);\n                } catch (dxCallerException $objExc) {\n                    $objExc->IncrementOffset();\n                    throw $objExc;\n                }\n        }\n    }\n        /**\n     * Override method to perform a property \"Set\"\n     * This will set the property $strName to be $mixValue\n     *\n     * @param string $strName Name of the property to set\n     * @param string $mixValue New value of the property\n     * @return mixed\n     */\n    public function __set($strName, $mixValue) {\n        switch ($strName) {\n            ///////////////////\n            // Member Variables\n            ///////////////////\n            case 'FullName':\n                /**\n                 * Sets the value for strFullName \n                 * @param string $mixValue\n                 * @return string\n                 */\n                try {\n                    return ($this->strFullName = dxType::Cast($mixValue, dxType::String));\n                } catch (dxCallerException $objExc) {\n                    $objExc->IncrementOffset();\n                    throw $objExc;\n                }\n\n            case 'FirstName':\n                /**\n                 * Sets the value for strFirstName \n                 * @param string $mixValue\n                 * @return string\n                 */\n                try {\n                    return ($this->strFirstName = dxType::Cast($mixValue, dxType::String));\n                } catch (dxCallerException $objExc) {\n                    $objExc->IncrementOffset();\n                    throw $objExc;\n                }\n\n            case 'MiddleNames':\n                /**\n                 * Sets the value for strMiddleNames \n                 * @param string $mixValue\n                 * @return string\n                 */\n                try {\n                    return ($this->strMiddleNames = dxType::Cast($mixValue, dxType::String));\n                } catch (dxCallerException $objExc) {\n                    $objExc->IncrementOffset();\n                    throw $objExc;\n                }\n\n            case 'LastName':\n                /**\n                 * Sets the value for strLastName \n                 * @param string $mixValue\n                 * @return string\n                 */\n                try {\n                    return ($this->strLastName = dxType::Cast($mixValue, dxType::String));\n                } catch (dxCallerException $objExc) {\n                    $objExc->IncrementOffset();\n                    throw $objExc;\n                }\n\n            case 'EmailAddress':\n                /**\n                 * Sets the value for strEmailAddress \n                 * @param string $mixValue\n                 * @return string\n                 */\n                try {\n                    return ($this->strEmailAddress = dxType::Cast($mixValue, dxType::String));\n                } catch (dxCallerException $objExc) {\n                    $objExc->IncrementOffset();\n                    throw $objExc;\n                }\n\n            case 'Username':\n                /**\n                 * Sets the value for strUsername (Unique)\n                 * @param string $mixValue\n                 * @return string\n                 */\n                try {\n                    return ($this->strUsername = dxType::Cast($mixValue, dxType::String));\n                } catch (dxCallerException $objExc) {\n                    $objExc->IncrementOffset();\n                    throw $objExc;\n                }\n\n            case 'Password':\n                /**\n                 * Sets the value for strPassword \n                 * @param string $mixValue\n                 * @return string\n                 */\n                try {\n                    return ($this->strPassword = dxType::Cast($mixValue, dxType::String));\n                } catch (dxCallerException $objExc) {\n                    $objExc->IncrementOffset();\n                    throw $objExc;\n                }\n\n            case 'MaidenName':\n                /**\n                 * Sets the value for strMaidenName \n                 * @param string $mixValue\n                 * @return string\n                 */\n                try {\n                    return ($this->strMaidenName = dxType::Cast($mixValue, dxType::String));\n                } catch (dxCallerException $objExc) {\n                    $objExc->IncrementOffset();\n                    throw $objExc;\n                }\n\n            case 'ProfilePicturePath':\n                /**\n                 * Sets the value for strProfilePicturePath \n                 * @param string $mixValue\n                 * @return string\n                 */\n                try {\n                    return ($this->strProfilePicturePath = dxType::Cast($mixValue, dxType::String));\n                } catch (dxCallerException $objExc) {\n                    $objExc->IncrementOffset();\n                    throw $objExc;\n                }\n\n            case 'MainContactNumber':\n                /**\n                 * Sets the value for strMainContactNumber \n                 * @param string $mixValue\n                 * @return string\n                 */\n                try {\n                    return ($this->strMainContactNumber = dxType::Cast($mixValue, dxType::String));\n                } catch (dxCallerException $objExc) {\n                    $objExc->IncrementOffset();\n                    throw $objExc;\n                }\n\n            case 'Title':\n                /**\n                 * Sets the value for strTitle \n                 * @param string $mixValue\n                 * @return string\n                 */\n                try {\n                    return ($this->strTitle = dxType::Cast($mixValue, dxType::String));\n                } catch (dxCallerException $objExc) {\n                    $objExc->IncrementOffset();\n                    throw $objExc;\n                }\n\n            case 'DateOfBirth':\n                /**\n                 * Sets the value for dttDateOfBirth \n                 * @param dxDateTime $mixValue\n                 * @return dxDateTime\n                 */\n                try {\n                    return ($this->dttDateOfBirth = dxType::Cast($mixValue, dxType::DateTime));\n                } catch (dxCallerException $objExc) {\n                    $objExc->IncrementOffset();\n                    throw $objExc;\n                }\n\n            case 'PhysicalAddressLineOne':\n                /**\n                 * Sets the value for strPhysicalAddressLineOne \n                 * @param string $mixValue\n                 * @return string\n                 */\n                try {\n                    return ($this->strPhysicalAddressLineOne = dxType::Cast($mixValue, dxType::String));\n                } catch (dxCallerException $objExc) {\n                    $objExc->IncrementOffset();\n                    throw $objExc;\n                }\n\n            case 'PhysicalAddressLineTwo':\n                /**\n                 * Sets the value for strPhysicalAddressLineTwo \n                 * @param string $mixValue\n                 * @return string\n                 */\n                try {\n                    return ($this->strPhysicalAddressLineTwo = dxType::Cast($mixValue, dxType::String));\n                } catch (dxCallerException $objExc) {\n                    $objExc->IncrementOffset();\n                    throw $objExc;\n                }\n\n            case 'PhysicalAddressPostalCode':\n                /**\n                 * Sets the value for strPhysicalAddressPostalCode \n                 * @param string $mixValue\n                 * @return string\n                 */\n                try {\n                    return ($this->strPhysicalAddressPostalCode = dxType::Cast($mixValue, dxType::String));\n                } catch (dxCallerException $objExc) {\n                    $objExc->IncrementOffset();\n                    throw $objExc;\n                }\n\n            case 'PhysicalAddressCountry':\n                /**\n                 * Sets the value for strPhysicalAddressCountry \n                 * @param string $mixValue\n                 * @return string\n                 */\n                try {\n                    return ($this->strPhysicalAddressCountry = dxType::Cast($mixValue, dxType::String));\n                } catch (dxCallerException $objExc) {\n                    $objExc->IncrementOffset();\n                    throw $objExc;\n                }\n\n            case 'PostalAddressLineOne':\n                /**\n                 * Sets the value for strPostalAddressLineOne \n                 * @param string $mixValue\n                 * @return string\n                 */\n                try {\n                    return ($this->strPostalAddressLineOne = dxType::Cast($mixValue, dxType::String));\n                } catch (dxCallerException $objExc) {\n                    $objExc->IncrementOffset();\n                    throw $objExc;\n                }\n\n            case 'PostalAddressLineTwo':\n                /**\n                 * Sets the value for strPostalAddressLineTwo \n                 * @param string $mixValue\n                 * @return string\n                 */\n                try {\n                    return ($this->strPostalAddressLineTwo = dxType::Cast($mixValue, dxType::String));\n                } catch (dxCallerException $objExc) {\n                    $objExc->IncrementOffset();\n                    throw $objExc;\n                }\n\n            case 'PostalAddressPostalCode':\n                /**\n                 * Sets the value for strPostalAddressPostalCode \n                 * @param string $mixValue\n                 * @return string\n                 */\n                try {\n                    return ($this->strPostalAddressPostalCode = dxType::Cast($mixValue, dxType::String));\n                } catch (dxCallerException $objExc) {\n                    $objExc->IncrementOffset();\n                    throw $objExc;\n                }\n\n            case 'PostalAddressCountry':\n                /**\n                 * Sets the value for strPostalAddressCountry \n                 * @param string $mixValue\n                 * @return string\n                 */\n                try {\n                    return ($this->strPostalAddressCountry = dxType::Cast($mixValue, dxType::String));\n                } catch (dxCallerException $objExc) {\n                    $objExc->IncrementOffset();\n                    throw $objExc;\n                }\n\n            case 'IdentificationNumber':\n                /**\n                 * Sets the value for strIdentificationNumber \n                 * @param string $mixValue\n                 * @return string\n                 */\n                try {\n                    return ($this->strIdentificationNumber = dxType::Cast($mixValue, dxType::String));\n                } catch (dxCallerException $objExc) {\n                    $objExc->IncrementOffset();\n                    throw $objExc;\n                }\n\n            case 'Nickname':\n                /**\n                 * Sets the value for strNickname \n                 * @param string $mixValue\n                 * @return string\n                 */\n                try {\n                    return ($this->strNickname = dxType::Cast($mixValue, dxType::String));\n                } catch (dxCallerException $objExc) {\n                    $objExc->IncrementOffset();\n                    throw $objExc;\n                }\n\n            case 'Status':\n                /**\n                 * Sets the value for strStatus \n                 * @param string $mixValue\n                 * @return string\n                 */\n                try {\n                    return ($this->strStatus = dxType::Cast($mixValue, dxType::String));\n                } catch (dxCallerException $objExc) {\n                    $objExc->IncrementOffset();\n                    throw $objExc;\n                }\n\n            case 'Gender':\n                /**\n                 * Sets the value for strGender \n                 * @param string $mixValue\n                 * @return string\n                 */\n                try {\n                    return ($this->strGender = dxType::Cast($mixValue, dxType::String));\n                } catch (dxCallerException $objExc) {\n                    $objExc->IncrementOffset();\n                    throw $objExc;\n                }\n\n            case 'AccessBlocked':\n                /**\n                 * Sets the value for blnAccessBlocked \n                 * @param boolean $mixValue\n                 * @return boolean\n                 */\n                try {\n                    return ($this->blnAccessBlocked = dxType::Cast($mixValue, dxType::Boolean));\n                } catch (dxCallerException $objExc) {\n                    $objExc->IncrementOffset();\n                    throw $objExc;\n                }\n\n            case 'BlockedReason':\n                /**\n                 * Sets the value for strBlockedReason \n                 * @param string $mixValue\n                 * @return string\n                 */\n                try {\n                    return ($this->strBlockedReason = dxType::Cast($mixValue, dxType::String));\n                } catch (dxCallerException $objExc) {\n                    $objExc->IncrementOffset();\n                    throw $objExc;\n                }\n\n            case 'UserRole':\n                /**\n                 * Sets the value for intUserRole \n                 * @param integer $mixValue\n                 * @return integer\n                 */\n                try {\n                    $this->objUserRoleObject = null;\n                    return ($this->intUserRole = dxType::Cast($mixValue, dxType::Integer));\n                } catch (dxCallerException $objExc) {\n                    $objExc->IncrementOffset();\n                    throw $objExc;\n                }\n\n            case 'SearchMetaInfo':\n                /**\n                 * Sets the value for strSearchMetaInfo \n                 * @param string $mixValue\n                 * @return string\n                 */\n                try {\n                    return ($this->strSearchMetaInfo = dxType::Cast($mixValue, dxType::String));\n                } catch (dxCallerException $objExc) {\n                    $objExc->IncrementOffset();\n                    throw $objExc;\n                }\n\n            case 'ObjectOwner':\n                /**\n                 * Sets the value for intObjectOwner \n                 * @param integer $mixValue\n                 * @return integer\n                 */\n                try {\n                    return ($this->intObjectOwner = dxType::Cast($mixValue, dxType::Integer));\n                } catch (dxCallerException $objExc) {\n                    $objExc->IncrementOffset();\n                    throw $objExc;\n                }\n\n\n            ///////////////////\n            // Member Objects\n            ///////////////////\n            case 'UserRoleObject':\n                /**\n                 * Sets the value for the UserRole object referenced by intUserRole \n                 * @param UserRole $mixValue\n                 * @return UserRole\n                 */\n                if (is_null($mixValue)) {\n                    $this->intUserRole = null;\n                    $this->objUserRoleObject = null;\n                    return null;\n                } else {\n                    // Make sure $mixValue actually is a UserRole object\n                    try {\n                        $mixValue = dxType::Cast($mixValue, 'UserRole');\n                    } catch (dxInvalidCastException $objExc) {\n                        $objExc->IncrementOffset();\n                        throw $objExc;\n                    }\n\n                    // Make sure $mixValue is a SAVED UserRole object\n                    if (is_null($mixValue->Id))\n                        throw new dxCallerException('Unable to set an unsaved UserRoleObject for this Account');\n\n                    // Update Local Member Variables\n                    $this->objUserRoleObject = $mixValue;\n                    $this->intUserRole = $mixValue->Id;\n\n                    // Return $mixValue\n                    return $mixValue;\n                }\n                break;\n\n            default:\n                try {\n                    return parent::__set($strName, $mixValue);\n                } catch (dxCallerException $objExc) {\n                    $objExc->IncrementOffset();\n                    throw $objExc;\n                }\n        }\n    }\n    /**\n     * Lookup a VirtualAttribute value (if applicable).  Returns NULL if none found.\n     * @param string $strName\n     * @return string\n     */\n    public function GetVirtualAttribute($strName) {\n        if (array_key_exists($strName, $this->__strVirtualAttributeArray))\n            return $this->__strVirtualAttributeArray[$strName];\n        return null;\n    }\n\n    ///////////////////////////////\n    // ASSOCIATED OBJECTS' METHODS\n    ///////////////////////////////\n\n\n\n    // Related Objects' Methods for AdditionalAccountInformation\n    //-------------------------------------------------------------------\n\n    /**\n     * Gets all associated AdditionalAccountInformations as an array of AdditionalAccountInformation objects\n     * @param dxQueryClause[] $objOptionalClauses additional optional dxQueryClause objects for this query\n     * @return AdditionalAccountInformation[]\n    */\n    public function GetAdditionalAccountInformationArray($objOptionalClauses = null) {\n        if ((is_null($this->intId)))\n            return array();\n\n        try {\n            return AdditionalAccountInformation::LoadArrayByAccount($this->intId, $objOptionalClauses);\n        } catch (dxCallerException $objExc) {\n            $objExc->IncrementOffset();\n            throw $objExc;\n        }\n    }\n\n    /**\n     * Counts all associated AdditionalAccountInformations\n     * @return int\n    */\n    public function CountAdditionalAccountInformations() {\n        if ((is_null($this->intId)))\n            return 0;\n\n        return AdditionalAccountInformation::CountByAccount($this->intId);\n    }\n\n    /**\n     * Associates a AdditionalAccountInformation\n     * @param AdditionalAccountInformation $objAdditionalAccountInformation\n     * @return void\n    */\n    public function AssociateAdditionalAccountInformation(AdditionalAccountInformation $objAdditionalAccountInformation) {\n        if ((is_null($this->intId)))\n            throw new dxUndefinedPrimaryKeyException('Unable to call AssociateAdditionalAccountInformation on this unsaved Account.');\n        if ((is_null($objAdditionalAccountInformation->Id)))\n            throw new dxUndefinedPrimaryKeyException('Unable to call AssociateAdditionalAccountInformation on this Account with an unsaved AdditionalAccountInformation.');\n\n        // Get the Database Object for this Class\n        $objDatabase = Account::GetDatabase();\n\n        // Perform the SQL Query\n        $objDatabase->NonQuery('\n            UPDATE\n                `AdditionalAccountInformation`\n            SET\n                `Account` = ' . $objDatabase->SqlVariable($this->intId) . '\n            WHERE\n                `Id` = ' . $objDatabase->SqlVariable($objAdditionalAccountInformation->Id) . '\n        ');\n    }\n\n    /**\n     * Unassociates a AdditionalAccountInformation\n     * @param AdditionalAccountInformation $objAdditionalAccountInformation\n     * @return void\n    */\n    public function UnassociateAdditionalAccountInformation(AdditionalAccountInformation $objAdditionalAccountInformation) {\n        if ((is_null($this->intId)))\n            throw new dxUndefinedPrimaryKeyException('Unable to call UnassociateAdditionalAccountInformation on this unsaved Account.');\n        if ((is_null($objAdditionalAccountInformation->Id)))\n            throw new dxUndefinedPrimaryKeyException('Unable to call UnassociateAdditionalAccountInformation on this Account with an unsaved AdditionalAccountInformation.');\n\n        // Get the Database Object for this Class\n        $objDatabase = Account::GetDatabase();\n\n        // Perform the SQL Query\n        $objDatabase->NonQuery('\n            UPDATE\n                `AdditionalAccountInformation`\n            SET\n                `Account` = null\n            WHERE\n                `Id` = ' . $objDatabase->SqlVariable($objAdditionalAccountInformation->Id) . ' AND\n                `Account` = ' . $objDatabase->SqlVariable($this->intId) . '\n        ');\n    }\n\n    /**\n     * Unassociates all AdditionalAccountInformations\n     * @return void\n    */\n    public function UnassociateAllAdditionalAccountInformations() {\n        if ((is_null($this->intId)))\n            throw new dxUndefinedPrimaryKeyException('Unable to call UnassociateAdditionalAccountInformation on this unsaved Account.');\n\n        // Get the Database Object for this Class\n        $objDatabase = Account::GetDatabase();\n\n        // Perform the SQL Query\n        $objDatabase->NonQuery('\n            UPDATE\n                `AdditionalAccountInformation`\n            SET\n                `Account` = null\n            WHERE\n                `Account` = ' . $objDatabase->SqlVariable($this->intId) . '\n        ');\n    }\n\n    /**\n     * Deletes an associated AdditionalAccountInformation\n     * @param AdditionalAccountInformation $objAdditionalAccountInformation\n     * @return void\n    */\n    public function DeleteAssociatedAdditionalAccountInformation(AdditionalAccountInformation $objAdditionalAccountInformation) {\n        if ((is_null($this->intId)))\n            throw new dxUndefinedPrimaryKeyException('Unable to call UnassociateAdditionalAccountInformation on this unsaved Account.');\n        if ((is_null($objAdditionalAccountInformation->Id)))\n            throw new dxUndefinedPrimaryKeyException('Unable to call UnassociateAdditionalAccountInformation on this Account with an unsaved AdditionalAccountInformation.');\n\n        // Get the Database Object for this Class\n        $objDatabase = Account::GetDatabase();\n\n        // Perform the SQL Query\n        $objDatabase->NonQuery('\n            DELETE FROM\n                `AdditionalAccountInformation`\n            WHERE\n                `Id` = ' . $objDatabase->SqlVariable($objAdditionalAccountInformation->Id) . ' AND\n                `Account` = ' . $objDatabase->SqlVariable($this->intId) . '\n        ');\n    }\n\n    /**\n     * Deletes all associated AdditionalAccountInformations\n     * @return void\n    */\n    public function DeleteAllAdditionalAccountInformations() {\n        if ((is_null($this->intId)))\n            throw new dxUndefinedPrimaryKeyException('Unable to call UnassociateAdditionalAccountInformation on this unsaved Account.');\n\n        // Get the Database Object for this Class\n        $objDatabase = Account::GetDatabase();\n\n        // Perform the SQL Query\n        $objDatabase->NonQuery('\n            DELETE FROM\n                `AdditionalAccountInformation`\n            WHERE\n                `Account` = ' . $objDatabase->SqlVariable($this->intId) . '\n        ');\n    }\n\n\n    // Related Objects' Methods for ClientConnection\n    //-------------------------------------------------------------------\n\n    /**\n     * Gets all associated ClientConnections as an array of ClientConnection objects\n     * @param dxQueryClause[] $objOptionalClauses additional optional dxQueryClause objects for this query\n     * @return ClientConnection[]\n    */\n    public function GetClientConnectionArray($objOptionalClauses = null) {\n        if ((is_null($this->intId)))\n            return array();\n\n        try {\n            return ClientConnection::LoadArrayByAccount($this->intId, $objOptionalClauses);\n        } catch (dxCallerException $objExc) {\n            $objExc->IncrementOffset();\n            throw $objExc;\n        }\n    }\n\n    /**\n     * Counts all associated ClientConnections\n     * @return int\n    */\n    public function CountClientConnections() {\n        if ((is_null($this->intId)))\n            return 0;\n\n        return ClientConnection::CountByAccount($this->intId);\n    }\n\n    /**\n     * Associates a ClientConnection\n     * @param ClientConnection $objClientConnection\n     * @return void\n    */\n    public function AssociateClientConnection(ClientConnection $objClientConnection) {\n        if ((is_null($this->intId)))\n            throw new dxUndefinedPrimaryKeyException('Unable to call AssociateClientConnection on this unsaved Account.');\n        if ((is_null($objClientConnection->Id)))\n            throw new dxUndefinedPrimaryKeyException('Unable to call AssociateClientConnection on this Account with an unsaved ClientConnection.');\n\n        // Get the Database Object for this Class\n        $objDatabase = Account::GetDatabase();\n\n        // Perform the SQL Query\n        $objDatabase->NonQuery('\n            UPDATE\n                `ClientConnection`\n            SET\n                `Account` = ' . $objDatabase->SqlVariable($this->intId) . '\n            WHERE\n                `Id` = ' . $objDatabase->SqlVariable($objClientConnection->Id) . '\n        ');\n    }\n\n    /**\n     * Unassociates a ClientConnection\n     * @param ClientConnection $objClientConnection\n     * @return void\n    */\n    public function UnassociateClientConnection(ClientConnection $objClientConnection) {\n        if ((is_null($this->intId)))\n            throw new dxUndefinedPrimaryKeyException('Unable to call UnassociateClientConnection on this unsaved Account.');\n        if ((is_null($objClientConnection->Id)))\n            throw new dxUndefinedPrimaryKeyException('Unable to call UnassociateClientConnection on this Account with an unsaved ClientConnection.');\n\n        // Get the Database Object for this Class\n        $objDatabase = Account::GetDatabase();\n\n        // Perform the SQL Query\n        $objDatabase->NonQuery('\n            UPDATE\n                `ClientConnection`\n            SET\n                `Account` = null\n            WHERE\n                `Id` = ' . $objDatabase->SqlVariable($objClientConnection->Id) . ' AND\n                `Account` = ' . $objDatabase->SqlVariable($this->intId) . '\n        ');\n    }\n\n    /**\n     * Unassociates all ClientConnections\n     * @return void\n    */\n    public function UnassociateAllClientConnections() {\n        if ((is_null($this->intId)))\n            throw new dxUndefinedPrimaryKeyException('Unable to call UnassociateClientConnection on this unsaved Account.');\n\n        // Get the Database Object for this Class\n        $objDatabase = Account::GetDatabase();\n\n        // Perform the SQL Query\n        $objDatabase->NonQuery('\n            UPDATE\n                `ClientConnection`\n            SET\n                `Account` = null\n            WHERE\n                `Account` = ' . $objDatabase->SqlVariable($this->intId) . '\n        ');\n    }\n\n    /**\n     * Deletes an associated ClientConnection\n     * @param ClientConnection $objClientConnection\n     * @return void\n    */\n    public function DeleteAssociatedClientConnection(ClientConnection $objClientConnection) {\n        if ((is_null($this->intId)))\n            throw new dxUndefinedPrimaryKeyException('Unable to call UnassociateClientConnection on this unsaved Account.');\n        if ((is_null($objClientConnection->Id)))\n            throw new dxUndefinedPrimaryKeyException('Unable to call UnassociateClientConnection on this Account with an unsaved ClientConnection.');\n\n        // Get the Database Object for this Class\n        $objDatabase = Account::GetDatabase();\n\n        // Perform the SQL Query\n        $objDatabase->NonQuery('\n            DELETE FROM\n                `ClientConnection`\n            WHERE\n                `Id` = ' . $objDatabase->SqlVariable($objClientConnection->Id) . ' AND\n                `Account` = ' . $objDatabase->SqlVariable($this->intId) . '\n        ');\n    }\n\n    /**\n     * Deletes all associated ClientConnections\n     * @return void\n    */\n    public function DeleteAllClientConnections() {\n        if ((is_null($this->intId)))\n            throw new dxUndefinedPrimaryKeyException('Unable to call UnassociateClientConnection on this unsaved Account.');\n\n        // Get the Database Object for this Class\n        $objDatabase = Account::GetDatabase();\n\n        // Perform the SQL Query\n        $objDatabase->NonQuery('\n            DELETE FROM\n                `ClientConnection`\n            WHERE\n                `Account` = ' . $objDatabase->SqlVariable($this->intId) . '\n        ');\n    }\n\n\n    // Related Objects' Methods for PasswordReset\n    //-------------------------------------------------------------------\n\n    /**\n     * Gets all associated PasswordResets as an array of PasswordReset objects\n     * @param dxQueryClause[] $objOptionalClauses additional optional dxQueryClause objects for this query\n     * @return PasswordReset[]\n    */\n    public function GetPasswordResetArray($objOptionalClauses = null) {\n        if ((is_null($this->intId)))\n            return array();\n\n        try {\n            return PasswordReset::LoadArrayByAccount($this->intId, $objOptionalClauses);\n        } catch (dxCallerException $objExc) {\n            $objExc->IncrementOffset();\n            throw $objExc;\n        }\n    }\n\n    /**\n     * Counts all associated PasswordResets\n     * @return int\n    */\n    public function CountPasswordResets() {\n        if ((is_null($this->intId)))\n            return 0;\n\n        return PasswordReset::CountByAccount($this->intId);\n    }\n\n    /**\n     * Associates a PasswordReset\n     * @param PasswordReset $objPasswordReset\n     * @return void\n    */\n    public function AssociatePasswordReset(PasswordReset $objPasswordReset) {\n        if ((is_null($this->intId)))\n            throw new dxUndefinedPrimaryKeyException('Unable to call AssociatePasswordReset on this unsaved Account.');\n        if ((is_null($objPasswordReset->Id)))\n            throw new dxUndefinedPrimaryKeyException('Unable to call AssociatePasswordReset on this Account with an unsaved PasswordReset.');\n\n        // Get the Database Object for this Class\n        $objDatabase = Account::GetDatabase();\n\n        // Perform the SQL Query\n        $objDatabase->NonQuery('\n            UPDATE\n                `PasswordReset`\n            SET\n                `Account` = ' . $objDatabase->SqlVariable($this->intId) . '\n            WHERE\n                `Id` = ' . $objDatabase->SqlVariable($objPasswordReset->Id) . '\n        ');\n    }\n\n    /**\n     * Unassociates a PasswordReset\n     * @param PasswordReset $objPasswordReset\n     * @return void\n    */\n    public function UnassociatePasswordReset(PasswordReset $objPasswordReset) {\n        if ((is_null($this->intId)))\n            throw new dxUndefinedPrimaryKeyException('Unable to call UnassociatePasswordReset on this unsaved Account.');\n        if ((is_null($objPasswordReset->Id)))\n            throw new dxUndefinedPrimaryKeyException('Unable to call UnassociatePasswordReset on this Account with an unsaved PasswordReset.');\n\n        // Get the Database Object for this Class\n        $objDatabase = Account::GetDatabase();\n\n        // Perform the SQL Query\n        $objDatabase->NonQuery('\n            UPDATE\n                `PasswordReset`\n            SET\n                `Account` = null\n            WHERE\n                `Id` = ' . $objDatabase->SqlVariable($objPasswordReset->Id) . ' AND\n                `Account` = ' . $objDatabase->SqlVariable($this->intId) . '\n        ');\n    }\n\n    /**\n     * Unassociates all PasswordResets\n     * @return void\n    */\n    public function UnassociateAllPasswordResets() {\n        if ((is_null($this->intId)))\n            throw new dxUndefinedPrimaryKeyException('Unable to call UnassociatePasswordReset on this unsaved Account.');\n\n        // Get the Database Object for this Class\n        $objDatabase = Account::GetDatabase();\n\n        // Perform the SQL Query\n        $objDatabase->NonQuery('\n            UPDATE\n                `PasswordReset`\n            SET\n                `Account` = null\n            WHERE\n                `Account` = ' . $objDatabase->SqlVariable($this->intId) . '\n        ');\n    }\n\n    /**\n     * Deletes an associated PasswordReset\n     * @param PasswordReset $objPasswordReset\n     * @return void\n    */\n    public function DeleteAssociatedPasswordReset(PasswordReset $objPasswordReset) {\n        if ((is_null($this->intId)))\n            throw new dxUndefinedPrimaryKeyException('Unable to call UnassociatePasswordReset on this unsaved Account.');\n        if ((is_null($objPasswordReset->Id)))\n            throw new dxUndefinedPrimaryKeyException('Unable to call UnassociatePasswordReset on this Account with an unsaved PasswordReset.');\n\n        // Get the Database Object for this Class\n        $objDatabase = Account::GetDatabase();\n\n        // Perform the SQL Query\n        $objDatabase->NonQuery('\n            DELETE FROM\n                `PasswordReset`\n            WHERE\n                `Id` = ' . $objDatabase->SqlVariable($objPasswordReset->Id) . ' AND\n                `Account` = ' . $objDatabase->SqlVariable($this->intId) . '\n        ');\n    }\n\n    /**\n     * Deletes all associated PasswordResets\n     * @return void\n    */\n    public function DeleteAllPasswordResets() {\n        if ((is_null($this->intId)))\n            throw new dxUndefinedPrimaryKeyException('Unable to call UnassociatePasswordReset on this unsaved Account.');\n\n        // Get the Database Object for this Class\n        $objDatabase = Account::GetDatabase();\n\n        // Perform the SQL Query\n        $objDatabase->NonQuery('\n            DELETE FROM\n                `PasswordReset`\n            WHERE\n                `Account` = ' . $objDatabase->SqlVariable($this->intId) . '\n        ');\n    }\n\n\n    // Related Objects' Methods for PushRegistration\n    //-------------------------------------------------------------------\n\n    /**\n     * Gets all associated PushRegistrations as an array of PushRegistration objects\n     * @param dxQueryClause[] $objOptionalClauses additional optional dxQueryClause objects for this query\n     * @return PushRegistration[]\n    */\n    public function GetPushRegistrationArray($objOptionalClauses = null) {\n        if ((is_null($this->intId)))\n            return array();\n\n        try {\n            return PushRegistration::LoadArrayByAccount($this->intId, $objOptionalClauses);\n        } catch (dxCallerException $objExc) {\n            $objExc->IncrementOffset();\n            throw $objExc;\n        }\n    }\n\n    /**\n     * Counts all associated PushRegistrations\n     * @return int\n    */\n    public function CountPushRegistrations() {\n        if ((is_null($this->intId)))\n            return 0;\n\n        return PushRegistration::CountByAccount($this->intId);\n    }\n\n    /**\n     * Associates a PushRegistration\n     * @param PushRegistration $objPushRegistration\n     * @return void\n    */\n    public function AssociatePushRegistration(PushRegistration $objPushRegistration) {\n        if ((is_null($this->intId)))\n            throw new dxUndefinedPrimaryKeyException('Unable to call AssociatePushRegistration on this unsaved Account.');\n        if ((is_null($objPushRegistration->Id)))\n            throw new dxUndefinedPrimaryKeyException('Unable to call AssociatePushRegistration on this Account with an unsaved PushRegistration.');\n\n        // Get the Database Object for this Class\n        $objDatabase = Account::GetDatabase();\n\n        // Perform the SQL Query\n        $objDatabase->NonQuery('\n            UPDATE\n                `PushRegistration`\n            SET\n                `Account` = ' . $objDatabase->SqlVariable($this->intId) . '\n            WHERE\n                `Id` = ' . $objDatabase->SqlVariable($objPushRegistration->Id) . '\n        ');\n    }\n\n    /**\n     * Unassociates a PushRegistration\n     * @param PushRegistration $objPushRegistration\n     * @return void\n    */\n    public function UnassociatePushRegistration(PushRegistration $objPushRegistration) {\n        if ((is_null($this->intId)))\n            throw new dxUndefinedPrimaryKeyException('Unable to call UnassociatePushRegistration on this unsaved Account.');\n        if ((is_null($objPushRegistration->Id)))\n            throw new dxUndefinedPrimaryKeyException('Unable to call UnassociatePushRegistration on this Account with an unsaved PushRegistration.');\n\n        // Get the Database Object for this Class\n        $objDatabase = Account::GetDatabase();\n\n        // Perform the SQL Query\n        $objDatabase->NonQuery('\n            UPDATE\n                `PushRegistration`\n            SET\n                `Account` = null\n            WHERE\n                `Id` = ' . $objDatabase->SqlVariable($objPushRegistration->Id) . ' AND\n                `Account` = ' . $objDatabase->SqlVariable($this->intId) . '\n        ');\n    }\n\n    /**\n     * Unassociates all PushRegistrations\n     * @return void\n    */\n    public function UnassociateAllPushRegistrations() {\n        if ((is_null($this->intId)))\n            throw new dxUndefinedPrimaryKeyException('Unable to call UnassociatePushRegistration on this unsaved Account.');\n\n        // Get the Database Object for this Class\n        $objDatabase = Account::GetDatabase();\n\n        // Perform the SQL Query\n        $objDatabase->NonQuery('\n            UPDATE\n                `PushRegistration`\n            SET\n                `Account` = null\n            WHERE\n                `Account` = ' . $objDatabase->SqlVariable($this->intId) . '\n        ');\n    }\n\n    /**\n     * Deletes an associated PushRegistration\n     * @param PushRegistration $objPushRegistration\n     * @return void\n    */\n    public function DeleteAssociatedPushRegistration(PushRegistration $objPushRegistration) {\n        if ((is_null($this->intId)))\n            throw new dxUndefinedPrimaryKeyException('Unable to call UnassociatePushRegistration on this unsaved Account.');\n        if ((is_null($objPushRegistration->Id)))\n            throw new dxUndefinedPrimaryKeyException('Unable to call UnassociatePushRegistration on this Account with an unsaved PushRegistration.');\n\n        // Get the Database Object for this Class\n        $objDatabase = Account::GetDatabase();\n\n        // Perform the SQL Query\n        $objDatabase->NonQuery('\n            DELETE FROM\n                `PushRegistration`\n            WHERE\n                `Id` = ' . $objDatabase->SqlVariable($objPushRegistration->Id) . ' AND\n                `Account` = ' . $objDatabase->SqlVariable($this->intId) . '\n        ');\n    }\n\n    /**\n     * Deletes all associated PushRegistrations\n     * @return void\n    */\n    public function DeleteAllPushRegistrations() {\n        if ((is_null($this->intId)))\n            throw new dxUndefinedPrimaryKeyException('Unable to call UnassociatePushRegistration on this unsaved Account.');\n\n        // Get the Database Object for this Class\n        $objDatabase = Account::GetDatabase();\n\n        // Perform the SQL Query\n        $objDatabase->NonQuery('\n            DELETE FROM\n                `PushRegistration`\n            WHERE\n                `Account` = ' . $objDatabase->SqlVariable($this->intId) . '\n        ');\n    }\n\n\n    \n///////////////////////////////\n    // METHODS TO EXTRACT INFO ABOUT THE CLASS\n    ///////////////////////////////\n\n    /**\n     * Static method to retrieve the Database object that owns this class.\n     * @return string Name of the table from which this class has been created.\n     */\n    public static function GetTableName() {\n        return \"Account\";\n    }\n\n    /**\n     * Static method to retrieve the Table name from which this class has been created.\n     * @return string Name of the table from which this class has been created.\n     */\n    public static function GetDatabaseName() {\n        return ProjectFunctions::$Database[Account::GetDatabaseIndex()]->Database;\n    }\n\n    /**\n     * Static method to retrieve the Database index in the configuration.inc.php file.\n     * This can be useful when there are two databases of the same name which create\n     * confusion for the developer. There are no internal uses of this function but are\n     * here to help retrieve info if need be!\n     * @return int position or index of the database in the config file.\n     */\n    public static function GetDatabaseIndex() {\n        return 1;\n    }\n\n    ////////////////////////////////////////\n    // METHODS for SOAP-BASED WEB SERVICES\n    ////////////////////////////////////////\n\n    public static function GetSoapComplexTypeXml() {\n        $strToReturn = '<complexType name=\"Account\"><sequence>';\n        $strToReturn .= '<element name=\"Id\" type=\"xsd:int\"/>';\n        $strToReturn .= '<element name=\"FullName\" type=\"xsd:string\"/>';\n        $strToReturn .= '<element name=\"FirstName\" type=\"xsd:string\"/>';\n        $strToReturn .= '<element name=\"MiddleNames\" type=\"xsd:string\"/>';\n        $strToReturn .= '<element name=\"LastName\" type=\"xsd:string\"/>';\n        $strToReturn .= '<element name=\"EmailAddress\" type=\"xsd:string\"/>';\n        $strToReturn .= '<element name=\"Username\" type=\"xsd:string\"/>';\n        $strToReturn .= '<element name=\"Password\" type=\"xsd:string\"/>';\n        $strToReturn .= '<element name=\"MaidenName\" type=\"xsd:string\"/>';\n        $strToReturn .= '<element name=\"ProfilePicturePath\" type=\"xsd:string\"/>';\n        $strToReturn .= '<element name=\"MainContactNumber\" type=\"xsd:string\"/>';\n        $strToReturn .= '<element name=\"Title\" type=\"xsd:string\"/>';\n        $strToReturn .= '<element name=\"DateOfBirth\" type=\"xsd:dateTime\"/>';\n        $strToReturn .= '<element name=\"PhysicalAddressLineOne\" type=\"xsd:string\"/>';\n        $strToReturn .= '<element name=\"PhysicalAddressLineTwo\" type=\"xsd:string\"/>';\n        $strToReturn .= '<element name=\"PhysicalAddressPostalCode\" type=\"xsd:string\"/>';\n        $strToReturn .= '<element name=\"PhysicalAddressCountry\" type=\"xsd:string\"/>';\n        $strToReturn .= '<element name=\"PostalAddressLineOne\" type=\"xsd:string\"/>';\n        $strToReturn .= '<element name=\"PostalAddressLineTwo\" type=\"xsd:string\"/>';\n        $strToReturn .= '<element name=\"PostalAddressPostalCode\" type=\"xsd:string\"/>';\n        $strToReturn .= '<element name=\"PostalAddressCountry\" type=\"xsd:string\"/>';\n        $strToReturn .= '<element name=\"IdentificationNumber\" type=\"xsd:string\"/>';\n        $strToReturn .= '<element name=\"Nickname\" type=\"xsd:string\"/>';\n        $strToReturn .= '<element name=\"Status\" type=\"xsd:string\"/>';\n        $strToReturn .= '<element name=\"Gender\" type=\"xsd:string\"/>';\n        $strToReturn .= '<element name=\"AccessBlocked\" type=\"xsd:boolean\"/>';\n        $strToReturn .= '<element name=\"BlockedReason\" type=\"xsd:string\"/>';\n        $strToReturn .= '<element name=\"UserRoleObject\" type=\"xsd1:UserRole\"/>';\n        $strToReturn .= '<element name=\"SearchMetaInfo\" type=\"xsd:string\"/>';\n        $strToReturn .= '<element name=\"LastUpdated\" type=\"xsd:string\"/>';\n        $strToReturn .= '<element name=\"ObjectOwner\" type=\"xsd:int\"/>';\n        $strToReturn .= '<element name=\"__blnRestored\" type=\"xsd:boolean\"/>';\n        $strToReturn .= '</sequence></complexType>';\n        return $strToReturn;\n    }\n\n    public static function AlterSoapComplexTypeArray(&$strComplexTypeArray) {\n        if (!array_key_exists('Account', $strComplexTypeArray)) {\n            $strComplexTypeArray['Account'] = Account::GetSoapComplexTypeXml();\n            UserRole::AlterSoapComplexTypeArray($strComplexTypeArray);\n        }\n    }\n\n    public static function GetArrayFromSoapArray($objSoapArray) {\n        $objArrayToReturn = array();\n\n        foreach ($objSoapArray as $objSoapObject)\n            array_push($objArrayToReturn, Account::GetObjectFromSoapObject($objSoapObject));\n\n        return $objArrayToReturn;\n    }\n\n    public static function GetObjectFromSoapObject($objSoapObject) {\n        $objToReturn = new Account();\n        if (property_exists($objSoapObject, 'Id'))\n            $objToReturn->intId = $objSoapObject->Id;\n        if (property_exists($objSoapObject, 'FullName'))\n            $objToReturn->strFullName = $objSoapObject->FullName;\n        if (property_exists($objSoapObject, 'FirstName'))\n            $objToReturn->strFirstName = $objSoapObject->FirstName;\n        if (property_exists($objSoapObject, 'MiddleNames'))\n            $objToReturn->strMiddleNames = $objSoapObject->MiddleNames;\n        if (property_exists($objSoapObject, 'LastName'))\n            $objToReturn->strLastName = $objSoapObject->LastName;\n        if (property_exists($objSoapObject, 'EmailAddress'))\n            $objToReturn->strEmailAddress = $objSoapObject->EmailAddress;\n        if (property_exists($objSoapObject, 'Username'))\n            $objToReturn->strUsername = $objSoapObject->Username;\n        if (property_exists($objSoapObject, 'Password'))\n            $objToReturn->strPassword = $objSoapObject->Password;\n        if (property_exists($objSoapObject, 'MaidenName'))\n            $objToReturn->strMaidenName = $objSoapObject->MaidenName;\n        if (property_exists($objSoapObject, 'ProfilePicturePath'))\n            $objToReturn->strProfilePicturePath = $objSoapObject->ProfilePicturePath;\n        if (property_exists($objSoapObject, 'MainContactNumber'))\n            $objToReturn->strMainContactNumber = $objSoapObject->MainContactNumber;\n        if (property_exists($objSoapObject, 'Title'))\n            $objToReturn->strTitle = $objSoapObject->Title;\n        if (property_exists($objSoapObject, 'DateOfBirth'))\n            $objToReturn->dttDateOfBirth = new dxDateTime($objSoapObject->DateOfBirth);\n        if (property_exists($objSoapObject, 'PhysicalAddressLineOne'))\n            $objToReturn->strPhysicalAddressLineOne = $objSoapObject->PhysicalAddressLineOne;\n        if (property_exists($objSoapObject, 'PhysicalAddressLineTwo'))\n            $objToReturn->strPhysicalAddressLineTwo = $objSoapObject->PhysicalAddressLineTwo;\n        if (property_exists($objSoapObject, 'PhysicalAddressPostalCode'))\n            $objToReturn->strPhysicalAddressPostalCode = $objSoapObject->PhysicalAddressPostalCode;\n        if (property_exists($objSoapObject, 'PhysicalAddressCountry'))\n            $objToReturn->strPhysicalAddressCountry = $objSoapObject->PhysicalAddressCountry;\n        if (property_exists($objSoapObject, 'PostalAddressLineOne'))\n            $objToReturn->strPostalAddressLineOne = $objSoapObject->PostalAddressLineOne;\n        if (property_exists($objSoapObject, 'PostalAddressLineTwo'))\n            $objToReturn->strPostalAddressLineTwo = $objSoapObject->PostalAddressLineTwo;\n        if (property_exists($objSoapObject, 'PostalAddressPostalCode'))\n            $objToReturn->strPostalAddressPostalCode = $objSoapObject->PostalAddressPostalCode;\n        if (property_exists($objSoapObject, 'PostalAddressCountry'))\n            $objToReturn->strPostalAddressCountry = $objSoapObject->PostalAddressCountry;\n        if (property_exists($objSoapObject, 'IdentificationNumber'))\n            $objToReturn->strIdentificationNumber = $objSoapObject->IdentificationNumber;\n        if (property_exists($objSoapObject, 'Nickname'))\n            $objToReturn->strNickname = $objSoapObject->Nickname;\n        if (property_exists($objSoapObject, 'Status'))\n            $objToReturn->strStatus = $objSoapObject->Status;\n        if (property_exists($objSoapObject, 'Gender'))\n            $objToReturn->strGender = $objSoapObject->Gender;\n        if (property_exists($objSoapObject, 'AccessBlocked'))\n            $objToReturn->blnAccessBlocked = $objSoapObject->AccessBlocked;\n        if (property_exists($objSoapObject, 'BlockedReason'))\n            $objToReturn->strBlockedReason = $objSoapObject->BlockedReason;\n        if ((property_exists($objSoapObject, 'UserRoleObject')) &&\n            ($objSoapObject->UserRoleObject))\n            $objToReturn->UserRoleObject = UserRole::GetObjectFromSoapObject($objSoapObject->UserRoleObject);\n        if (property_exists($objSoapObject, 'SearchMetaInfo'))\n            $objToReturn->strSearchMetaInfo = $objSoapObject->SearchMetaInfo;\n        if (property_exists($objSoapObject, 'LastUpdated'))\n            $objToReturn->strLastUpdated = $objSoapObject->LastUpdated;\n        if (property_exists($objSoapObject, 'ObjectOwner'))\n            $objToReturn->intObjectOwner = $objSoapObject->ObjectOwner;\n        if (property_exists($objSoapObject, '__blnRestored'))\n            $objToReturn->__blnRestored = $objSoapObject->__blnRestored;\n        return $objToReturn;\n    }\n\n    public static function GetSoapArrayFromArray($objArray) {\n        if (!$objArray)\n            return null;\n\n        $objArrayToReturn = array();\n\n        foreach ($objArray as $objObject)\n            array_push($objArrayToReturn, Account::GetSoapObjectFromObject($objObject, true));\n\n        return unserialize(serialize($objArrayToReturn));\n    }\n\n    public static function GetSoapObjectFromObject($objObject, $blnBindRelatedObjects) {\n        if ($objObject->dttDateOfBirth)\n            $objObject->dttDateOfBirth = $objObject->dttDateOfBirth->qFormat(dxDateTime::FormatSoap);\n        if ($objObject->objUserRoleObject)\n            $objObject->objUserRoleObject = UserRole::GetSoapObjectFromObject($objObject->objUserRoleObject, false);\n        else if (!$blnBindRelatedObjects)\n            $objObject->intUserRole = null;\n        return $objObject;\n    }\n\n\n    ////////////////////////////////////////\n    // METHODS for JSON Object Translation\n    ////////////////////////////////////////\n\n    // this function is required for objects that implement the\n    // IteratorAggregate interface\n    public function getIterator() {\n        ///////////////////\n        // Member Variables\n        ///////////////////\n        $iArray['Id'] = $this->intId;\n        $iArray['FullName'] = $this->strFullName;\n        $iArray['FirstName'] = $this->strFirstName;\n        $iArray['MiddleNames'] = $this->strMiddleNames;\n        $iArray['LastName'] = $this->strLastName;\n        $iArray['EmailAddress'] = $this->strEmailAddress;\n        $iArray['Username'] = $this->strUsername;\n        $iArray['Password'] = $this->strPassword;\n        $iArray['MaidenName'] = $this->strMaidenName;\n        $iArray['ProfilePicturePath'] = $this->strProfilePicturePath;\n        $iArray['MainContactNumber'] = $this->strMainContactNumber;\n        $iArray['Title'] = $this->strTitle;\n        $iArray['DateOfBirth'] = $this->dttDateOfBirth;\n        $iArray['PhysicalAddressLineOne'] = $this->strPhysicalAddressLineOne;\n        $iArray['PhysicalAddressLineTwo'] = $this->strPhysicalAddressLineTwo;\n        $iArray['PhysicalAddressPostalCode'] = $this->strPhysicalAddressPostalCode;\n        $iArray['PhysicalAddressCountry'] = $this->strPhysicalAddressCountry;\n        $iArray['PostalAddressLineOne'] = $this->strPostalAddressLineOne;\n        $iArray['PostalAddressLineTwo'] = $this->strPostalAddressLineTwo;\n        $iArray['PostalAddressPostalCode'] = $this->strPostalAddressPostalCode;\n        $iArray['PostalAddressCountry'] = $this->strPostalAddressCountry;\n        $iArray['IdentificationNumber'] = $this->strIdentificationNumber;\n        $iArray['Nickname'] = $this->strNickname;\n        $iArray['Status'] = $this->strStatus;\n        $iArray['Gender'] = $this->strGender;\n        $iArray['AccessBlocked'] = $this->blnAccessBlocked;\n        $iArray['BlockedReason'] = $this->strBlockedReason;\n        $iArray['UserRole'] = $this->intUserRole;\n        $iArray['SearchMetaInfo'] = $this->strSearchMetaInfo;\n        $iArray['LastUpdated'] = $this->strLastUpdated;\n        $iArray['ObjectOwner'] = $this->intObjectOwner;\n        return new ArrayIterator($iArray);\n    }\n\n    // this function returns a Json formatted string using the\n    // IteratorAggregate interface\n    public function getJson() {\n        return json_encode($this->getIterator());\n    }\n\n    /**\n     * Default \"toJsObject\" handler\n     * Specifies how the object should be displayed in JQuery UI lists and menus. Note that these lists use\n     * value and label differently.\n     *\n     * value \t= The short form of what to display in the list and selection.\n     * label \t= [optional] If defined, is what is displayed in the menu\n     * id \t\t= Primary key of object.\n     *\n     * @return an array that specifies how to display the object\n     */\n    public function toJsObject () {\n        return JavaScriptHelper::toJsObject(array('value' => $this->__toString(), 'id' =>  $this->intId ));\n    }\n\n\n}\n\n/////////////////////////////////////\n\t// ADDITIONAL CLASSES for DIVBLOX QUERY\n\t/////////////////////////////////////\n\n    /**\n     * @uses dxQueryNode\n     *\n     * @property-read dxQueryNode $Id\n     * @property-read dxQueryNode $FullName\n     * @property-read dxQueryNode $FirstName\n     * @property-read dxQueryNode $MiddleNames\n     * @property-read dxQueryNode $LastName\n     * @property-read dxQueryNode $EmailAddress\n     * @property-read dxQueryNode $Username\n     * @property-read dxQueryNode $Password\n     * @property-read dxQueryNode $MaidenName\n     * @property-read dxQueryNode $ProfilePicturePath\n     * @property-read dxQueryNode $MainContactNumber\n     * @property-read dxQueryNode $Title\n     * @property-read dxQueryNode $DateOfBirth\n     * @property-read dxQueryNode $PhysicalAddressLineOne\n     * @property-read dxQueryNode $PhysicalAddressLineTwo\n     * @property-read dxQueryNode $PhysicalAddressPostalCode\n     * @property-read dxQueryNode $PhysicalAddressCountry\n     * @property-read dxQueryNode $PostalAddressLineOne\n     * @property-read dxQueryNode $PostalAddressLineTwo\n     * @property-read dxQueryNode $PostalAddressPostalCode\n     * @property-read dxQueryNode $PostalAddressCountry\n     * @property-read dxQueryNode $IdentificationNumber\n     * @property-read dxQueryNode $Nickname\n     * @property-read dxQueryNode $Status\n     * @property-read dxQueryNode $Gender\n     * @property-read dxQueryNode $AccessBlocked\n     * @property-read dxQueryNode $BlockedReason\n     * @property-read dxQueryNode $UserRole\n     * @property-read dxQueryNodeUserRole $UserRoleObject\n     * @property-read dxQueryNode $SearchMetaInfo\n     * @property-read dxQueryNode $LastUpdated\n     * @property-read dxQueryNode $ObjectOwner\n     *\n     *\n     * @property-read dxQueryReverseReferenceNodeAdditionalAccountInformation $AdditionalAccountInformation\n     * @property-read dxQueryReverseReferenceNodeClientConnection $ClientConnection\n     * @property-read dxQueryReverseReferenceNodePasswordReset $PasswordReset\n     * @property-read dxQueryReverseReferenceNodePushRegistration $PushRegistration\n\n     * @property-read dxQueryNode $_PrimaryKeyNode\n     **/\n\tclass dxQueryNodeAccount extends dxQueryNode {\n\t\tprotected $strTableName = 'Account';\n\t\tprotected $strPrimaryKey = 'Id';\n\t\tprotected $strClassName = 'Account';\n\t\tpublic function __get($strName) {\n\t\t\tswitch ($strName) {\n\t\t\t\tcase 'Id':\n\t\t\t\t\treturn new dxQueryNode('Id', 'Id', 'Integer', $this);\n\t\t\t\tcase 'FullName':\n\t\t\t\t\treturn new dxQueryNode('FullName', 'FullName', 'VarChar', $this);\n\t\t\t\tcase 'FirstName':\n\t\t\t\t\treturn new dxQueryNode('FirstName', 'FirstName', 'VarChar', $this);\n\t\t\t\tcase 'MiddleNames':\n\t\t\t\t\treturn new dxQueryNode('MiddleNames', 'MiddleNames', 'VarChar', $this);\n\t\t\t\tcase 'LastName':\n\t\t\t\t\treturn new dxQueryNode('LastName', 'LastName', 'VarChar', $this);\n\t\t\t\tcase 'EmailAddress':\n\t\t\t\t\treturn new dxQueryNode('EmailAddress', 'EmailAddress', 'VarChar', $this);\n\t\t\t\tcase 'Username':\n\t\t\t\t\treturn new dxQueryNode('Username', 'Username', 'VarChar', $this);\n\t\t\t\tcase 'Password':\n\t\t\t\t\treturn new dxQueryNode('Password', 'Password', 'VarChar', $this);\n\t\t\t\tcase 'MaidenName':\n\t\t\t\t\treturn new dxQueryNode('MaidenName', 'MaidenName', 'VarChar', $this);\n\t\t\t\tcase 'ProfilePicturePath':\n\t\t\t\t\treturn new dxQueryNode('ProfilePicturePath', 'ProfilePicturePath', 'VarChar', $this);\n\t\t\t\tcase 'MainContactNumber':\n\t\t\t\t\treturn new dxQueryNode('MainContactNumber', 'MainContactNumber', 'VarChar', $this);\n\t\t\t\tcase 'Title':\n\t\t\t\t\treturn new dxQueryNode('Title', 'Title', 'VarChar', $this);\n\t\t\t\tcase 'DateOfBirth':\n\t\t\t\t\treturn new dxQueryNode('DateOfBirth', 'DateOfBirth', 'Date', $this);\n\t\t\t\tcase 'PhysicalAddressLineOne':\n\t\t\t\t\treturn new dxQueryNode('PhysicalAddressLineOne', 'PhysicalAddressLineOne', 'VarChar', $this);\n\t\t\t\tcase 'PhysicalAddressLineTwo':\n\t\t\t\t\treturn new dxQueryNode('PhysicalAddressLineTwo', 'PhysicalAddressLineTwo', 'VarChar', $this);\n\t\t\t\tcase 'PhysicalAddressPostalCode':\n\t\t\t\t\treturn new dxQueryNode('PhysicalAddressPostalCode', 'PhysicalAddressPostalCode', 'VarChar', $this);\n\t\t\t\tcase 'PhysicalAddressCountry':\n\t\t\t\t\treturn new dxQueryNode('PhysicalAddressCountry', 'PhysicalAddressCountry', 'VarChar', $this);\n\t\t\t\tcase 'PostalAddressLineOne':\n\t\t\t\t\treturn new dxQueryNode('PostalAddressLineOne', 'PostalAddressLineOne', 'VarChar', $this);\n\t\t\t\tcase 'PostalAddressLineTwo':\n\t\t\t\t\treturn new dxQueryNode('PostalAddressLineTwo', 'PostalAddressLineTwo', 'VarChar', $this);\n\t\t\t\tcase 'PostalAddressPostalCode':\n\t\t\t\t\treturn new dxQueryNode('PostalAddressPostalCode', 'PostalAddressPostalCode', 'VarChar', $this);\n\t\t\t\tcase 'PostalAddressCountry':\n\t\t\t\t\treturn new dxQueryNode('PostalAddressCountry', 'PostalAddressCountry', 'VarChar', $this);\n\t\t\t\tcase 'IdentificationNumber':\n\t\t\t\t\treturn new dxQueryNode('IdentificationNumber', 'IdentificationNumber', 'VarChar', $this);\n\t\t\t\tcase 'Nickname':\n\t\t\t\t\treturn new dxQueryNode('Nickname', 'Nickname', 'VarChar', $this);\n\t\t\t\tcase 'Status':\n\t\t\t\t\treturn new dxQueryNode('Status', 'Status', 'VarChar', $this);\n\t\t\t\tcase 'Gender':\n\t\t\t\t\treturn new dxQueryNode('Gender', 'Gender', 'VarChar', $this);\n\t\t\t\tcase 'AccessBlocked':\n\t\t\t\t\treturn new dxQueryNode('AccessBlocked', 'AccessBlocked', 'Bit', $this);\n\t\t\t\tcase 'BlockedReason':\n\t\t\t\t\treturn new dxQueryNode('BlockedReason', 'BlockedReason', 'Blob', $this);\n\t\t\t\tcase 'UserRole':\n\t\t\t\t\treturn new dxQueryNode('UserRole', 'UserRole', 'Integer', $this);\n\t\t\t\tcase 'UserRoleObject':\n\t\t\t\t\treturn new dxQueryNodeUserRole('UserRole', 'UserRoleObject', 'Integer', $this);\n\t\t\t\tcase 'SearchMetaInfo':\n\t\t\t\t\treturn new dxQueryNode('SearchMetaInfo', 'SearchMetaInfo', 'Blob', $this);\n\t\t\t\tcase 'LastUpdated':\n\t\t\t\t\treturn new dxQueryNode('LastUpdated', 'LastUpdated', 'VarChar', $this);\n\t\t\t\tcase 'ObjectOwner':\n\t\t\t\t\treturn new dxQueryNode('ObjectOwner', 'ObjectOwner', 'Integer', $this);\n\t\t\t\tcase 'AdditionalAccountInformation':\n\t\t\t\t\treturn new dxQueryReverseReferenceNodeAdditionalAccountInformation($this, 'additionalaccountinformation', 'reverse_reference', 'Account', 'AdditionalAccountInformation');\n\t\t\t\tcase 'ClientConnection':\n\t\t\t\t\treturn new dxQueryReverseReferenceNodeClientConnection($this, 'clientconnection', 'reverse_reference', 'Account', 'ClientConnection');\n\t\t\t\tcase 'PasswordReset':\n\t\t\t\t\treturn new dxQueryReverseReferenceNodePasswordReset($this, 'passwordreset', 'reverse_reference', 'Account', 'PasswordReset');\n\t\t\t\tcase 'PushRegistration':\n\t\t\t\t\treturn new dxQueryReverseReferenceNodePushRegistration($this, 'pushregistration', 'reverse_reference', 'Account', 'PushRegistration');\n\n\t\t\t\tcase '_PrimaryKeyNode':\n\t\t\t\t\treturn new dxQueryNode('Id', 'Id', 'Integer', $this);\n\t\t\t\tdefault:\n\t\t\t\t\ttry {\n\t\t\t\t\t\treturn parent::__get($strName);\n\t\t\t\t\t} catch (dxCallerException $objExc) {\n\t\t\t\t\t\t$objExc->IncrementOffset();\n\t\t\t\t\t\tthrow $objExc;\n\t\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n    /**\n     * @property-read dxQueryNode $Id\n     * @property-read dxQueryNode $FullName\n     * @property-read dxQueryNode $FirstName\n     * @property-read dxQueryNode $MiddleNames\n     * @property-read dxQueryNode $LastName\n     * @property-read dxQueryNode $EmailAddress\n     * @property-read dxQueryNode $Username\n     * @property-read dxQueryNode $Password\n     * @property-read dxQueryNode $MaidenName\n     * @property-read dxQueryNode $ProfilePicturePath\n     * @property-read dxQueryNode $MainContactNumber\n     * @property-read dxQueryNode $Title\n     * @property-read dxQueryNode $DateOfBirth\n     * @property-read dxQueryNode $PhysicalAddressLineOne\n     * @property-read dxQueryNode $PhysicalAddressLineTwo\n     * @property-read dxQueryNode $PhysicalAddressPostalCode\n     * @property-read dxQueryNode $PhysicalAddressCountry\n     * @property-read dxQueryNode $PostalAddressLineOne\n     * @property-read dxQueryNode $PostalAddressLineTwo\n     * @property-read dxQueryNode $PostalAddressPostalCode\n     * @property-read dxQueryNode $PostalAddressCountry\n     * @property-read dxQueryNode $IdentificationNumber\n     * @property-read dxQueryNode $Nickname\n     * @property-read dxQueryNode $Status\n     * @property-read dxQueryNode $Gender\n     * @property-read dxQueryNode $AccessBlocked\n     * @property-read dxQueryNode $BlockedReason\n     * @property-read dxQueryNode $UserRole\n     * @property-read dxQueryNodeUserRole $UserRoleObject\n     * @property-read dxQueryNode $SearchMetaInfo\n     * @property-read dxQueryNode $LastUpdated\n     * @property-read dxQueryNode $ObjectOwner\n     *\n     *\n     * @property-read dxQueryReverseReferenceNodeAdditionalAccountInformation $AdditionalAccountInformation\n     * @property-read dxQueryReverseReferenceNodeClientConnection $ClientConnection\n     * @property-read dxQueryReverseReferenceNodePasswordReset $PasswordReset\n     * @property-read dxQueryReverseReferenceNodePushRegistration $PushRegistration\n\n     * @property-read dxQueryNode $_PrimaryKeyNode\n     **/\n\tclass dxQueryReverseReferenceNodeAccount extends dxQueryReverseReferenceNode {\n\t\tprotected $strTableName = 'Account';\n\t\tprotected $strPrimaryKey = 'Id';\n\t\tprotected $strClassName = 'Account';\n\t\tpublic function __get($strName) {\n\t\t\tswitch ($strName) {\n\t\t\t\tcase 'Id':\n\t\t\t\t\treturn new dxQueryNode('Id', 'Id', 'integer', $this);\n\t\t\t\tcase 'FullName':\n\t\t\t\t\treturn new dxQueryNode('FullName', 'FullName', 'string', $this);\n\t\t\t\tcase 'FirstName':\n\t\t\t\t\treturn new dxQueryNode('FirstName', 'FirstName', 'string', $this);\n\t\t\t\tcase 'MiddleNames':\n\t\t\t\t\treturn new dxQueryNode('MiddleNames', 'MiddleNames', 'string', $this);\n\t\t\t\tcase 'LastName':\n\t\t\t\t\treturn new dxQueryNode('LastName', 'LastName', 'string', $this);\n\t\t\t\tcase 'EmailAddress':\n\t\t\t\t\treturn new dxQueryNode('EmailAddress', 'EmailAddress', 'string', $this);\n\t\t\t\tcase 'Username':\n\t\t\t\t\treturn new dxQueryNode('Username', 'Username', 'string', $this);\n\t\t\t\tcase 'Password':\n\t\t\t\t\treturn new dxQueryNode('Password', 'Password', 'string', $this);\n\t\t\t\tcase 'MaidenName':\n\t\t\t\t\treturn new dxQueryNode('MaidenName', 'MaidenName', 'string', $this);\n\t\t\t\tcase 'ProfilePicturePath':\n\t\t\t\t\treturn new dxQueryNode('ProfilePicturePath', 'ProfilePicturePath', 'string', $this);\n\t\t\t\tcase 'MainContactNumber':\n\t\t\t\t\treturn new dxQueryNode('MainContactNumber', 'MainContactNumber', 'string', $this);\n\t\t\t\tcase 'Title':\n\t\t\t\t\treturn new dxQueryNode('Title', 'Title', 'string', $this);\n\t\t\t\tcase 'DateOfBirth':\n\t\t\t\t\treturn new dxQueryNode('DateOfBirth', 'DateOfBirth', 'dxDateTime', $this);\n\t\t\t\tcase 'PhysicalAddressLineOne':\n\t\t\t\t\treturn new dxQueryNode('PhysicalAddressLineOne', 'PhysicalAddressLineOne', 'string', $this);\n\t\t\t\tcase 'PhysicalAddressLineTwo':\n\t\t\t\t\treturn new dxQueryNode('PhysicalAddressLineTwo', 'PhysicalAddressLineTwo', 'string', $this);\n\t\t\t\tcase 'PhysicalAddressPostalCode':\n\t\t\t\t\treturn new dxQueryNode('PhysicalAddressPostalCode', 'PhysicalAddressPostalCode', 'string', $this);\n\t\t\t\tcase 'PhysicalAddressCountry':\n\t\t\t\t\treturn new dxQueryNode('PhysicalAddressCountry', 'PhysicalAddressCountry', 'string', $this);\n\t\t\t\tcase 'PostalAddressLineOne':\n\t\t\t\t\treturn new dxQueryNode('PostalAddressLineOne', 'PostalAddressLineOne', 'string', $this);\n\t\t\t\tcase 'PostalAddressLineTwo':\n\t\t\t\t\treturn new dxQueryNode('PostalAddressLineTwo', 'PostalAddressLineTwo', 'string', $this);\n\t\t\t\tcase 'PostalAddressPostalCode':\n\t\t\t\t\treturn new dxQueryNode('PostalAddressPostalCode', 'PostalAddressPostalCode', 'string', $this);\n\t\t\t\tcase 'PostalAddressCountry':\n\t\t\t\t\treturn new dxQueryNode('PostalAddressCountry', 'PostalAddressCountry', 'string', $this);\n\t\t\t\tcase 'IdentificationNumber':\n\t\t\t\t\treturn new dxQueryNode('IdentificationNumber', 'IdentificationNumber', 'string', $this);\n\t\t\t\tcase 'Nickname':\n\t\t\t\t\treturn new dxQueryNode('Nickname', 'Nickname', 'string', $this);\n\t\t\t\tcase 'Status':\n\t\t\t\t\treturn new dxQueryNode('Status', 'Status', 'string', $this);\n\t\t\t\tcase 'Gender':\n\t\t\t\t\treturn new dxQueryNode('Gender', 'Gender', 'string', $this);\n\t\t\t\tcase 'AccessBlocked':\n\t\t\t\t\treturn new dxQueryNode('AccessBlocked', 'AccessBlocked', 'boolean', $this);\n\t\t\t\tcase 'BlockedReason':\n\t\t\t\t\treturn new dxQueryNode('BlockedReason', 'BlockedReason', 'string', $this);\n\t\t\t\tcase 'UserRole':\n\t\t\t\t\treturn new dxQueryNode('UserRole', 'UserRole', 'integer', $this);\n\t\t\t\tcase 'UserRoleObject':\n\t\t\t\t\treturn new dxQueryNodeUserRole('UserRole', 'UserRoleObject', 'integer', $this);\n\t\t\t\tcase 'SearchMetaInfo':\n\t\t\t\t\treturn new dxQueryNode('SearchMetaInfo', 'SearchMetaInfo', 'string', $this);\n\t\t\t\tcase 'LastUpdated':\n\t\t\t\t\treturn new dxQueryNode('LastUpdated', 'LastUpdated', 'string', $this);\n\t\t\t\tcase 'ObjectOwner':\n\t\t\t\t\treturn new dxQueryNode('ObjectOwner', 'ObjectOwner', 'integer', $this);\n\t\t\t\tcase 'AdditionalAccountInformation':\n\t\t\t\t\treturn new dxQueryReverseReferenceNodeAdditionalAccountInformation($this, 'additionalaccountinformation', 'reverse_reference', 'Account', 'AdditionalAccountInformation');\n\t\t\t\tcase 'ClientConnection':\n\t\t\t\t\treturn new dxQueryReverseReferenceNodeClientConnection($this, 'clientconnection', 'reverse_reference', 'Account', 'ClientConnection');\n\t\t\t\tcase 'PasswordReset':\n\t\t\t\t\treturn new dxQueryReverseReferenceNodePasswordReset($this, 'passwordreset', 'reverse_reference', 'Account', 'PasswordReset');\n\t\t\t\tcase 'PushRegistration':\n\t\t\t\t\treturn new dxQueryReverseReferenceNodePushRegistration($this, 'pushregistration', 'reverse_reference', 'Account', 'PushRegistration');\n\n\t\t\t\tcase '_PrimaryKeyNode':\n\t\t\t\t\treturn new dxQueryNode('Id', 'Id', 'integer', $this);\n\t\t\t\tdefault:\n\t\t\t\t\ttry {\n\t\t\t\t\t\treturn parent::__get($strName);\n\t\t\t\t\t} catch (dxCallerException $objExc) {\n\t\t\t\t\t\t$objExc->IncrementOffset();\n\t\t\t\t\t\tthrow $objExc;\n\t\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n?>\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- divblox/config/database/data_model_orm/generated/AccountGen.class.php	(revision 8088b90ea0ab6ee30e69c949666fde75c4664610)
+++ divblox/config/database/data_model_orm/generated/AccountGen.class.php	(date 1589789351158)
@@ -42,9 +42,9 @@
  * @property string $Gender the value for strGender 
  * @property boolean $AccessBlocked the value for blnAccessBlocked 
  * @property string $BlockedReason the value for strBlockedReason 
+ * @property-read string $LastUpdated the value for strLastUpdated (Read-Only Timestamp)
  * @property integer $UserRole the value for intUserRole 
  * @property string $SearchMetaInfo the value for strSearchMetaInfo 
- * @property-read string $LastUpdated the value for strLastUpdated (Read-Only Timestamp)
  * @property integer $ObjectOwner the value for intObjectOwner 
  * @property UserRole $UserRoleObject the value for the UserRole object referenced by intUserRole 
  * @property-read AdditionalAccountInformation $_AdditionalAccountInformation the value for the private _objAdditionalAccountInformation (Read-Only) if set due to an expansion on the AdditionalAccountInformation.Account reverse relationship
@@ -302,6 +302,14 @@
     const BlockedReasonDefault = null;
 
 
+    /**
+     * Protected member variable that maps to the database column Account.LastUpdated
+     * @var string strLastUpdated
+     */
+    protected $strLastUpdated;
+    const LastUpdatedDefault = null;
+
+
     /**
      * Protected member variable that maps to the database column Account.UserRole
      * @var integer intUserRole
@@ -318,14 +326,6 @@
     const SearchMetaInfoDefault = null;
 
 
-    /**
-     * Protected member variable that maps to the database column Account.LastUpdated
-     * @var string strLastUpdated
-     */
-    protected $strLastUpdated;
-    const LastUpdatedDefault = null;
-
-
     /**
      * Protected member variable that maps to the database column Account.ObjectOwner
      * @var integer intObjectOwner
@@ -459,9 +459,9 @@
         $this->strGender = Account::GenderDefault;
         $this->blnAccessBlocked = Account::AccessBlockedDefault;
         $this->strBlockedReason = Account::BlockedReasonDefault;
+        $this->strLastUpdated = Account::LastUpdatedDefault;
         $this->intUserRole = Account::UserRoleDefault;
         $this->strSearchMetaInfo = Account::SearchMetaInfoDefault;
-        $this->strLastUpdated = Account::LastUpdatedDefault;
         $this->intObjectOwner = Account::ObjectOwnerDefault;
     }
 
@@ -826,9 +826,9 @@
             $objBuilder->AddSelectItem($strTableName, 'Gender', $strAliasPrefix . 'Gender');
             $objBuilder->AddSelectItem($strTableName, 'AccessBlocked', $strAliasPrefix . 'AccessBlocked');
             $objBuilder->AddSelectItem($strTableName, 'BlockedReason', $strAliasPrefix . 'BlockedReason');
+            $objBuilder->AddSelectItem($strTableName, 'LastUpdated', $strAliasPrefix . 'LastUpdated');
             $objBuilder->AddSelectItem($strTableName, 'UserRole', $strAliasPrefix . 'UserRole');
             $objBuilder->AddSelectItem($strTableName, 'SearchMetaInfo', $strAliasPrefix . 'SearchMetaInfo');
-            $objBuilder->AddSelectItem($strTableName, 'LastUpdated', $strAliasPrefix . 'LastUpdated');
             $objBuilder->AddSelectItem($strTableName, 'ObjectOwner', $strAliasPrefix . 'ObjectOwner');
         }
     }
@@ -1032,15 +1032,15 @@
         $strAlias = $strAliasPrefix . 'BlockedReason';
         $strAliasName = !empty($strColumnAliasArray[$strAlias]) ? $strColumnAliasArray[$strAlias] : $strAlias;
         $objToReturn->strBlockedReason = $objDbRow->GetColumn($strAliasName, 'Blob');
+        $strAlias = $strAliasPrefix . 'LastUpdated';
+        $strAliasName = !empty($strColumnAliasArray[$strAlias]) ? $strColumnAliasArray[$strAlias] : $strAlias;
+        $objToReturn->strLastUpdated = $objDbRow->GetColumn($strAliasName, 'VarChar');
         $strAlias = $strAliasPrefix . 'UserRole';
         $strAliasName = !empty($strColumnAliasArray[$strAlias]) ? $strColumnAliasArray[$strAlias] : $strAlias;
         $objToReturn->intUserRole = $objDbRow->GetColumn($strAliasName, 'Integer');
         $strAlias = $strAliasPrefix . 'SearchMetaInfo';
         $strAliasName = !empty($strColumnAliasArray[$strAlias]) ? $strColumnAliasArray[$strAlias] : $strAlias;
         $objToReturn->strSearchMetaInfo = $objDbRow->GetColumn($strAliasName, 'Blob');
-        $strAlias = $strAliasPrefix . 'LastUpdated';
-        $strAliasName = !empty($strColumnAliasArray[$strAlias]) ? $strColumnAliasArray[$strAlias] : $strAlias;
-        $objToReturn->strLastUpdated = $objDbRow->GetColumn($strAliasName, 'VarChar');
         $strAlias = $strAliasPrefix . 'ObjectOwner';
         $strAliasName = !empty($strColumnAliasArray[$strAlias]) ? $strColumnAliasArray[$strAlias] : $strAlias;
         $objToReturn->intObjectOwner = $objDbRow->GetColumn($strAliasName, 'Integer');
@@ -1339,9 +1339,9 @@
             $ChangedArray = array_merge($ChangedArray,array("Gender" => $this->strGender));
             $ChangedArray = array_merge($ChangedArray,array("AccessBlocked" => $this->blnAccessBlocked));
             $ChangedArray = array_merge($ChangedArray,array("BlockedReason" => $this->strBlockedReason));
+            $ChangedArray = array_merge($ChangedArray,array("LastUpdated" => $this->strLastUpdated));
             $ChangedArray = array_merge($ChangedArray,array("UserRole" => $this->intUserRole));
             $ChangedArray = array_merge($ChangedArray,array("SearchMetaInfo" => $this->strSearchMetaInfo));
-            $ChangedArray = array_merge($ChangedArray,array("LastUpdated" => $this->strLastUpdated));
             $ChangedArray = array_merge($ChangedArray,array("ObjectOwner" => $this->intObjectOwner));
             $newAuditLogEntry->AuditLogEntryDetail = json_encode($ChangedArray);
         } else {
@@ -1562,6 +1562,14 @@
                 $ChangedArray = array_merge($ChangedArray,array("BlockedReason" => array("Before" => $ExistingValueStr,"After" => $this->strBlockedReason)));
                 //$ChangedArray = array_merge($ChangedArray,array("BlockedReason" => "From: ".$ExistingValueStr." to: ".$this->strBlockedReason));
             }
+            $ExistingValueStr = "NULL";
+            if (!is_null($ExistingObj->LastUpdated)) {
+                $ExistingValueStr = $ExistingObj->LastUpdated;
+            }
+            if ($ExistingObj->LastUpdated != $this->strLastUpdated) {
+                $ChangedArray = array_merge($ChangedArray,array("LastUpdated" => array("Before" => $ExistingValueStr,"After" => $this->strLastUpdated)));
+                //$ChangedArray = array_merge($ChangedArray,array("LastUpdated" => "From: ".$ExistingValueStr." to: ".$this->strLastUpdated));
+            }
             $ExistingValueStr = "NULL";
             if (!is_null($ExistingObj->UserRole)) {
                 $ExistingValueStr = $ExistingObj->UserRole;
@@ -1578,14 +1586,6 @@
                 $ChangedArray = array_merge($ChangedArray,array("SearchMetaInfo" => array("Before" => $ExistingValueStr,"After" => $this->strSearchMetaInfo)));
                 //$ChangedArray = array_merge($ChangedArray,array("SearchMetaInfo" => "From: ".$ExistingValueStr." to: ".$this->strSearchMetaInfo));
             }
-            $ExistingValueStr = "NULL";
-            if (!is_null($ExistingObj->LastUpdated)) {
-                $ExistingValueStr = $ExistingObj->LastUpdated;
-            }
-            if ($ExistingObj->LastUpdated != $this->strLastUpdated) {
-                $ChangedArray = array_merge($ChangedArray,array("LastUpdated" => array("Before" => $ExistingValueStr,"After" => $this->strLastUpdated)));
-                //$ChangedArray = array_merge($ChangedArray,array("LastUpdated" => "From: ".$ExistingValueStr." to: ".$this->strLastUpdated));
-            }
             $ExistingValueStr = "NULL";
             if (!is_null($ExistingObj->ObjectOwner)) {
                 $ExistingValueStr = $ExistingObj->ObjectOwner;
@@ -1798,9 +1798,9 @@
         $ChangedArray = array_merge($ChangedArray,array("Gender" => $this->strGender));
         $ChangedArray = array_merge($ChangedArray,array("AccessBlocked" => $this->blnAccessBlocked));
         $ChangedArray = array_merge($ChangedArray,array("BlockedReason" => $this->strBlockedReason));
+        $ChangedArray = array_merge($ChangedArray,array("LastUpdated" => $this->strLastUpdated));
         $ChangedArray = array_merge($ChangedArray,array("UserRole" => $this->intUserRole));
         $ChangedArray = array_merge($ChangedArray,array("SearchMetaInfo" => $this->strSearchMetaInfo));
-        $ChangedArray = array_merge($ChangedArray,array("LastUpdated" => $this->strLastUpdated));
         $ChangedArray = array_merge($ChangedArray,array("ObjectOwner" => $this->intObjectOwner));
         $newAuditLogEntry->AuditLogEntryDetail = json_encode($ChangedArray);
         try {
@@ -1905,9 +1905,9 @@
         $this->strGender = $objReloaded->strGender;
         $this->blnAccessBlocked = $objReloaded->blnAccessBlocked;
         $this->strBlockedReason = $objReloaded->strBlockedReason;
+        $this->strLastUpdated = $objReloaded->strLastUpdated;
         $this->UserRole = $objReloaded->UserRole;
         $this->strSearchMetaInfo = $objReloaded->strSearchMetaInfo;
-        $this->strLastUpdated = $objReloaded->strLastUpdated;
         $this->intObjectOwner = $objReloaded->intObjectOwner;
     }
     ////////////////////
@@ -2115,6 +2115,13 @@
                  */
                 return $this->strBlockedReason;
 
+            case 'LastUpdated':
+                /**
+                 * Gets the value for strLastUpdated (Read-Only Timestamp)
+                 * @return string
+                 */
+                return $this->strLastUpdated;
+
             case 'UserRole':
                 /**
                  * Gets the value for intUserRole 
@@ -2129,13 +2136,6 @@
                  */
                 return $this->strSearchMetaInfo;
 
-            case 'LastUpdated':
-                /**
-                 * Gets the value for strLastUpdated (Read-Only Timestamp)
-                 * @return string
-                 */
-                return $this->strLastUpdated;
-
             case 'ObjectOwner':
                 /**
                  * Gets the value for intObjectOwner 
@@ -3358,9 +3358,9 @@
         $strToReturn .= '<element name="Gender" type="xsd:string"/>';
         $strToReturn .= '<element name="AccessBlocked" type="xsd:boolean"/>';
         $strToReturn .= '<element name="BlockedReason" type="xsd:string"/>';
+        $strToReturn .= '<element name="LastUpdated" type="xsd:string"/>';
         $strToReturn .= '<element name="UserRoleObject" type="xsd1:UserRole"/>';
         $strToReturn .= '<element name="SearchMetaInfo" type="xsd:string"/>';
-        $strToReturn .= '<element name="LastUpdated" type="xsd:string"/>';
         $strToReturn .= '<element name="ObjectOwner" type="xsd:int"/>';
         $strToReturn .= '<element name="__blnRestored" type="xsd:boolean"/>';
         $strToReturn .= '</sequence></complexType>';
@@ -3439,13 +3439,13 @@
             $objToReturn->blnAccessBlocked = $objSoapObject->AccessBlocked;
         if (property_exists($objSoapObject, 'BlockedReason'))
             $objToReturn->strBlockedReason = $objSoapObject->BlockedReason;
+        if (property_exists($objSoapObject, 'LastUpdated'))
+            $objToReturn->strLastUpdated = $objSoapObject->LastUpdated;
         if ((property_exists($objSoapObject, 'UserRoleObject')) &&
             ($objSoapObject->UserRoleObject))
             $objToReturn->UserRoleObject = UserRole::GetObjectFromSoapObject($objSoapObject->UserRoleObject);
         if (property_exists($objSoapObject, 'SearchMetaInfo'))
             $objToReturn->strSearchMetaInfo = $objSoapObject->SearchMetaInfo;
-        if (property_exists($objSoapObject, 'LastUpdated'))
-            $objToReturn->strLastUpdated = $objSoapObject->LastUpdated;
         if (property_exists($objSoapObject, 'ObjectOwner'))
             $objToReturn->intObjectOwner = $objSoapObject->ObjectOwner;
         if (property_exists($objSoapObject, '__blnRestored'))
@@ -3513,9 +3513,9 @@
         $iArray['Gender'] = $this->strGender;
         $iArray['AccessBlocked'] = $this->blnAccessBlocked;
         $iArray['BlockedReason'] = $this->strBlockedReason;
+        $iArray['LastUpdated'] = $this->strLastUpdated;
         $iArray['UserRole'] = $this->intUserRole;
         $iArray['SearchMetaInfo'] = $this->strSearchMetaInfo;
-        $iArray['LastUpdated'] = $this->strLastUpdated;
         $iArray['ObjectOwner'] = $this->intObjectOwner;
         return new ArrayIterator($iArray);
     }
@@ -3578,10 +3578,10 @@
      * @property-read dxQueryNode $Gender
      * @property-read dxQueryNode $AccessBlocked
      * @property-read dxQueryNode $BlockedReason
+     * @property-read dxQueryNode $LastUpdated
      * @property-read dxQueryNode $UserRole
      * @property-read dxQueryNodeUserRole $UserRoleObject
      * @property-read dxQueryNode $SearchMetaInfo
-     * @property-read dxQueryNode $LastUpdated
      * @property-read dxQueryNode $ObjectOwner
      *
      *
@@ -3652,14 +3652,14 @@
 					return new dxQueryNode('AccessBlocked', 'AccessBlocked', 'Bit', $this);
 				case 'BlockedReason':
 					return new dxQueryNode('BlockedReason', 'BlockedReason', 'Blob', $this);
+				case 'LastUpdated':
+					return new dxQueryNode('LastUpdated', 'LastUpdated', 'VarChar', $this);
 				case 'UserRole':
 					return new dxQueryNode('UserRole', 'UserRole', 'Integer', $this);
 				case 'UserRoleObject':
 					return new dxQueryNodeUserRole('UserRole', 'UserRoleObject', 'Integer', $this);
 				case 'SearchMetaInfo':
 					return new dxQueryNode('SearchMetaInfo', 'SearchMetaInfo', 'Blob', $this);
-				case 'LastUpdated':
-					return new dxQueryNode('LastUpdated', 'LastUpdated', 'VarChar', $this);
 				case 'ObjectOwner':
 					return new dxQueryNode('ObjectOwner', 'ObjectOwner', 'Integer', $this);
 				case 'AdditionalAccountInformation':
@@ -3712,10 +3712,10 @@
      * @property-read dxQueryNode $Gender
      * @property-read dxQueryNode $AccessBlocked
      * @property-read dxQueryNode $BlockedReason
+     * @property-read dxQueryNode $LastUpdated
      * @property-read dxQueryNode $UserRole
      * @property-read dxQueryNodeUserRole $UserRoleObject
      * @property-read dxQueryNode $SearchMetaInfo
-     * @property-read dxQueryNode $LastUpdated
      * @property-read dxQueryNode $ObjectOwner
      *
      *
@@ -3786,14 +3786,14 @@
 					return new dxQueryNode('AccessBlocked', 'AccessBlocked', 'boolean', $this);
 				case 'BlockedReason':
 					return new dxQueryNode('BlockedReason', 'BlockedReason', 'string', $this);
+				case 'LastUpdated':
+					return new dxQueryNode('LastUpdated', 'LastUpdated', 'string', $this);
 				case 'UserRole':
 					return new dxQueryNode('UserRole', 'UserRole', 'integer', $this);
 				case 'UserRoleObject':
 					return new dxQueryNodeUserRole('UserRole', 'UserRoleObject', 'integer', $this);
 				case 'SearchMetaInfo':
 					return new dxQueryNode('SearchMetaInfo', 'SearchMetaInfo', 'string', $this);
-				case 'LastUpdated':
-					return new dxQueryNode('LastUpdated', 'LastUpdated', 'string', $this);
 				case 'ObjectOwner':
 					return new dxQueryNode('ObjectOwner', 'ObjectOwner', 'integer', $this);
 				case 'AdditionalAccountInformation':
Index: divblox/config/database/data_model_orm/generated/ClientConnectionGen.class.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?php\n/**\n * The abstract ClientConnectionGen class defined here is\n * code-generated and contains all the basic CRUD-type functionality as well as\n * basic methods to handle relationships and index-based loading.\n *\n * To use, you should use the ClientConnection subclass which\n * extends this ClientConnectionGen class.\n *\n * Because subsequent re-code generations will overwrite any changes to this\n * file, you should leave this file unaltered to prevent yourself from losing\n * any information or code changes.  All customizations should be done by\n * overriding existing or implementing new methods, properties and variables\n * in the ClientConnection class.\n *\n * @package divblox_app\n * @subpackage GeneratedDataObjects\n * @property-read integer $Id the value for intId (Read-Only PK)\n * @property string $ClientIpAddress the value for strClientIpAddress \n * @property string $ClientUserAgent the value for strClientUserAgent \n * @property dxDateTime $UpdateDateTime the value for dttUpdateDateTime \n * @property integer $Account the value for intAccount \n * @property string $SearchMetaInfo the value for strSearchMetaInfo \n * @property-read string $LastUpdated the value for strLastUpdated (Read-Only Timestamp)\n * @property integer $ObjectOwner the value for intObjectOwner \n * @property Account $AccountObject the value for the Account object referenced by intAccount \n * @property-read ClientAuthenticationToken $_ClientAuthenticationToken the value for the private _objClientAuthenticationToken (Read-Only) if set due to an expansion on the ClientAuthenticationToken.ClientConnection reverse relationship\n * @property-read ClientAuthenticationToken[] $_ClientAuthenticationTokenArray the value for the private _objClientAuthenticationTokenArray (Read-Only) if set due to an ExpandAsArray on the ClientAuthenticationToken.ClientConnection reverse relationship\n * @property-read boolean $__Restored whether or not this object was restored from the database (as opposed to created new)\n */\nclass ClientConnectionGen extends dxBaseClass implements IteratorAggregate {\n\n    ///////////////////////////////////////////////////////////////////////\n    // PROTECTED MEMBER VARIABLES and TEXT FIELD MAXLENGTHS (if applicable)\n    ///////////////////////////////////////////////////////////////////////\n\n    /**\n     * Protected member variable that maps to the database PK Identity column ClientConnection.Id\n     * @var integer intId\n     */\n    protected $intId;\n    const IdDefault = null;\n\n\n    /**\n     * Protected member variable that maps to the database column ClientConnection.ClientIpAddress\n     * @var string strClientIpAddress\n     */\n    protected $strClientIpAddress;\n    const ClientIpAddressMaxLength = 50;\n    const ClientIpAddressDefault = null;\n\n\n    /**\n     * Protected member variable that maps to the database column ClientConnection.ClientUserAgent\n     * @var string strClientUserAgent\n     */\n    protected $strClientUserAgent;\n    const ClientUserAgentMaxLength = 250;\n    const ClientUserAgentDefault = null;\n\n\n    /**\n     * Protected member variable that maps to the database column ClientConnection.UpdateDateTime\n     * @var dxDateTime dttUpdateDateTime\n     */\n    protected $dttUpdateDateTime;\n    const UpdateDateTimeDefault = null;\n\n\n    /**\n     * Protected member variable that maps to the database column ClientConnection.Account\n     * @var integer intAccount\n     */\n    protected $intAccount;\n    const AccountDefault = null;\n\n\n    /**\n     * Protected member variable that maps to the database column ClientConnection.SearchMetaInfo\n     * @var string strSearchMetaInfo\n     */\n    protected $strSearchMetaInfo;\n    const SearchMetaInfoDefault = null;\n\n\n    /**\n     * Protected member variable that maps to the database column ClientConnection.LastUpdated\n     * @var string strLastUpdated\n     */\n    protected $strLastUpdated;\n    const LastUpdatedDefault = null;\n\n\n    /**\n     * Protected member variable that maps to the database column ClientConnection.ObjectOwner\n     * @var integer intObjectOwner\n     */\n    protected $intObjectOwner;\n    const ObjectOwnerDefault = null;\n\n\n    /**\n     * Private member variable that stores a reference to a single ClientAuthenticationToken object\n     * (of type ClientAuthenticationToken), if this ClientConnection object was restored with\n     * an expansion on the ClientAuthenticationToken association table.\n     * @var ClientAuthenticationToken _objClientAuthenticationToken;\n     */\n    private $_objClientAuthenticationToken;\n\n    /**\n     * Private member variable that stores a reference to an array of ClientAuthenticationToken objects\n     * (of type ClientAuthenticationToken[]), if this ClientConnection object was restored with\n     * an ExpandAsArray on the ClientAuthenticationToken association table.\n     * @var ClientAuthenticationToken[] _objClientAuthenticationTokenArray;\n     */\n    private $_objClientAuthenticationTokenArray = null;\n\n    /**\n     * Protected array of virtual attributes for this object (e.g. extra/other calculated and/or non-object bound\n     * columns from the run-time database query result for this object).  Used by InstantiateDbRow and\n     * GetVirtualAttribute.\n     * @var string[] $__strVirtualAttributeArray\n     */\n    protected $__strVirtualAttributeArray = array();\n\n    /**\n     * Protected internal member variable that specifies whether or not this object is Restored from the database.\n     * Used by Save() to determine if Save() should perform a db UPDATE or INSERT.\n     * @var bool __blnRestored;\n     */\n    protected $__blnRestored;\n\n    ///////////////////////////////\n    // PROTECTED MEMBER OBJECTS\n    ///////////////////////////////\n\n    /**\n     * Protected member variable that contains the object pointed by the reference\n     * in the database column ClientConnection.Account.\n     *\n     * NOTE: Always use the AccountObject property getter to correctly retrieve this Account object.\n     * (Because this class implements late binding, this variable reference MAY be null.)\n     * @var Account objAccountObject\n     */\n    protected $objAccountObject;\n\n\n    /**\n     * Initialize each property with default values from database definition\n     */\n    public function Initialize() {\n        $this->intId = ClientConnection::IdDefault;\n        $this->strClientIpAddress = ClientConnection::ClientIpAddressDefault;\n        $this->strClientUserAgent = ClientConnection::ClientUserAgentDefault;\n        $this->dttUpdateDateTime = (ClientConnection::UpdateDateTimeDefault === null)?null:new dxDateTime(ClientConnection::UpdateDateTimeDefault);\n        $this->intAccount = ClientConnection::AccountDefault;\n        $this->strSearchMetaInfo = ClientConnection::SearchMetaInfoDefault;\n        $this->strLastUpdated = ClientConnection::LastUpdatedDefault;\n        $this->intObjectOwner = ClientConnection::ObjectOwnerDefault;\n    }\n\n    ///////////////////////////////\n    // CLASS-WIDE LOAD AND COUNT METHODS\n    ///////////////////////////////\n\n    /**\n     * Static method to retrieve the Database object that owns this class.\n     * @return dxDatabaseBase reference to the Database object that can query this class\n     */\n    public static function GetDatabase() {\n        return ProjectFunctions::$Database[1];\n    }\n\n    /**\n     * Load a ClientConnection from PK Info\n     * @param integer $intId\n     * @param dxQueryClause[] $objOptionalClauses additional optional dxQueryClause objects for this query\n     * @return ClientConnection\n     */\n    public static function Load($intId, $objOptionalClauses = null) {\n        $strCacheKey = false;\n        if (ProjectFunctions::$objCacheProvider && !$objOptionalClauses && ProjectFunctions::$Database[1]->Caching) {\n            $strCacheKey = ProjectFunctions::$objCacheProvider->CreateKey(ProjectFunctions::$Database[1]->Database, 'ClientConnection', $intId);\n            $objCachedObject = ProjectFunctions::$objCacheProvider->Get($strCacheKey);\n            if ($objCachedObject !== false) {\n                return $objCachedObject;\n            }\n        }\n        // Use QuerySingle to Perform the Query\n        $objToReturn = ClientConnection::QuerySingle(\n            dxQuery::AndCondition(\n                dxQuery::Equal(dxQueryN::ClientConnection()->Id, $intId)\n            ),\n            $objOptionalClauses\n        );\n        if ($strCacheKey !== false) {\n            ProjectFunctions::$objCacheProvider->Set($strCacheKey, $objToReturn);\n        }\n        return $objToReturn;\n    }\n\n    /**\n     * Load all ClientConnections\n     * @param dxQueryClause[] $objOptionalClauses additional optional dxQueryClause objects for this query\n     * @return ClientConnection[]\n     */\n    public static function LoadAll($objOptionalClauses = null) {\n        if (func_num_args() > 1) {\n            throw new dxCallerException(\"LoadAll must be called with an array of optional clauses as a single argument\");\n        }\n        // Call ClientConnection::QueryArray to perform the LoadAll query\n        try {\n            return ClientConnection::QueryArray(dxQuery::All(), $objOptionalClauses);\n        } catch (dxCallerException $objExc) {\n            $objExc->IncrementOffset();\n            throw $objExc;\n        }\n    }\n\n    /**\n     * Count all ClientConnections\n     * @return int\n     */\n    public static function CountAll() {\n        // Call ClientConnection::QueryCount to perform the CountAll query\n        return ClientConnection::QueryCount(dxQuery::All());\n    }\n\n    ///////////////////////////////\n    // DIVBLOX QUERY-RELATED METHODS\n    ///////////////////////////////\n\n    /**\n     * Internally called method to assist with calling divblox Query for this class\n     * on load methods.\n     * @param dxQueryBuilder &$objQueryBuilder the QueryBuilder object that will be created\n     * @param dxQueryCondition $objConditions any conditions on the query, itself\n     * @param dxQueryClause[] $objOptionalClausees additional optional dxQueryClause object or array of dxQueryClause objects for this query\n     * @param mixed[] $mixParameterArray a array of name-value pairs to perform PrepareStatement with (sending in null will skip the PrepareStatement step)\n     * @param boolean $blnCountOnly only select a rowcount\n     * @return string the query statement\n     */\n    protected static function BuildQueryStatement(&$objQueryBuilder, dxQueryCondition $objConditions, $objOptionalClauses, $mixParameterArray, $blnCountOnly) {\n        // Get the Database Object for this Class\n        $objDatabase = ClientConnection::GetDatabase();\n\n        // Create/Build out the QueryBuilder object with ClientConnection-specific SELET and FROM fields\n        $objQueryBuilder = new dxQueryBuilder($objDatabase, 'ClientConnection');\n\n        $blnAddAllFieldsToSelect = true;\n        if ($objDatabase->OnlyFullGroupBy) {\n            // see if we have any group by or aggregation clauses, if yes, don't add the fields to select clause\n            if ($objOptionalClauses instanceof dxQueryClause) {\n                if ($objOptionalClauses instanceof dxQueryAggregationClause || $objOptionalClauses instanceof dxQueryGroupBy) {\n                    $blnAddAllFieldsToSelect = false;\n                }\n            } else if (is_array($objOptionalClauses)) {\n                foreach ($objOptionalClauses as $objClause) {\n                    if ($objClause instanceof dxQueryAggregationClause || $objClause instanceof dxQueryGroupBy) {\n                        $blnAddAllFieldsToSelect = false;\n                        break;\n                    }\n                }\n            }\n        }\n        if ($blnAddAllFieldsToSelect) {\n            ClientConnection::GetSelectFields($objQueryBuilder, null, dxQuery::extractSelectClause($objOptionalClauses));\n        }\n        $objQueryBuilder->AddFromItem('ClientConnection');\n\n        // Set \"CountOnly\" option (if applicable)\n        if ($blnCountOnly)\n            $objQueryBuilder->SetCountOnlyFlag();\n\n        // Apply Any Conditions\n        if ($objConditions)\n            try {\n                $objConditions->UpdateQueryBuilder($objQueryBuilder);\n            } catch (dxCallerException $objExc) {\n                $objExc->IncrementOffset();\n                throw $objExc;\n            }\n\n        // Iterate through all the Optional Clauses (if any) and perform accordingly\n        if ($objOptionalClauses) {\n            if ($objOptionalClauses instanceof dxQueryClause)\n                $objOptionalClauses->UpdateQueryBuilder($objQueryBuilder);\n            else if (is_array($objOptionalClauses))\n                foreach ($objOptionalClauses as $objClause)\n                    $objClause->UpdateQueryBuilder($objQueryBuilder);\n            else\n                throw new dxCallerException('Optional Clauses must be a dxQueryClause object or an array of dxQueryClause objects');\n        }\n\n        // Get the SQL Statement\n        $strQuery = $objQueryBuilder->GetStatement();\n\n        // Prepare the Statement with the Query Parameters (if applicable)\n        if ($mixParameterArray) {\n            if (is_array($mixParameterArray)) {\n                if (ProjectFunctions::getDataSetSize($mixParameterArray))\n                    $strQuery = $objDatabase->PrepareStatement($strQuery, $mixParameterArray);\n\n                // Ensure that there are no other Unresolved Named Parameters\n                if (strpos($strQuery, chr(dxQueryNamedValue::DelimiterCode) . '{') !== false)\n                    throw new dxCallerException('Unresolved named parameters in the query');\n            } else\n                throw new dxCallerException('Parameter Array must be an array of name-value parameter pairs');\n        }\n\n        // Return the Objects\n        return $strQuery;\n    }\n\n    /**\n     * Static divblox Query method to query for a single ClientConnection object.\n     * Uses BuildQueryStatment to perform most of the work.\n     * @param dxQueryCondition $objConditions any conditions on the query, itself\n     * @param dxQueryClause[] $objOptionalClausees additional optional dxQueryClause objects for this query\n     * @param mixed[] $mixParameterArray a array of name-value pairs to perform PrepareStatement with\n     * @return ClientConnection the queried object\n     */\n    public static function QuerySingle(dxQueryCondition $objConditions, $objOptionalClauses = null, $mixParameterArray = null) {\n        // Get the Query Statement\n        try {\n            $strQuery = ClientConnection::BuildQueryStatement($objQueryBuilder, $objConditions, $objOptionalClauses, $mixParameterArray, false);\n        } catch (dxCallerException $objExc) {\n            $objExc->IncrementOffset();\n            throw $objExc;\n        }\n\n        // Perform the Query, Get the First Row, and Instantiate a new ClientConnection object\n        $objDbResult = $objQueryBuilder->Database->Query($strQuery);\n\n        // Do we have to expand anything?\n        if ($objQueryBuilder->ExpandAsArrayNode) {\n            $objToReturn = array();\n            $objPrevItemArray = array();\n            while ($objDbRow = $objDbResult->GetNextRow()) {\n                $objItem = ClientConnection::InstantiateDbRow($objDbRow, null, $objQueryBuilder->ExpandAsArrayNode, $objPrevItemArray, $objQueryBuilder->ColumnAliasArray);\n                if ($objItem) {\n                    $objToReturn[] = $objItem;\n                    $objPrevItemArray[$objItem->intId][] = $objItem;\n                }\n            }\n            if (ProjectFunctions::getDataSetSize($objToReturn)) {\n                // Since we only want the object to return, lets return the object and not the array.\n                return $objToReturn[0];\n            } else {\n                return null;\n            }\n        } else {\n            // No expands just return the first row\n            $objDbRow = $objDbResult->GetNextRow();\n            if(null === $objDbRow)\n                return null;\n            return ClientConnection::InstantiateDbRow($objDbRow, null, null, null, $objQueryBuilder->ColumnAliasArray);\n        }\n    }\n\n    /**\n     * Static divblox Query method to query for an array of ClientConnection objects.\n     * Uses BuildQueryStatment to perform most of the work.\n     * @param dxQueryCondition $objConditions any conditions on the query, itself\n     * @param dxQueryClause[] $objOptionalClausees additional optional dxQueryClause objects for this query\n     * @param mixed[] $mixParameterArray a array of name-value pairs to perform PrepareStatement with\n     * @return ClientConnection[] the queried objects as an array\n     */\n    public static function QueryArray(dxQueryCondition $objConditions, $objOptionalClauses = null, $mixParameterArray = null) {\n        // Get the Query Statement\n        try {\n            $strQuery = ClientConnection::BuildQueryStatement($objQueryBuilder, $objConditions, $objOptionalClauses, $mixParameterArray, false);\n        } catch (dxCallerException $objExc) {\n            $objExc->IncrementOffset();\n            throw $objExc;\n        }\n\n        // Perform the Query and Instantiate the Array Result\n        $objDbResult = $objQueryBuilder->Database->Query($strQuery);\n        return ClientConnection::InstantiateDbResult($objDbResult, $objQueryBuilder->ExpandAsArrayNode, $objQueryBuilder->ColumnAliasArray);\n    }\n\n    /**\n     * Static divblox query method to issue a query and get a cursor to progressively fetch its results.\n     * Uses BuildQueryStatment to perform most of the work.\n     * @param dxQueryCondition $objConditions any conditions on the query, itself\n     * @param dxQueryClause[] $objOptionalClauses additional optional dxQueryClause objects for this query\n     * @param mixed[] $mixParameterArray a array of name-value pairs to perform PrepareStatement with\n     * @return dxDatabaseResultBase the cursor resource instance\n     */\n    public static function QueryCursor(dxQueryCondition $objConditions, $objOptionalClauses = null, $mixParameterArray = null) {\n        // Get the query statement\n        try {\n            $strQuery = ClientConnection::BuildQueryStatement($objQueryBuilder, $objConditions, $objOptionalClauses, $mixParameterArray, false);\n        } catch (dxCallerException $objExc) {\n            $objExc->IncrementOffset();\n            throw $objExc;\n        }\n\n        // Perform the query\n        $objDbResult = $objQueryBuilder->Database->Query($strQuery);\n\n        // Return the results cursor\n        $objDbResult->QueryBuilder = $objQueryBuilder;\n        return $objDbResult;\n    }\n\n    /**\n     * Static divblox Query method to query for a count of ClientConnection objects.\n     * Uses BuildQueryStatment to perform most of the work.\n     * @param dxQueryCondition $objConditions any conditions on the query, itself\n     * @param dxQueryClause[] $objOptionalClausees additional optional dxQueryClause objects for this query\n     * @param mixed[] $mixParameterArray a array of name-value pairs to perform PrepareStatement with\n     * @return integer the count of queried objects as an integer\n     */\n    public static function QueryCount(dxQueryCondition $objConditions, $objOptionalClauses = null, $mixParameterArray = null) {\n        // Get the Query Statement\n        try {\n            $strQuery = ClientConnection::BuildQueryStatement($objQueryBuilder, $objConditions, $objOptionalClauses, $mixParameterArray, true);\n        } catch (dxCallerException $objExc) {\n            $objExc->IncrementOffset();\n            throw $objExc;\n        }\n\n        // Perform the Query and return the row_count\n        $objDbResult = $objQueryBuilder->Database->Query($strQuery);\n\n        // Figure out if the query is using GroupBy\n        $blnGrouped = false;\n\n        if ($objOptionalClauses) {\n            if ($objOptionalClauses instanceof dxQueryClause) {\n                if ($objOptionalClauses instanceof dxQueryGroupBy) {\n                    $blnGrouped = true;\n                }\n            } else if (is_array($objOptionalClauses)) {\n                foreach ($objOptionalClauses as $objClause) {\n                    if ($objClause instanceof dxQueryGroupBy) {\n                        $blnGrouped = true;\n                        break;\n                    }\n                }\n            } else {\n                throw new dxCallerException('Optional Clauses must be a dxQueryClause object or an array of dxQueryClause objects');\n            }\n        }\n\n        if ($blnGrouped)\n            // Groups in this query - return the count of Groups (which is the count of all rows)\n            return $objDbResult->CountRows();\n        else {\n            // No Groups - return the sql-calculated count(*) value\n            $strDbRow = $objDbResult->FetchRow();\n            return dxType::Cast($strDbRow[0], dxType::Integer);\n        }\n    }\n\n    public static function QueryArrayCached(dxQueryCondition $objConditions, $objOptionalClauses = null, $mixParameterArray = null, $blnForceUpdate = false) {\n        // Get the Database Object for this Class\n        $objDatabase = ClientConnection::GetDatabase();\n\n        $strQuery = ClientConnection::BuildQueryStatement($objQueryBuilder, $objConditions, $objOptionalClauses, $mixParameterArray, false);\n\n        $objCache = new dxCache('dxquery/clientconnection', $strQuery);\n        $cacheData = $objCache->GetData();\n\n        if (!$cacheData || $blnForceUpdate) {\n            $objDbResult = $objQueryBuilder->Database->Query($strQuery);\n            $arrResult = ClientConnection::InstantiateDbResult($objDbResult, $objQueryBuilder->ExpandAsArrayNode, $objQueryBuilder->ColumnAliasArray);\n            $objCache->SaveData(serialize($arrResult));\n        } else {\n            $arrResult = unserialize($cacheData);\n        }\n\n        return $arrResult;\n    }\n\n    /**\n     * Updates a dxQueryBuilder with the SELECT fields for this ClientConnection\n     * @param dxQueryBuilder $objBuilder the Query Builder object to update\n     * @param string $strPrefix optional prefix to add to the SELECT fields\n     */\n    public static function GetSelectFields(dxQueryBuilder $objBuilder, $strPrefix = null, dxQuerySelect $objSelect = null) {\n        if ($strPrefix) {\n            $strTableName = $strPrefix;\n            $strAliasPrefix = $strPrefix . '__';\n        } else {\n            $strTableName = 'ClientConnection';\n            $strAliasPrefix = '';\n        }\n\n        if ($objSelect) {\n            $objBuilder->AddSelectItem($strTableName, 'Id', $strAliasPrefix . 'Id');\n            $objSelect->AddSelectItems($objBuilder, $strTableName, $strAliasPrefix);\n        } else {\n            $objBuilder->AddSelectItem($strTableName, 'Id', $strAliasPrefix . 'Id');\n            $objBuilder->AddSelectItem($strTableName, 'ClientIpAddress', $strAliasPrefix . 'ClientIpAddress');\n            $objBuilder->AddSelectItem($strTableName, 'ClientUserAgent', $strAliasPrefix . 'ClientUserAgent');\n            $objBuilder->AddSelectItem($strTableName, 'UpdateDateTime', $strAliasPrefix . 'UpdateDateTime');\n            $objBuilder->AddSelectItem($strTableName, 'Account', $strAliasPrefix . 'Account');\n            $objBuilder->AddSelectItem($strTableName, 'SearchMetaInfo', $strAliasPrefix . 'SearchMetaInfo');\n            $objBuilder->AddSelectItem($strTableName, 'LastUpdated', $strAliasPrefix . 'LastUpdated');\n            $objBuilder->AddSelectItem($strTableName, 'ObjectOwner', $strAliasPrefix . 'ObjectOwner');\n        }\n    }\n    ///////////////////////////////\n    // INSTANTIATION-RELATED METHODS\n    ///////////////////////////////\n\n    /**\n     * Do a possible array expansion on the given node. If the node is an ExpandAsArray node,\n     * it will add to the corresponding array in the object. Otherwise, it will follow the node\n     * so that any leaf expansions can be handled.\n     *\n     * @param DatabaseRowBase $objDbRow\n     * @param dxQueryBaseNode $objChildNode\n     * @param dxBaseClass $objPreviousItem\n     * @param string[] $strColumnAliasArray\n     */\n\n    public static function ExpandArray ($objDbRow, $strAliasPrefix, $objNode, $objPreviousItemArray, $strColumnAliasArray) {\n        if (!$objNode->ChildNodeArray) {\n            return false;\n        }\n\n        $strAlias = $strAliasPrefix . 'Id';\n        $strColumnAlias = !empty($strColumnAliasArray[$strAlias]) ? $strColumnAliasArray[$strAlias] : $strAlias;\n        $blnExpanded = false;\n\n        foreach ($objPreviousItemArray as $objPreviousItem) {\n            if ($objPreviousItem->intId != $objDbRow->GetColumn($strColumnAlias, 'Integer')) {\n                continue;\n            }\n\n            foreach ($objNode->ChildNodeArray as $objChildNode) {\n                $strPropName = $objChildNode->_PropertyName;\n                $strClassName = $objChildNode->_ClassName;\n                $blnExpanded = false;\n                $strLongAlias = $objChildNode->ExtendedAlias();\n\n                if ($objChildNode->ExpandAsArray) {\n                    $strVarName = '_obj' . $strPropName . 'Array';\n                    if (null === $objPreviousItem->$strVarName) {\n                        $objPreviousItem->$strVarName = array();\n                    }\n                    if ($intPreviousChildItemCount = ProjectFunctions::getDataSetSize($objPreviousItem->$strVarName)) {\n                        $objPreviousChildItems = $objPreviousItem->$strVarName;\n                        if ($objChildNode->_Type == \"association\") {\n                            $objChildNode = $objChildNode->FirstChild();\n                        }\n                        $nextAlias = $objChildNode->ExtendedAlias() . '__';\n\n                        $objChildItem = call_user_func(array ($strClassName, 'InstantiateDbRow'), $objDbRow, $nextAlias, $objChildNode, $objPreviousChildItems, $strColumnAliasArray);\n                        if ($objChildItem) {\n                            $objPreviousItem->{$strVarName}[] = $objChildItem;\n                            $blnExpanded = true;\n                        } elseif ($objChildItem === false) {\n                            $blnExpanded = true;\n                        }\n                    }\n                } else {\n\n                    // Follow single node if keys match\n                    $nodeType = $objChildNode->_Type;\n                    if ($nodeType == 'reverse_reference' || $nodeType == 'association') {\n                        $strVarName = '_obj' . $strPropName;\n                    } else {\n                        $strVarName = 'obj' . $strPropName;\n                    }\n\n                    if (null === $objPreviousItem->$strVarName) {\n                        return false;\n                    }\n\n                    $objPreviousChildItems = array($objPreviousItem->$strVarName);\n                    $blnResult = call_user_func(array ($strClassName, 'ExpandArray'), $objDbRow, $strLongAlias . '__', $objChildNode, $objPreviousChildItems, $strColumnAliasArray);\n\n                    if ($blnResult) {\n                        $blnExpanded = true;\n                    }\n                }\n            }\n        }\n        return $blnExpanded;\n    }\n\n    /**\n     * Instantiate a ClientConnection from a Database Row.\n     * Takes in an optional strAliasPrefix, used in case another Object::InstantiateDbRow\n     * is calling this ClientConnection::InstantiateDbRow in order to perform\n     * early binding on referenced objects.\n     * @param DatabaseRowBase $objDbRow\n     * @param string $strAliasPrefix\n     * @param dxQueryBaseNode $objExpandAsArrayNode\n     * @param dxBaseClass $arrPreviousItem\n     * @param string[] $strColumnAliasArray\n     * @return mixed Either a ClientConnection, or false to indicate the dbrow was used in an expansion, or null to indicate that this leaf is a duplicate.\n    */\n    public static function InstantiateDbRow($objDbRow, $strAliasPrefix = null, $objExpandAsArrayNode = null, $objPreviousItemArray = null, $strColumnAliasArray = array()) {\n        // If blank row, return null\n        if (!$objDbRow) {\n            return null;\n        }\n\n        if (empty ($strAliasPrefix) && $objPreviousItemArray) {\n            $strColumnAlias = !empty($strColumnAliasArray['Id']) ? $strColumnAliasArray['Id'] : 'Id';\n            $key = $objDbRow->GetColumn($strColumnAlias, 'Integer');\n            $objPreviousItemArray = (!empty ($objPreviousItemArray[$key]) ? $objPreviousItemArray[$key] : null);\n        }\n\n        // See if we're doing an array expansion on the previous item\n        if ($objExpandAsArrayNode &&\n                is_array($objPreviousItemArray) &&\n                ProjectFunctions::getDataSetSize($objPreviousItemArray)) {\n\n            if (ClientConnection::ExpandArray ($objDbRow, $strAliasPrefix, $objExpandAsArrayNode, $objPreviousItemArray, $strColumnAliasArray)) {\n                return false; // db row was used but no new object was created\n            }\n        }\n\n        // Create a new instance of the ClientConnection object\n        $objToReturn = new ClientConnection();\n        $objToReturn->__blnRestored = true;\n\n        $strAlias = $strAliasPrefix . 'Id';\n        $strAliasName = !empty($strColumnAliasArray[$strAlias]) ? $strColumnAliasArray[$strAlias] : $strAlias;\n        $objToReturn->intId = $objDbRow->GetColumn($strAliasName, 'Integer');\n        $strAlias = $strAliasPrefix . 'ClientIpAddress';\n        $strAliasName = !empty($strColumnAliasArray[$strAlias]) ? $strColumnAliasArray[$strAlias] : $strAlias;\n        $objToReturn->strClientIpAddress = $objDbRow->GetColumn($strAliasName, 'VarChar');\n        $strAlias = $strAliasPrefix . 'ClientUserAgent';\n        $strAliasName = !empty($strColumnAliasArray[$strAlias]) ? $strColumnAliasArray[$strAlias] : $strAlias;\n        $objToReturn->strClientUserAgent = $objDbRow->GetColumn($strAliasName, 'VarChar');\n        $strAlias = $strAliasPrefix . 'UpdateDateTime';\n        $strAliasName = !empty($strColumnAliasArray[$strAlias]) ? $strColumnAliasArray[$strAlias] : $strAlias;\n        $objToReturn->dttUpdateDateTime = $objDbRow->GetColumn($strAliasName, 'DateTime');\n        $strAlias = $strAliasPrefix . 'Account';\n        $strAliasName = !empty($strColumnAliasArray[$strAlias]) ? $strColumnAliasArray[$strAlias] : $strAlias;\n        $objToReturn->intAccount = $objDbRow->GetColumn($strAliasName, 'Integer');\n        $strAlias = $strAliasPrefix . 'SearchMetaInfo';\n        $strAliasName = !empty($strColumnAliasArray[$strAlias]) ? $strColumnAliasArray[$strAlias] : $strAlias;\n        $objToReturn->strSearchMetaInfo = $objDbRow->GetColumn($strAliasName, 'Blob');\n        $strAlias = $strAliasPrefix . 'LastUpdated';\n        $strAliasName = !empty($strColumnAliasArray[$strAlias]) ? $strColumnAliasArray[$strAlias] : $strAlias;\n        $objToReturn->strLastUpdated = $objDbRow->GetColumn($strAliasName, 'VarChar');\n        $strAlias = $strAliasPrefix . 'ObjectOwner';\n        $strAliasName = !empty($strColumnAliasArray[$strAlias]) ? $strColumnAliasArray[$strAlias] : $strAlias;\n        $objToReturn->intObjectOwner = $objDbRow->GetColumn($strAliasName, 'Integer');\n\n        if (isset($objPreviousItemArray) && is_array($objPreviousItemArray)) {\n            foreach ($objPreviousItemArray as $objPreviousItem) {\n                if ($objToReturn->Id != $objPreviousItem->Id) {\n                    continue;\n                }\n                // this is a duplicate leaf in a complex join\n                return null; // indicates no object created and the db row has not been used\n            }\n        }\n\n        // Instantiate Virtual Attributes\n        $strVirtualPrefix = $strAliasPrefix . '__';\n        $strVirtualPrefixLength = strlen($strVirtualPrefix);\n        foreach ($objDbRow->GetColumnNameArray() as $strColumnName => $mixValue) {\n            if (strncmp($strColumnName, $strVirtualPrefix, $strVirtualPrefixLength) == 0)\n                $objToReturn->__strVirtualAttributeArray[substr($strColumnName, $strVirtualPrefixLength)] = $mixValue;\n        }\n\n\n        // Prepare to Check for Early/Virtual Binding\n\n        $objExpansionAliasArray = array();\n        if ($objExpandAsArrayNode) {\n            $objExpansionAliasArray = $objExpandAsArrayNode->ChildNodeArray;\n        }\n\n        if (!$strAliasPrefix)\n            $strAliasPrefix = 'ClientConnection__';\n\n        // Check for AccountObject Early Binding\n        $strAlias = $strAliasPrefix . 'Account__Id';\n        $strAliasName = !empty($strColumnAliasArray[$strAlias]) ? $strColumnAliasArray[$strAlias] : $strAlias;\n        if (!is_null($objDbRow->GetColumn($strAliasName))) {\n            $objExpansionNode = (empty($objExpansionAliasArray['Account']) ? null : $objExpansionAliasArray['Account']);\n            $objToReturn->objAccountObject = Account::InstantiateDbRow($objDbRow, $strAliasPrefix . 'Account__', $objExpansionNode, null, $strColumnAliasArray);\n        }\n\n\n\n        // Check for ClientAuthenticationToken Virtual Binding\n        $strAlias = $strAliasPrefix . 'clientauthenticationtoken__Id';\n        $strAliasName = !empty($strColumnAliasArray[$strAlias]) ? $strColumnAliasArray[$strAlias] : $strAlias;\n        $objExpansionNode = (empty($objExpansionAliasArray['clientauthenticationtoken']) ? null : $objExpansionAliasArray['clientauthenticationtoken']);\n        $blnExpanded = ($objExpansionNode && $objExpansionNode->ExpandAsArray);\n        if ($blnExpanded && null === $objToReturn->_objClientAuthenticationTokenArray)\n            $objToReturn->_objClientAuthenticationTokenArray = array();\n        if (!is_null($objDbRow->GetColumn($strAliasName))) {\n            if ($blnExpanded) {\n                $objToReturn->_objClientAuthenticationTokenArray[] = ClientAuthenticationToken::InstantiateDbRow($objDbRow, $strAliasPrefix . 'clientauthenticationtoken__', $objExpansionNode, null, $strColumnAliasArray);\n            } elseif (is_null($objToReturn->_objClientAuthenticationToken)) {\n                $objToReturn->_objClientAuthenticationToken = ClientAuthenticationToken::InstantiateDbRow($objDbRow, $strAliasPrefix . 'clientauthenticationtoken__', $objExpansionNode, null, $strColumnAliasArray);\n            }\n        }\n\n        return $objToReturn;\n    }\n\n    /**\n     * Instantiate an array of ClientConnections from a Database Result\n     * @param DatabaseResultBase $objDbResult\n     * @param dxQueryBaseNode $objExpandAsArrayNode\n     * @param string[] $strColumnAliasArray\n     * @return ClientConnection[]\n     */\n    public static function InstantiateDbResult(dxDatabaseResultBase $objDbResult, $objExpandAsArrayNode = null, $strColumnAliasArray = null) {\n        $objToReturn = array();\n\n        if (!$strColumnAliasArray)\n            $strColumnAliasArray = array();\n\n        // If blank resultset, then return empty array\n        if (!$objDbResult)\n            return $objToReturn;\n\n        // Load up the return array with each row\n        if ($objExpandAsArrayNode) {\n            $objToReturn = array();\n            $objPrevItemArray = array();\n            while ($objDbRow = $objDbResult->GetNextRow()) {\n                $objItem = ClientConnection::InstantiateDbRow($objDbRow, null, $objExpandAsArrayNode, $objPrevItemArray, $strColumnAliasArray);\n                if ($objItem) {\n                    $objToReturn[] = $objItem;\n                    $objPrevItemArray[$objItem->intId][] = $objItem;\n                }\n            }\n        } else {\n            while ($objDbRow = $objDbResult->GetNextRow())\n                $objToReturn[] = ClientConnection::InstantiateDbRow($objDbRow, null, null, null, $strColumnAliasArray);\n        }\n\n        return $objToReturn;\n    }\n\n\n    /**\n     * Instantiate a single ClientConnection object from a query cursor (e.g. a DB ResultSet).\n     * Cursor is automatically moved to the \"next row\" of the result set.\n     * Will return NULL if no cursor or if the cursor has no more rows in the resultset.\n     * @param dxDatabaseResultBase $objDbResult cursor resource\n     * @return ClientConnection next row resulting from the query\n     */\n    public static function InstantiateCursor(dxDatabaseResultBase $objDbResult) {\n        // If blank resultset, then return empty result\n        if (!$objDbResult) return null;\n\n        // If empty resultset, then return empty result\n        $objDbRow = $objDbResult->GetNextRow();\n        if (!$objDbRow) return null;\n\n        // We need the Column Aliases\n        $strColumnAliasArray = $objDbResult->QueryBuilder->ColumnAliasArray;\n        if (!$strColumnAliasArray) $strColumnAliasArray = array();\n\n        // Pull Expansions\n        $objExpandAsArrayNode = $objDbResult->QueryBuilder->ExpandAsArrayNode;\n        if (!empty ($objExpandAsArrayNode)) {\n            throw new dxCallerException (\"Cannot use InstantiateCursor with ExpandAsArray\");\n        }\n\n        // Load up the return result with a row and return it\n        return ClientConnection::InstantiateDbRow($objDbRow, null, null, null, $strColumnAliasArray);\n    }\n\n    ///////////////////////////////////////////////////\n    // INDEX-BASED LOAD METHODS (Single Load and Array)\n    ///////////////////////////////////////////////////\n\n    /**\n     * Load a single ClientConnection object,\n     * by Id Index(es)\n     * @param integer $intId\n     * @param dxQueryClause[] $objOptionalClauses additional optional dxQueryClause objects for this query\n     * @return ClientConnection\n    */\n    public static function LoadById($intId, $objOptionalClauses = null) {\n        return ClientConnection::QuerySingle(\n            dxQuery::AndCondition(\n                dxQuery::Equal(dxQueryN::ClientConnection()->Id, $intId)\n            ),\n            $objOptionalClauses\n        );\n    }\n\n    /**\n     * Load an array of ClientConnection objects,\n     * by Account Index(es)\n     * @param integer $intAccount\n     * @param dxQueryClause[] $objOptionalClauses additional optional dxQueryClause objects for this query\n     * @return ClientConnection[]\n    */\n    public static function LoadArrayByAccount($intAccount, $objOptionalClauses = null) {\n        // Call ClientConnection::QueryArray to perform the LoadArrayByAccount query\n        try {\n            return ClientConnection::QueryArray(\n                dxQuery::Equal(dxQueryN::ClientConnection()->Account, $intAccount),\n                $objOptionalClauses);\n        } catch (dxCallerException $objExc) {\n            $objExc->IncrementOffset();\n            throw $objExc;\n        }\n    }\n\n    /**\n     * Count ClientConnections\n     * by Account Index(es)\n     * @param integer $intAccount\n     * @return int\n    */\n    public static function CountByAccount($intAccount) {\n        // Call ClientConnection::QueryCount to perform the CountByAccount query\n        return ClientConnection::QueryCount(\n            dxQuery::Equal(dxQueryN::ClientConnection()->Account, $intAccount)\n        );\n    }\n    ////////////////////////////////////////////////////\n    // INDEX-BASED LOAD METHODS (Array via Many to Many)\n    ////////////////////////////////////////////////////\n\n\n    //////////////////////////\n    // SAVE, DELETE AND RELOAD\n    //////////////////////////\n\n    /**\n    * Save this ClientConnection\n    * @param bool $blnForceInsert\n    * @param bool $blnForceUpdate\n    * @return int\n    */\n    public function Save($blnForceInsert = false, $blnForceUpdate = false) {\n        $ObjectAccessArray = ProjectAccessManager::getObjectAccess(ProjectFunctions::getCurrentAccountId(),\"ClientConnection\",$this->intId);\n        // Get the Database Object for this Class\n        $objDatabase = ClientConnection::GetDatabase();\n        $mixToReturn = null;\n        if (!is_numeric($this->intObjectOwner)) {\n            $this->intObjectOwner = ProjectFunctions::getCurrentAccountId();\n        }\n        $ExistingObj = ClientConnection::Load($this->intId);\n        $newAuditLogEntry = new AuditLogEntry();\n        $ChangedArray = array();\n        $newAuditLogEntry->EntryTimeStamp = dxDateTime::Now();\n        $newAuditLogEntry->ObjectId = $this->intId;\n        $newAuditLogEntry->ObjectName = 'ClientConnection';\n        $newAuditLogEntry->UserEmail = ProjectFunctions::getCurrentUserEmailForAudit();\n        if (!$ExistingObj) {\n            $newAuditLogEntry->ModificationType = 'Create';\n            $ChangedArray = array_merge($ChangedArray,array(\"Id\" => $this->intId));\n            $ChangedArray = array_merge($ChangedArray,array(\"ClientIpAddress\" => $this->strClientIpAddress));\n            $ChangedArray = array_merge($ChangedArray,array(\"ClientUserAgent\" => $this->strClientUserAgent));\n            $ChangedArray = array_merge($ChangedArray,array(\"UpdateDateTime\" => $this->dttUpdateDateTime));\n            $ChangedArray = array_merge($ChangedArray,array(\"Account\" => $this->intAccount));\n            $ChangedArray = array_merge($ChangedArray,array(\"SearchMetaInfo\" => $this->strSearchMetaInfo));\n            $ChangedArray = array_merge($ChangedArray,array(\"LastUpdated\" => $this->strLastUpdated));\n            $ChangedArray = array_merge($ChangedArray,array(\"ObjectOwner\" => $this->intObjectOwner));\n            $newAuditLogEntry->AuditLogEntryDetail = json_encode($ChangedArray);\n        } else {\n            $newAuditLogEntry->ModificationType = 'Update';\n            $ExistingValueStr = \"NULL\";\n            if (!is_null($ExistingObj->Id)) {\n                $ExistingValueStr = $ExistingObj->Id;\n            }\n            if ($ExistingObj->Id != $this->intId) {\n                $ChangedArray = array_merge($ChangedArray,array(\"Id\" => array(\"Before\" => $ExistingValueStr,\"After\" => $this->intId)));\n                //$ChangedArray = array_merge($ChangedArray,array(\"Id\" => \"From: \".$ExistingValueStr.\" to: \".$this->intId));\n            }\n            $ExistingValueStr = \"NULL\";\n            if (!is_null($ExistingObj->ClientIpAddress)) {\n                $ExistingValueStr = $ExistingObj->ClientIpAddress;\n            }\n            if ($ExistingObj->ClientIpAddress != $this->strClientIpAddress) {\n                $ChangedArray = array_merge($ChangedArray,array(\"ClientIpAddress\" => array(\"Before\" => $ExistingValueStr,\"After\" => $this->strClientIpAddress)));\n                //$ChangedArray = array_merge($ChangedArray,array(\"ClientIpAddress\" => \"From: \".$ExistingValueStr.\" to: \".$this->strClientIpAddress));\n            }\n            $ExistingValueStr = \"NULL\";\n            if (!is_null($ExistingObj->ClientUserAgent)) {\n                $ExistingValueStr = $ExistingObj->ClientUserAgent;\n            }\n            if ($ExistingObj->ClientUserAgent != $this->strClientUserAgent) {\n                $ChangedArray = array_merge($ChangedArray,array(\"ClientUserAgent\" => array(\"Before\" => $ExistingValueStr,\"After\" => $this->strClientUserAgent)));\n                //$ChangedArray = array_merge($ChangedArray,array(\"ClientUserAgent\" => \"From: \".$ExistingValueStr.\" to: \".$this->strClientUserAgent));\n            }\n            $ExistingValueStr = \"NULL\";\n            if (!is_null($ExistingObj->UpdateDateTime)) {\n                $ExistingValueStr = $ExistingObj->UpdateDateTime;\n            }\n            if ($ExistingObj->UpdateDateTime != $this->dttUpdateDateTime) {\n                $ChangedArray = array_merge($ChangedArray,array(\"UpdateDateTime\" => array(\"Before\" => $ExistingValueStr,\"After\" => $this->dttUpdateDateTime)));\n                //$ChangedArray = array_merge($ChangedArray,array(\"UpdateDateTime\" => \"From: \".$ExistingValueStr.\" to: \".$this->dttUpdateDateTime));\n            }\n            $ExistingValueStr = \"NULL\";\n            if (!is_null($ExistingObj->Account)) {\n                $ExistingValueStr = $ExistingObj->Account;\n            }\n            if ($ExistingObj->Account != $this->intAccount) {\n                $ChangedArray = array_merge($ChangedArray,array(\"Account\" => array(\"Before\" => $ExistingValueStr,\"After\" => $this->intAccount)));\n                //$ChangedArray = array_merge($ChangedArray,array(\"Account\" => \"From: \".$ExistingValueStr.\" to: \".$this->intAccount));\n            }\n            $ExistingValueStr = \"NULL\";\n            if (!is_null($ExistingObj->SearchMetaInfo)) {\n                $ExistingValueStr = $ExistingObj->SearchMetaInfo;\n            }\n            if ($ExistingObj->SearchMetaInfo != $this->strSearchMetaInfo) {\n                $ChangedArray = array_merge($ChangedArray,array(\"SearchMetaInfo\" => array(\"Before\" => $ExistingValueStr,\"After\" => $this->strSearchMetaInfo)));\n                //$ChangedArray = array_merge($ChangedArray,array(\"SearchMetaInfo\" => \"From: \".$ExistingValueStr.\" to: \".$this->strSearchMetaInfo));\n            }\n            $ExistingValueStr = \"NULL\";\n            if (!is_null($ExistingObj->LastUpdated)) {\n                $ExistingValueStr = $ExistingObj->LastUpdated;\n            }\n            if ($ExistingObj->LastUpdated != $this->strLastUpdated) {\n                $ChangedArray = array_merge($ChangedArray,array(\"LastUpdated\" => array(\"Before\" => $ExistingValueStr,\"After\" => $this->strLastUpdated)));\n                //$ChangedArray = array_merge($ChangedArray,array(\"LastUpdated\" => \"From: \".$ExistingValueStr.\" to: \".$this->strLastUpdated));\n            }\n            $ExistingValueStr = \"NULL\";\n            if (!is_null($ExistingObj->ObjectOwner)) {\n                $ExistingValueStr = $ExistingObj->ObjectOwner;\n            }\n            if ($ExistingObj->ObjectOwner != $this->intObjectOwner) {\n                $ChangedArray = array_merge($ChangedArray,array(\"ObjectOwner\" => array(\"Before\" => $ExistingValueStr,\"After\" => $this->intObjectOwner)));\n                //$ChangedArray = array_merge($ChangedArray,array(\"ObjectOwner\" => \"From: \".$ExistingValueStr.\" to: \".$this->intObjectOwner));\n            }\n            $newAuditLogEntry->AuditLogEntryDetail = json_encode($ChangedArray);\n        }\n        try {\n            if ((!$this->__blnRestored) || ($blnForceInsert)) {\n                if (!in_array(AccessOperation::CREATE_STR,$ObjectAccessArray)) {\n                    // This user is not allowed to create an object of this type\n                    throw new Exception(\"User is not allowed to perform operation \".AccessOperation::CREATE_STR.\" on entity of type 'ClientConnection'. Allowed access is \".json_encode($ObjectAccessArray));\n                }\n                // Perform an INSERT query\n                $objDatabase->NonQuery('\n                INSERT INTO `ClientConnection` (\n\t\t\t\t\t\t\t`ClientIpAddress`,\n\t\t\t\t\t\t\t`ClientUserAgent`,\n\t\t\t\t\t\t\t`UpdateDateTime`,\n\t\t\t\t\t\t\t`Account`,\n\t\t\t\t\t\t\t`SearchMetaInfo`,\n\t\t\t\t\t\t\t`ObjectOwner`\n\t\t\t\t\t\t) VALUES (\n\t\t\t\t\t\t\t' . $objDatabase->SqlVariable($this->strClientIpAddress) . ',\n\t\t\t\t\t\t\t' . $objDatabase->SqlVariable($this->strClientUserAgent) . ',\n\t\t\t\t\t\t\t' . $objDatabase->SqlVariable($this->dttUpdateDateTime) . ',\n\t\t\t\t\t\t\t' . $objDatabase->SqlVariable($this->intAccount) . ',\n\t\t\t\t\t\t\t' . $objDatabase->SqlVariable($this->strSearchMetaInfo) . ',\n\t\t\t\t\t\t\t' . $objDatabase->SqlVariable($this->intObjectOwner) . '\n\t\t\t\t\t\t)\n                ');\n\t\t\t\t\t// Update Identity column and return its value\n                $mixToReturn = $this->intId = $objDatabase->InsertId('ClientConnection', 'Id');\n            } else {\n                // Perform an UPDATE query\n                // First checking for Optimistic Locking constraints (if applicable)\n                if (!in_array(AccessOperation::UPDATE_STR,$ObjectAccessArray)) {\n                    // This user is not allowed to create an object of this type\n                    throw new Exception(\"User is not allowed to perform operation \".AccessOperation::UPDATE_STR.\" on entity of type 'ClientConnection'. Allowed access is \".json_encode($ObjectAccessArray));\n                }\n                if (!$blnForceUpdate) {\n                    // Perform the Optimistic Locking check\n                    $objResult = $objDatabase->Query('\n                    SELECT `LastUpdated` FROM `ClientConnection` WHERE\n\t\t\t\t\t\t\t`Id` = ' . $objDatabase->SqlVariable($this->intId) . '');\n\n                $objRow = $objResult->FetchArray();\n                if ($objRow[0] != $this->strLastUpdated)\n                    throw new dxOptimisticLockingException('ClientConnection');\n            }\n\n            // Perform the UPDATE query\n            $objDatabase->NonQuery('\n            UPDATE `ClientConnection` SET\n\t\t\t\t\t\t\t`ClientIpAddress` = ' . $objDatabase->SqlVariable($this->strClientIpAddress) . ',\n\t\t\t\t\t\t\t`ClientUserAgent` = ' . $objDatabase->SqlVariable($this->strClientUserAgent) . ',\n\t\t\t\t\t\t\t`UpdateDateTime` = ' . $objDatabase->SqlVariable($this->dttUpdateDateTime) . ',\n\t\t\t\t\t\t\t`Account` = ' . $objDatabase->SqlVariable($this->intAccount) . ',\n\t\t\t\t\t\t\t`SearchMetaInfo` = ' . $objDatabase->SqlVariable($this->strSearchMetaInfo) . ',\n\t\t\t\t\t\t\t`ObjectOwner` = ' . $objDatabase->SqlVariable($this->intObjectOwner) . '\n            WHERE\n\t\t\t\t\t\t\t`Id` = ' . $objDatabase->SqlVariable($this->intId) . '');\n            }\n\n        } catch (dxCallerException $objExc) {\n            $objExc->IncrementOffset();\n            throw $objExc;\n        }\n        try {\n            $newAuditLogEntry->ObjectId = $this->intId;\n            $newAuditLogEntry->Save();\n        } catch(dxCallerException $e) {\n            error_log('Could not save audit log while saving ClientConnection. Details: '.$newAuditLogEntry->getJson().'<br>Error details: '.$e->getMessage());\n        }\n        // Update __blnRestored and any Non-Identity PK Columns (if applicable)\n        $this->__blnRestored = true;\n\n        // Update Local Timestamp\n        $objResult = $objDatabase->Query('SELECT `LastUpdated` FROM\n                                            `ClientConnection` WHERE\n                \t\t\t\t\t\t\t`Id` = ' . $objDatabase->SqlVariable($this->intId) . '');\n\n        $objRow = $objResult->FetchArray();\n        $this->strLastUpdated = $objRow[0];\n\n        $this->DeleteCache();\n\n        // Return\n        return $mixToReturn;\n    }\n    /**\n     * Delete this ClientConnection\n     * @return void\n     */\n    public function Delete() {\n        if ((is_null($this->intId)))\n            throw new dxUndefinedPrimaryKeyException('Cannot delete this ClientConnection with an unset primary key.');\n\n        $ObjectAccessArray = ProjectAccessManager::getObjectAccess(ProjectFunctions::getCurrentAccountId(),\"ClientConnection\",$this->intId);\n        if (!in_array(AccessOperation::DELETE_STR,$ObjectAccessArray)) {\n            // This user is not allowed to delete an object of this type\n            throw new Exception(\"User is not allowed to perform operation \".AccessOperation::DELETE_STR.\" on entity of type 'ClientConnection'. Allowed access is \".json_encode($ObjectAccessArray));\n        }\n\n        // Get the Database Object for this Class\n        $objDatabase = ClientConnection::GetDatabase();\n        $newAuditLogEntry = new AuditLogEntry();\n        $ChangedArray = array();\n        $newAuditLogEntry->EntryTimeStamp = dxDateTime::Now();\n        $newAuditLogEntry->ObjectId = $this->intId;\n        $newAuditLogEntry->ObjectName = 'ClientConnection';\n        $newAuditLogEntry->UserEmail = ProjectFunctions::getCurrentUserEmailForAudit();\n        $newAuditLogEntry->ModificationType = 'Delete';\n        $ChangedArray = array_merge($ChangedArray,array(\"Id\" => $this->intId));\n        $ChangedArray = array_merge($ChangedArray,array(\"ClientIpAddress\" => $this->strClientIpAddress));\n        $ChangedArray = array_merge($ChangedArray,array(\"ClientUserAgent\" => $this->strClientUserAgent));\n        $ChangedArray = array_merge($ChangedArray,array(\"UpdateDateTime\" => $this->dttUpdateDateTime));\n        $ChangedArray = array_merge($ChangedArray,array(\"Account\" => $this->intAccount));\n        $ChangedArray = array_merge($ChangedArray,array(\"SearchMetaInfo\" => $this->strSearchMetaInfo));\n        $ChangedArray = array_merge($ChangedArray,array(\"LastUpdated\" => $this->strLastUpdated));\n        $ChangedArray = array_merge($ChangedArray,array(\"ObjectOwner\" => $this->intObjectOwner));\n        $newAuditLogEntry->AuditLogEntryDetail = json_encode($ChangedArray);\n        try {\n            $newAuditLogEntry->Save();\n        } catch(dxCallerException $e) {\n            error_log('Could not save audit log while deleting ClientConnection. Details: '.$newAuditLogEntry->getJson().'<br>Error details: '.$e->getMessage());\n        }\n\n        // Perform the SQL Query\n        $objDatabase->NonQuery('\n            DELETE FROM\n                `ClientConnection`\n            WHERE\n                `Id` = ' . $objDatabase->SqlVariable($this->intId) . '');\n\n        $this->DeleteCache();\n    }\n\n    /**\n     * Delete this ClientConnection ONLY from the cache\n     * @return void\n     */\n    public function DeleteCache() {\n        if (ProjectFunctions::$objCacheProvider && ProjectFunctions::$Database[1]->Caching) {\n            $strCacheKey = ProjectFunctions::$objCacheProvider->CreateKey(ProjectFunctions::$Database[1]->Database, 'ClientConnection', $this->intId);\n            ProjectFunctions::$objCacheProvider->Delete($strCacheKey);\n        }\n    }\n\n    /**\n     * Delete all ClientConnections\n     * @return void\n     */\n    public static function DeleteAll() {\n        // Get the Database Object for this Class\n        $objDatabase = ClientConnection::GetDatabase();\n\n        // Perform the Query\n        $objDatabase->NonQuery('\n            DELETE FROM\n                `ClientConnection`');\n\n        if (ProjectFunctions::$objCacheProvider && ProjectFunctions::$Database[1]->Caching) {\n            ProjectFunctions::$objCacheProvider->DeleteAll();\n        }\n    }\n\n    /**\n     * Truncate ClientConnection table\n     * @return void\n     */\n    public static function Truncate() {\n        // Get the Database Object for this Class\n        $objDatabase = ClientConnection::GetDatabase();\n\n        // Perform the Query\n        $objDatabase->NonQuery('\n            TRUNCATE `ClientConnection`');\n\n        if (ProjectFunctions::$objCacheProvider && ProjectFunctions::$Database[1]->Caching) {\n            ProjectFunctions::$objCacheProvider->DeleteAll();\n        }\n    }\n    /**\n     * Reload this ClientConnection from the database.\n     * @return void\n     */\n    public function Reload() {\n        // Make sure we are actually Restored from the database\n        if (!$this->__blnRestored)\n            throw new dxCallerException('Cannot call Reload() on a new, unsaved ClientConnection object.');\n\n        $this->DeleteCache();\n\n        // Reload the Object\n        $objReloaded = ClientConnection::Load($this->intId);\n\n        // Update $this's local variables to match\n        $this->strClientIpAddress = $objReloaded->strClientIpAddress;\n        $this->strClientUserAgent = $objReloaded->strClientUserAgent;\n        $this->dttUpdateDateTime = $objReloaded->dttUpdateDateTime;\n        $this->Account = $objReloaded->Account;\n        $this->strSearchMetaInfo = $objReloaded->strSearchMetaInfo;\n        $this->strLastUpdated = $objReloaded->strLastUpdated;\n        $this->intObjectOwner = $objReloaded->intObjectOwner;\n    }\n    ////////////////////\n    // PUBLIC OVERRIDERS\n    ////////////////////\n\n        /**\n     * Override method to perform a property \"Get\"\n     * This will get the value of $strName\n     *\n     * @param string $strName Name of the property to get\n     * @return mixed\n     */\n    public function __get($strName) {\n        switch ($strName) {\n            ///////////////////\n            // Member Variables\n            ///////////////////\n            case 'Id':\n                /**\n                 * Gets the value for intId (Read-Only PK)\n                 * @return integer\n                 */\n                return $this->intId;\n\n            case 'ClientIpAddress':\n                /**\n                 * Gets the value for strClientIpAddress \n                 * @return string\n                 */\n                return $this->strClientIpAddress;\n\n            case 'ClientUserAgent':\n                /**\n                 * Gets the value for strClientUserAgent \n                 * @return string\n                 */\n                return $this->strClientUserAgent;\n\n            case 'UpdateDateTime':\n                /**\n                 * Gets the value for dttUpdateDateTime \n                 * @return dxDateTime\n                 */\n                return $this->dttUpdateDateTime;\n\n            case 'Account':\n                /**\n                 * Gets the value for intAccount \n                 * @return integer\n                 */\n                return $this->intAccount;\n\n            case 'SearchMetaInfo':\n                /**\n                 * Gets the value for strSearchMetaInfo \n                 * @return string\n                 */\n                return $this->strSearchMetaInfo;\n\n            case 'LastUpdated':\n                /**\n                 * Gets the value for strLastUpdated (Read-Only Timestamp)\n                 * @return string\n                 */\n                return $this->strLastUpdated;\n\n            case 'ObjectOwner':\n                /**\n                 * Gets the value for intObjectOwner \n                 * @return integer\n                 */\n                return $this->intObjectOwner;\n\n\n            ///////////////////\n            // Member Objects\n            ///////////////////\n            case 'AccountObject':\n                /**\n                 * Gets the value for the Account object referenced by intAccount \n                 * @return Account\n                 */\n                try {\n                    if ((!$this->objAccountObject) && (!is_null($this->intAccount)))\n                        $this->objAccountObject = Account::Load($this->intAccount);\n                    return $this->objAccountObject;\n                } catch (dxCallerException $objExc) {\n                    $objExc->IncrementOffset();\n                    throw $objExc;\n                }\n\n\n            ////////////////////////////\n            // Virtual Object References (Many to Many and Reverse References)\n            // (If restored via a \"Many-to\" expansion)\n            ////////////////////////////\n\n            case '_ClientAuthenticationToken':\n                /**\n                 * Gets the value for the private _objClientAuthenticationToken (Read-Only)\n                 * if set due to an expansion on the ClientAuthenticationToken.ClientConnection reverse relationship\n                 * @return ClientAuthenticationToken\n                 */\n                return $this->_objClientAuthenticationToken;\n\n            case '_ClientAuthenticationTokenArray':\n                /**\n                 * Gets the value for the private _objClientAuthenticationTokenArray (Read-Only)\n                 * if set due to an ExpandAsArray on the ClientAuthenticationToken.ClientConnection reverse relationship\n                 * @return ClientAuthenticationToken[]\n                 */\n                return $this->_objClientAuthenticationTokenArray;\n\n\n            case '__Restored':\n                return $this->__blnRestored;\n\n            default:\n                try {\n                    return parent::__get($strName);\n                } catch (dxCallerException $objExc) {\n                    $objExc->IncrementOffset();\n                    throw $objExc;\n                }\n        }\n    }\n        /**\n     * Override method to perform a property \"Set\"\n     * This will set the property $strName to be $mixValue\n     *\n     * @param string $strName Name of the property to set\n     * @param string $mixValue New value of the property\n     * @return mixed\n     */\n    public function __set($strName, $mixValue) {\n        switch ($strName) {\n            ///////////////////\n            // Member Variables\n            ///////////////////\n            case 'ClientIpAddress':\n                /**\n                 * Sets the value for strClientIpAddress \n                 * @param string $mixValue\n                 * @return string\n                 */\n                try {\n                    return ($this->strClientIpAddress = dxType::Cast($mixValue, dxType::String));\n                } catch (dxCallerException $objExc) {\n                    $objExc->IncrementOffset();\n                    throw $objExc;\n                }\n\n            case 'ClientUserAgent':\n                /**\n                 * Sets the value for strClientUserAgent \n                 * @param string $mixValue\n                 * @return string\n                 */\n                try {\n                    return ($this->strClientUserAgent = dxType::Cast($mixValue, dxType::String));\n                } catch (dxCallerException $objExc) {\n                    $objExc->IncrementOffset();\n                    throw $objExc;\n                }\n\n            case 'UpdateDateTime':\n                /**\n                 * Sets the value for dttUpdateDateTime \n                 * @param dxDateTime $mixValue\n                 * @return dxDateTime\n                 */\n                try {\n                    return ($this->dttUpdateDateTime = dxType::Cast($mixValue, dxType::DateTime));\n                } catch (dxCallerException $objExc) {\n                    $objExc->IncrementOffset();\n                    throw $objExc;\n                }\n\n            case 'Account':\n                /**\n                 * Sets the value for intAccount \n                 * @param integer $mixValue\n                 * @return integer\n                 */\n                try {\n                    $this->objAccountObject = null;\n                    return ($this->intAccount = dxType::Cast($mixValue, dxType::Integer));\n                } catch (dxCallerException $objExc) {\n                    $objExc->IncrementOffset();\n                    throw $objExc;\n                }\n\n            case 'SearchMetaInfo':\n                /**\n                 * Sets the value for strSearchMetaInfo \n                 * @param string $mixValue\n                 * @return string\n                 */\n                try {\n                    return ($this->strSearchMetaInfo = dxType::Cast($mixValue, dxType::String));\n                } catch (dxCallerException $objExc) {\n                    $objExc->IncrementOffset();\n                    throw $objExc;\n                }\n\n            case 'ObjectOwner':\n                /**\n                 * Sets the value for intObjectOwner \n                 * @param integer $mixValue\n                 * @return integer\n                 */\n                try {\n                    return ($this->intObjectOwner = dxType::Cast($mixValue, dxType::Integer));\n                } catch (dxCallerException $objExc) {\n                    $objExc->IncrementOffset();\n                    throw $objExc;\n                }\n\n\n            ///////////////////\n            // Member Objects\n            ///////////////////\n            case 'AccountObject':\n                /**\n                 * Sets the value for the Account object referenced by intAccount \n                 * @param Account $mixValue\n                 * @return Account\n                 */\n                if (is_null($mixValue)) {\n                    $this->intAccount = null;\n                    $this->objAccountObject = null;\n                    return null;\n                } else {\n                    // Make sure $mixValue actually is a Account object\n                    try {\n                        $mixValue = dxType::Cast($mixValue, 'Account');\n                    } catch (dxInvalidCastException $objExc) {\n                        $objExc->IncrementOffset();\n                        throw $objExc;\n                    }\n\n                    // Make sure $mixValue is a SAVED Account object\n                    if (is_null($mixValue->Id))\n                        throw new dxCallerException('Unable to set an unsaved AccountObject for this ClientConnection');\n\n                    // Update Local Member Variables\n                    $this->objAccountObject = $mixValue;\n                    $this->intAccount = $mixValue->Id;\n\n                    // Return $mixValue\n                    return $mixValue;\n                }\n                break;\n\n            default:\n                try {\n                    return parent::__set($strName, $mixValue);\n                } catch (dxCallerException $objExc) {\n                    $objExc->IncrementOffset();\n                    throw $objExc;\n                }\n        }\n    }\n    /**\n     * Lookup a VirtualAttribute value (if applicable).  Returns NULL if none found.\n     * @param string $strName\n     * @return string\n     */\n    public function GetVirtualAttribute($strName) {\n        if (array_key_exists($strName, $this->__strVirtualAttributeArray))\n            return $this->__strVirtualAttributeArray[$strName];\n        return null;\n    }\n\n    ///////////////////////////////\n    // ASSOCIATED OBJECTS' METHODS\n    ///////////////////////////////\n\n\n\n    // Related Objects' Methods for ClientAuthenticationToken\n    //-------------------------------------------------------------------\n\n    /**\n     * Gets all associated ClientAuthenticationTokens as an array of ClientAuthenticationToken objects\n     * @param dxQueryClause[] $objOptionalClauses additional optional dxQueryClause objects for this query\n     * @return ClientAuthenticationToken[]\n    */\n    public function GetClientAuthenticationTokenArray($objOptionalClauses = null) {\n        if ((is_null($this->intId)))\n            return array();\n\n        try {\n            return ClientAuthenticationToken::LoadArrayByClientConnection($this->intId, $objOptionalClauses);\n        } catch (dxCallerException $objExc) {\n            $objExc->IncrementOffset();\n            throw $objExc;\n        }\n    }\n\n    /**\n     * Counts all associated ClientAuthenticationTokens\n     * @return int\n    */\n    public function CountClientAuthenticationTokens() {\n        if ((is_null($this->intId)))\n            return 0;\n\n        return ClientAuthenticationToken::CountByClientConnection($this->intId);\n    }\n\n    /**\n     * Associates a ClientAuthenticationToken\n     * @param ClientAuthenticationToken $objClientAuthenticationToken\n     * @return void\n    */\n    public function AssociateClientAuthenticationToken(ClientAuthenticationToken $objClientAuthenticationToken) {\n        if ((is_null($this->intId)))\n            throw new dxUndefinedPrimaryKeyException('Unable to call AssociateClientAuthenticationToken on this unsaved ClientConnection.');\n        if ((is_null($objClientAuthenticationToken->Id)))\n            throw new dxUndefinedPrimaryKeyException('Unable to call AssociateClientAuthenticationToken on this ClientConnection with an unsaved ClientAuthenticationToken.');\n\n        // Get the Database Object for this Class\n        $objDatabase = ClientConnection::GetDatabase();\n\n        // Perform the SQL Query\n        $objDatabase->NonQuery('\n            UPDATE\n                `ClientAuthenticationToken`\n            SET\n                `ClientConnection` = ' . $objDatabase->SqlVariable($this->intId) . '\n            WHERE\n                `Id` = ' . $objDatabase->SqlVariable($objClientAuthenticationToken->Id) . '\n        ');\n    }\n\n    /**\n     * Unassociates a ClientAuthenticationToken\n     * @param ClientAuthenticationToken $objClientAuthenticationToken\n     * @return void\n    */\n    public function UnassociateClientAuthenticationToken(ClientAuthenticationToken $objClientAuthenticationToken) {\n        if ((is_null($this->intId)))\n            throw new dxUndefinedPrimaryKeyException('Unable to call UnassociateClientAuthenticationToken on this unsaved ClientConnection.');\n        if ((is_null($objClientAuthenticationToken->Id)))\n            throw new dxUndefinedPrimaryKeyException('Unable to call UnassociateClientAuthenticationToken on this ClientConnection with an unsaved ClientAuthenticationToken.');\n\n        // Get the Database Object for this Class\n        $objDatabase = ClientConnection::GetDatabase();\n\n        // Perform the SQL Query\n        $objDatabase->NonQuery('\n            UPDATE\n                `ClientAuthenticationToken`\n            SET\n                `ClientConnection` = null\n            WHERE\n                `Id` = ' . $objDatabase->SqlVariable($objClientAuthenticationToken->Id) . ' AND\n                `ClientConnection` = ' . $objDatabase->SqlVariable($this->intId) . '\n        ');\n    }\n\n    /**\n     * Unassociates all ClientAuthenticationTokens\n     * @return void\n    */\n    public function UnassociateAllClientAuthenticationTokens() {\n        if ((is_null($this->intId)))\n            throw new dxUndefinedPrimaryKeyException('Unable to call UnassociateClientAuthenticationToken on this unsaved ClientConnection.');\n\n        // Get the Database Object for this Class\n        $objDatabase = ClientConnection::GetDatabase();\n\n        // Perform the SQL Query\n        $objDatabase->NonQuery('\n            UPDATE\n                `ClientAuthenticationToken`\n            SET\n                `ClientConnection` = null\n            WHERE\n                `ClientConnection` = ' . $objDatabase->SqlVariable($this->intId) . '\n        ');\n    }\n\n    /**\n     * Deletes an associated ClientAuthenticationToken\n     * @param ClientAuthenticationToken $objClientAuthenticationToken\n     * @return void\n    */\n    public function DeleteAssociatedClientAuthenticationToken(ClientAuthenticationToken $objClientAuthenticationToken) {\n        if ((is_null($this->intId)))\n            throw new dxUndefinedPrimaryKeyException('Unable to call UnassociateClientAuthenticationToken on this unsaved ClientConnection.');\n        if ((is_null($objClientAuthenticationToken->Id)))\n            throw new dxUndefinedPrimaryKeyException('Unable to call UnassociateClientAuthenticationToken on this ClientConnection with an unsaved ClientAuthenticationToken.');\n\n        // Get the Database Object for this Class\n        $objDatabase = ClientConnection::GetDatabase();\n\n        // Perform the SQL Query\n        $objDatabase->NonQuery('\n            DELETE FROM\n                `ClientAuthenticationToken`\n            WHERE\n                `Id` = ' . $objDatabase->SqlVariable($objClientAuthenticationToken->Id) . ' AND\n                `ClientConnection` = ' . $objDatabase->SqlVariable($this->intId) . '\n        ');\n    }\n\n    /**\n     * Deletes all associated ClientAuthenticationTokens\n     * @return void\n    */\n    public function DeleteAllClientAuthenticationTokens() {\n        if ((is_null($this->intId)))\n            throw new dxUndefinedPrimaryKeyException('Unable to call UnassociateClientAuthenticationToken on this unsaved ClientConnection.');\n\n        // Get the Database Object for this Class\n        $objDatabase = ClientConnection::GetDatabase();\n\n        // Perform the SQL Query\n        $objDatabase->NonQuery('\n            DELETE FROM\n                `ClientAuthenticationToken`\n            WHERE\n                `ClientConnection` = ' . $objDatabase->SqlVariable($this->intId) . '\n        ');\n    }\n\n\n    \n///////////////////////////////\n    // METHODS TO EXTRACT INFO ABOUT THE CLASS\n    ///////////////////////////////\n\n    /**\n     * Static method to retrieve the Database object that owns this class.\n     * @return string Name of the table from which this class has been created.\n     */\n    public static function GetTableName() {\n        return \"ClientConnection\";\n    }\n\n    /**\n     * Static method to retrieve the Table name from which this class has been created.\n     * @return string Name of the table from which this class has been created.\n     */\n    public static function GetDatabaseName() {\n        return ProjectFunctions::$Database[ClientConnection::GetDatabaseIndex()]->Database;\n    }\n\n    /**\n     * Static method to retrieve the Database index in the configuration.inc.php file.\n     * This can be useful when there are two databases of the same name which create\n     * confusion for the developer. There are no internal uses of this function but are\n     * here to help retrieve info if need be!\n     * @return int position or index of the database in the config file.\n     */\n    public static function GetDatabaseIndex() {\n        return 1;\n    }\n\n    ////////////////////////////////////////\n    // METHODS for SOAP-BASED WEB SERVICES\n    ////////////////////////////////////////\n\n    public static function GetSoapComplexTypeXml() {\n        $strToReturn = '<complexType name=\"ClientConnection\"><sequence>';\n        $strToReturn .= '<element name=\"Id\" type=\"xsd:int\"/>';\n        $strToReturn .= '<element name=\"ClientIpAddress\" type=\"xsd:string\"/>';\n        $strToReturn .= '<element name=\"ClientUserAgent\" type=\"xsd:string\"/>';\n        $strToReturn .= '<element name=\"UpdateDateTime\" type=\"xsd:dateTime\"/>';\n        $strToReturn .= '<element name=\"AccountObject\" type=\"xsd1:Account\"/>';\n        $strToReturn .= '<element name=\"SearchMetaInfo\" type=\"xsd:string\"/>';\n        $strToReturn .= '<element name=\"LastUpdated\" type=\"xsd:string\"/>';\n        $strToReturn .= '<element name=\"ObjectOwner\" type=\"xsd:int\"/>';\n        $strToReturn .= '<element name=\"__blnRestored\" type=\"xsd:boolean\"/>';\n        $strToReturn .= '</sequence></complexType>';\n        return $strToReturn;\n    }\n\n    public static function AlterSoapComplexTypeArray(&$strComplexTypeArray) {\n        if (!array_key_exists('ClientConnection', $strComplexTypeArray)) {\n            $strComplexTypeArray['ClientConnection'] = ClientConnection::GetSoapComplexTypeXml();\n            Account::AlterSoapComplexTypeArray($strComplexTypeArray);\n        }\n    }\n\n    public static function GetArrayFromSoapArray($objSoapArray) {\n        $objArrayToReturn = array();\n\n        foreach ($objSoapArray as $objSoapObject)\n            array_push($objArrayToReturn, ClientConnection::GetObjectFromSoapObject($objSoapObject));\n\n        return $objArrayToReturn;\n    }\n\n    public static function GetObjectFromSoapObject($objSoapObject) {\n        $objToReturn = new ClientConnection();\n        if (property_exists($objSoapObject, 'Id'))\n            $objToReturn->intId = $objSoapObject->Id;\n        if (property_exists($objSoapObject, 'ClientIpAddress'))\n            $objToReturn->strClientIpAddress = $objSoapObject->ClientIpAddress;\n        if (property_exists($objSoapObject, 'ClientUserAgent'))\n            $objToReturn->strClientUserAgent = $objSoapObject->ClientUserAgent;\n        if (property_exists($objSoapObject, 'UpdateDateTime'))\n            $objToReturn->dttUpdateDateTime = new dxDateTime($objSoapObject->UpdateDateTime);\n        if ((property_exists($objSoapObject, 'AccountObject')) &&\n            ($objSoapObject->AccountObject))\n            $objToReturn->AccountObject = Account::GetObjectFromSoapObject($objSoapObject->AccountObject);\n        if (property_exists($objSoapObject, 'SearchMetaInfo'))\n            $objToReturn->strSearchMetaInfo = $objSoapObject->SearchMetaInfo;\n        if (property_exists($objSoapObject, 'LastUpdated'))\n            $objToReturn->strLastUpdated = $objSoapObject->LastUpdated;\n        if (property_exists($objSoapObject, 'ObjectOwner'))\n            $objToReturn->intObjectOwner = $objSoapObject->ObjectOwner;\n        if (property_exists($objSoapObject, '__blnRestored'))\n            $objToReturn->__blnRestored = $objSoapObject->__blnRestored;\n        return $objToReturn;\n    }\n\n    public static function GetSoapArrayFromArray($objArray) {\n        if (!$objArray)\n            return null;\n\n        $objArrayToReturn = array();\n\n        foreach ($objArray as $objObject)\n            array_push($objArrayToReturn, ClientConnection::GetSoapObjectFromObject($objObject, true));\n\n        return unserialize(serialize($objArrayToReturn));\n    }\n\n    public static function GetSoapObjectFromObject($objObject, $blnBindRelatedObjects) {\n        if ($objObject->dttUpdateDateTime)\n            $objObject->dttUpdateDateTime = $objObject->dttUpdateDateTime->qFormat(dxDateTime::FormatSoap);\n        if ($objObject->objAccountObject)\n            $objObject->objAccountObject = Account::GetSoapObjectFromObject($objObject->objAccountObject, false);\n        else if (!$blnBindRelatedObjects)\n            $objObject->intAccount = null;\n        return $objObject;\n    }\n\n\n    ////////////////////////////////////////\n    // METHODS for JSON Object Translation\n    ////////////////////////////////////////\n\n    // this function is required for objects that implement the\n    // IteratorAggregate interface\n    public function getIterator() {\n        ///////////////////\n        // Member Variables\n        ///////////////////\n        $iArray['Id'] = $this->intId;\n        $iArray['ClientIpAddress'] = $this->strClientIpAddress;\n        $iArray['ClientUserAgent'] = $this->strClientUserAgent;\n        $iArray['UpdateDateTime'] = $this->dttUpdateDateTime;\n        $iArray['Account'] = $this->intAccount;\n        $iArray['SearchMetaInfo'] = $this->strSearchMetaInfo;\n        $iArray['LastUpdated'] = $this->strLastUpdated;\n        $iArray['ObjectOwner'] = $this->intObjectOwner;\n        return new ArrayIterator($iArray);\n    }\n\n    // this function returns a Json formatted string using the\n    // IteratorAggregate interface\n    public function getJson() {\n        return json_encode($this->getIterator());\n    }\n\n    /**\n     * Default \"toJsObject\" handler\n     * Specifies how the object should be displayed in JQuery UI lists and menus. Note that these lists use\n     * value and label differently.\n     *\n     * value \t= The short form of what to display in the list and selection.\n     * label \t= [optional] If defined, is what is displayed in the menu\n     * id \t\t= Primary key of object.\n     *\n     * @return an array that specifies how to display the object\n     */\n    public function toJsObject () {\n        return JavaScriptHelper::toJsObject(array('value' => $this->__toString(), 'id' =>  $this->intId ));\n    }\n\n\n}\n\n/////////////////////////////////////\n\t// ADDITIONAL CLASSES for DIVBLOX QUERY\n\t/////////////////////////////////////\n\n    /**\n     * @uses dxQueryNode\n     *\n     * @property-read dxQueryNode $Id\n     * @property-read dxQueryNode $ClientIpAddress\n     * @property-read dxQueryNode $ClientUserAgent\n     * @property-read dxQueryNode $UpdateDateTime\n     * @property-read dxQueryNode $Account\n     * @property-read dxQueryNodeAccount $AccountObject\n     * @property-read dxQueryNode $SearchMetaInfo\n     * @property-read dxQueryNode $LastUpdated\n     * @property-read dxQueryNode $ObjectOwner\n     *\n     *\n     * @property-read dxQueryReverseReferenceNodeClientAuthenticationToken $ClientAuthenticationToken\n\n     * @property-read dxQueryNode $_PrimaryKeyNode\n     **/\n\tclass dxQueryNodeClientConnection extends dxQueryNode {\n\t\tprotected $strTableName = 'ClientConnection';\n\t\tprotected $strPrimaryKey = 'Id';\n\t\tprotected $strClassName = 'ClientConnection';\n\t\tpublic function __get($strName) {\n\t\t\tswitch ($strName) {\n\t\t\t\tcase 'Id':\n\t\t\t\t\treturn new dxQueryNode('Id', 'Id', 'Integer', $this);\n\t\t\t\tcase 'ClientIpAddress':\n\t\t\t\t\treturn new dxQueryNode('ClientIpAddress', 'ClientIpAddress', 'VarChar', $this);\n\t\t\t\tcase 'ClientUserAgent':\n\t\t\t\t\treturn new dxQueryNode('ClientUserAgent', 'ClientUserAgent', 'VarChar', $this);\n\t\t\t\tcase 'UpdateDateTime':\n\t\t\t\t\treturn new dxQueryNode('UpdateDateTime', 'UpdateDateTime', 'DateTime', $this);\n\t\t\t\tcase 'Account':\n\t\t\t\t\treturn new dxQueryNode('Account', 'Account', 'Integer', $this);\n\t\t\t\tcase 'AccountObject':\n\t\t\t\t\treturn new dxQueryNodeAccount('Account', 'AccountObject', 'Integer', $this);\n\t\t\t\tcase 'SearchMetaInfo':\n\t\t\t\t\treturn new dxQueryNode('SearchMetaInfo', 'SearchMetaInfo', 'Blob', $this);\n\t\t\t\tcase 'LastUpdated':\n\t\t\t\t\treturn new dxQueryNode('LastUpdated', 'LastUpdated', 'VarChar', $this);\n\t\t\t\tcase 'ObjectOwner':\n\t\t\t\t\treturn new dxQueryNode('ObjectOwner', 'ObjectOwner', 'Integer', $this);\n\t\t\t\tcase 'ClientAuthenticationToken':\n\t\t\t\t\treturn new dxQueryReverseReferenceNodeClientAuthenticationToken($this, 'clientauthenticationtoken', 'reverse_reference', 'ClientConnection', 'ClientAuthenticationToken');\n\n\t\t\t\tcase '_PrimaryKeyNode':\n\t\t\t\t\treturn new dxQueryNode('Id', 'Id', 'Integer', $this);\n\t\t\t\tdefault:\n\t\t\t\t\ttry {\n\t\t\t\t\t\treturn parent::__get($strName);\n\t\t\t\t\t} catch (dxCallerException $objExc) {\n\t\t\t\t\t\t$objExc->IncrementOffset();\n\t\t\t\t\t\tthrow $objExc;\n\t\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n    /**\n     * @property-read dxQueryNode $Id\n     * @property-read dxQueryNode $ClientIpAddress\n     * @property-read dxQueryNode $ClientUserAgent\n     * @property-read dxQueryNode $UpdateDateTime\n     * @property-read dxQueryNode $Account\n     * @property-read dxQueryNodeAccount $AccountObject\n     * @property-read dxQueryNode $SearchMetaInfo\n     * @property-read dxQueryNode $LastUpdated\n     * @property-read dxQueryNode $ObjectOwner\n     *\n     *\n     * @property-read dxQueryReverseReferenceNodeClientAuthenticationToken $ClientAuthenticationToken\n\n     * @property-read dxQueryNode $_PrimaryKeyNode\n     **/\n\tclass dxQueryReverseReferenceNodeClientConnection extends dxQueryReverseReferenceNode {\n\t\tprotected $strTableName = 'ClientConnection';\n\t\tprotected $strPrimaryKey = 'Id';\n\t\tprotected $strClassName = 'ClientConnection';\n\t\tpublic function __get($strName) {\n\t\t\tswitch ($strName) {\n\t\t\t\tcase 'Id':\n\t\t\t\t\treturn new dxQueryNode('Id', 'Id', 'integer', $this);\n\t\t\t\tcase 'ClientIpAddress':\n\t\t\t\t\treturn new dxQueryNode('ClientIpAddress', 'ClientIpAddress', 'string', $this);\n\t\t\t\tcase 'ClientUserAgent':\n\t\t\t\t\treturn new dxQueryNode('ClientUserAgent', 'ClientUserAgent', 'string', $this);\n\t\t\t\tcase 'UpdateDateTime':\n\t\t\t\t\treturn new dxQueryNode('UpdateDateTime', 'UpdateDateTime', 'dxDateTime', $this);\n\t\t\t\tcase 'Account':\n\t\t\t\t\treturn new dxQueryNode('Account', 'Account', 'integer', $this);\n\t\t\t\tcase 'AccountObject':\n\t\t\t\t\treturn new dxQueryNodeAccount('Account', 'AccountObject', 'integer', $this);\n\t\t\t\tcase 'SearchMetaInfo':\n\t\t\t\t\treturn new dxQueryNode('SearchMetaInfo', 'SearchMetaInfo', 'string', $this);\n\t\t\t\tcase 'LastUpdated':\n\t\t\t\t\treturn new dxQueryNode('LastUpdated', 'LastUpdated', 'string', $this);\n\t\t\t\tcase 'ObjectOwner':\n\t\t\t\t\treturn new dxQueryNode('ObjectOwner', 'ObjectOwner', 'integer', $this);\n\t\t\t\tcase 'ClientAuthenticationToken':\n\t\t\t\t\treturn new dxQueryReverseReferenceNodeClientAuthenticationToken($this, 'clientauthenticationtoken', 'reverse_reference', 'ClientConnection', 'ClientAuthenticationToken');\n\n\t\t\t\tcase '_PrimaryKeyNode':\n\t\t\t\t\treturn new dxQueryNode('Id', 'Id', 'integer', $this);\n\t\t\t\tdefault:\n\t\t\t\t\ttry {\n\t\t\t\t\t\treturn parent::__get($strName);\n\t\t\t\t\t} catch (dxCallerException $objExc) {\n\t\t\t\t\t\t$objExc->IncrementOffset();\n\t\t\t\t\t\tthrow $objExc;\n\t\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n?>\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- divblox/config/database/data_model_orm/generated/ClientConnectionGen.class.php	(revision 8088b90ea0ab6ee30e69c949666fde75c4664610)
+++ divblox/config/database/data_model_orm/generated/ClientConnectionGen.class.php	(date 1589789351382)
@@ -19,9 +19,9 @@
  * @property string $ClientIpAddress the value for strClientIpAddress 
  * @property string $ClientUserAgent the value for strClientUserAgent 
  * @property dxDateTime $UpdateDateTime the value for dttUpdateDateTime 
+ * @property-read string $LastUpdated the value for strLastUpdated (Read-Only Timestamp)
  * @property integer $Account the value for intAccount 
  * @property string $SearchMetaInfo the value for strSearchMetaInfo 
- * @property-read string $LastUpdated the value for strLastUpdated (Read-Only Timestamp)
  * @property integer $ObjectOwner the value for intObjectOwner 
  * @property Account $AccountObject the value for the Account object referenced by intAccount 
  * @property-read ClientAuthenticationToken $_ClientAuthenticationToken the value for the private _objClientAuthenticationToken (Read-Only) if set due to an expansion on the ClientAuthenticationToken.ClientConnection reverse relationship
@@ -68,6 +68,14 @@
     const UpdateDateTimeDefault = null;
 
 
+    /**
+     * Protected member variable that maps to the database column ClientConnection.LastUpdated
+     * @var string strLastUpdated
+     */
+    protected $strLastUpdated;
+    const LastUpdatedDefault = null;
+
+
     /**
      * Protected member variable that maps to the database column ClientConnection.Account
      * @var integer intAccount
@@ -84,14 +92,6 @@
     const SearchMetaInfoDefault = null;
 
 
-    /**
-     * Protected member variable that maps to the database column ClientConnection.LastUpdated
-     * @var string strLastUpdated
-     */
-    protected $strLastUpdated;
-    const LastUpdatedDefault = null;
-
-
     /**
      * Protected member variable that maps to the database column ClientConnection.ObjectOwner
      * @var integer intObjectOwner
@@ -154,9 +154,9 @@
         $this->strClientIpAddress = ClientConnection::ClientIpAddressDefault;
         $this->strClientUserAgent = ClientConnection::ClientUserAgentDefault;
         $this->dttUpdateDateTime = (ClientConnection::UpdateDateTimeDefault === null)?null:new dxDateTime(ClientConnection::UpdateDateTimeDefault);
+        $this->strLastUpdated = ClientConnection::LastUpdatedDefault;
         $this->intAccount = ClientConnection::AccountDefault;
         $this->strSearchMetaInfo = ClientConnection::SearchMetaInfoDefault;
-        $this->strLastUpdated = ClientConnection::LastUpdatedDefault;
         $this->intObjectOwner = ClientConnection::ObjectOwnerDefault;
     }
 
@@ -498,9 +498,9 @@
             $objBuilder->AddSelectItem($strTableName, 'ClientIpAddress', $strAliasPrefix . 'ClientIpAddress');
             $objBuilder->AddSelectItem($strTableName, 'ClientUserAgent', $strAliasPrefix . 'ClientUserAgent');
             $objBuilder->AddSelectItem($strTableName, 'UpdateDateTime', $strAliasPrefix . 'UpdateDateTime');
+            $objBuilder->AddSelectItem($strTableName, 'LastUpdated', $strAliasPrefix . 'LastUpdated');
             $objBuilder->AddSelectItem($strTableName, 'Account', $strAliasPrefix . 'Account');
             $objBuilder->AddSelectItem($strTableName, 'SearchMetaInfo', $strAliasPrefix . 'SearchMetaInfo');
-            $objBuilder->AddSelectItem($strTableName, 'LastUpdated', $strAliasPrefix . 'LastUpdated');
             $objBuilder->AddSelectItem($strTableName, 'ObjectOwner', $strAliasPrefix . 'ObjectOwner');
         }
     }
@@ -635,15 +635,15 @@
         $strAlias = $strAliasPrefix . 'UpdateDateTime';
         $strAliasName = !empty($strColumnAliasArray[$strAlias]) ? $strColumnAliasArray[$strAlias] : $strAlias;
         $objToReturn->dttUpdateDateTime = $objDbRow->GetColumn($strAliasName, 'DateTime');
+        $strAlias = $strAliasPrefix . 'LastUpdated';
+        $strAliasName = !empty($strColumnAliasArray[$strAlias]) ? $strColumnAliasArray[$strAlias] : $strAlias;
+        $objToReturn->strLastUpdated = $objDbRow->GetColumn($strAliasName, 'VarChar');
         $strAlias = $strAliasPrefix . 'Account';
         $strAliasName = !empty($strColumnAliasArray[$strAlias]) ? $strColumnAliasArray[$strAlias] : $strAlias;
         $objToReturn->intAccount = $objDbRow->GetColumn($strAliasName, 'Integer');
         $strAlias = $strAliasPrefix . 'SearchMetaInfo';
         $strAliasName = !empty($strColumnAliasArray[$strAlias]) ? $strColumnAliasArray[$strAlias] : $strAlias;
         $objToReturn->strSearchMetaInfo = $objDbRow->GetColumn($strAliasName, 'Blob');
-        $strAlias = $strAliasPrefix . 'LastUpdated';
-        $strAliasName = !empty($strColumnAliasArray[$strAlias]) ? $strColumnAliasArray[$strAlias] : $strAlias;
-        $objToReturn->strLastUpdated = $objDbRow->GetColumn($strAliasName, 'VarChar');
         $strAlias = $strAliasPrefix . 'ObjectOwner';
         $strAliasName = !empty($strColumnAliasArray[$strAlias]) ? $strColumnAliasArray[$strAlias] : $strAlias;
         $objToReturn->intObjectOwner = $objDbRow->GetColumn($strAliasName, 'Integer');
@@ -858,9 +858,9 @@
             $ChangedArray = array_merge($ChangedArray,array("ClientIpAddress" => $this->strClientIpAddress));
             $ChangedArray = array_merge($ChangedArray,array("ClientUserAgent" => $this->strClientUserAgent));
             $ChangedArray = array_merge($ChangedArray,array("UpdateDateTime" => $this->dttUpdateDateTime));
+            $ChangedArray = array_merge($ChangedArray,array("LastUpdated" => $this->strLastUpdated));
             $ChangedArray = array_merge($ChangedArray,array("Account" => $this->intAccount));
             $ChangedArray = array_merge($ChangedArray,array("SearchMetaInfo" => $this->strSearchMetaInfo));
-            $ChangedArray = array_merge($ChangedArray,array("LastUpdated" => $this->strLastUpdated));
             $ChangedArray = array_merge($ChangedArray,array("ObjectOwner" => $this->intObjectOwner));
             $newAuditLogEntry->AuditLogEntryDetail = json_encode($ChangedArray);
         } else {
@@ -897,6 +897,14 @@
                 $ChangedArray = array_merge($ChangedArray,array("UpdateDateTime" => array("Before" => $ExistingValueStr,"After" => $this->dttUpdateDateTime)));
                 //$ChangedArray = array_merge($ChangedArray,array("UpdateDateTime" => "From: ".$ExistingValueStr." to: ".$this->dttUpdateDateTime));
             }
+            $ExistingValueStr = "NULL";
+            if (!is_null($ExistingObj->LastUpdated)) {
+                $ExistingValueStr = $ExistingObj->LastUpdated;
+            }
+            if ($ExistingObj->LastUpdated != $this->strLastUpdated) {
+                $ChangedArray = array_merge($ChangedArray,array("LastUpdated" => array("Before" => $ExistingValueStr,"After" => $this->strLastUpdated)));
+                //$ChangedArray = array_merge($ChangedArray,array("LastUpdated" => "From: ".$ExistingValueStr." to: ".$this->strLastUpdated));
+            }
             $ExistingValueStr = "NULL";
             if (!is_null($ExistingObj->Account)) {
                 $ExistingValueStr = $ExistingObj->Account;
@@ -913,14 +921,6 @@
                 $ChangedArray = array_merge($ChangedArray,array("SearchMetaInfo" => array("Before" => $ExistingValueStr,"After" => $this->strSearchMetaInfo)));
                 //$ChangedArray = array_merge($ChangedArray,array("SearchMetaInfo" => "From: ".$ExistingValueStr." to: ".$this->strSearchMetaInfo));
             }
-            $ExistingValueStr = "NULL";
-            if (!is_null($ExistingObj->LastUpdated)) {
-                $ExistingValueStr = $ExistingObj->LastUpdated;
-            }
-            if ($ExistingObj->LastUpdated != $this->strLastUpdated) {
-                $ChangedArray = array_merge($ChangedArray,array("LastUpdated" => array("Before" => $ExistingValueStr,"After" => $this->strLastUpdated)));
-                //$ChangedArray = array_merge($ChangedArray,array("LastUpdated" => "From: ".$ExistingValueStr." to: ".$this->strLastUpdated));
-            }
             $ExistingValueStr = "NULL";
             if (!is_null($ExistingObj->ObjectOwner)) {
                 $ExistingValueStr = $ExistingObj->ObjectOwner;
@@ -1041,9 +1041,9 @@
         $ChangedArray = array_merge($ChangedArray,array("ClientIpAddress" => $this->strClientIpAddress));
         $ChangedArray = array_merge($ChangedArray,array("ClientUserAgent" => $this->strClientUserAgent));
         $ChangedArray = array_merge($ChangedArray,array("UpdateDateTime" => $this->dttUpdateDateTime));
+        $ChangedArray = array_merge($ChangedArray,array("LastUpdated" => $this->strLastUpdated));
         $ChangedArray = array_merge($ChangedArray,array("Account" => $this->intAccount));
         $ChangedArray = array_merge($ChangedArray,array("SearchMetaInfo" => $this->strSearchMetaInfo));
-        $ChangedArray = array_merge($ChangedArray,array("LastUpdated" => $this->strLastUpdated));
         $ChangedArray = array_merge($ChangedArray,array("ObjectOwner" => $this->intObjectOwner));
         $newAuditLogEntry->AuditLogEntryDetail = json_encode($ChangedArray);
         try {
@@ -1125,9 +1125,9 @@
         $this->strClientIpAddress = $objReloaded->strClientIpAddress;
         $this->strClientUserAgent = $objReloaded->strClientUserAgent;
         $this->dttUpdateDateTime = $objReloaded->dttUpdateDateTime;
+        $this->strLastUpdated = $objReloaded->strLastUpdated;
         $this->Account = $objReloaded->Account;
         $this->strSearchMetaInfo = $objReloaded->strSearchMetaInfo;
-        $this->strLastUpdated = $objReloaded->strLastUpdated;
         $this->intObjectOwner = $objReloaded->intObjectOwner;
     }
     ////////////////////
@@ -1174,6 +1174,13 @@
                  */
                 return $this->dttUpdateDateTime;
 
+            case 'LastUpdated':
+                /**
+                 * Gets the value for strLastUpdated (Read-Only Timestamp)
+                 * @return string
+                 */
+                return $this->strLastUpdated;
+
             case 'Account':
                 /**
                  * Gets the value for intAccount 
@@ -1188,13 +1195,6 @@
                  */
                 return $this->strSearchMetaInfo;
 
-            case 'LastUpdated':
-                /**
-                 * Gets the value for strLastUpdated (Read-Only Timestamp)
-                 * @return string
-                 */
-                return $this->strLastUpdated;
-
             case 'ObjectOwner':
                 /**
                  * Gets the value for intObjectOwner 
@@ -1600,9 +1600,9 @@
         $strToReturn .= '<element name="ClientIpAddress" type="xsd:string"/>';
         $strToReturn .= '<element name="ClientUserAgent" type="xsd:string"/>';
         $strToReturn .= '<element name="UpdateDateTime" type="xsd:dateTime"/>';
+        $strToReturn .= '<element name="LastUpdated" type="xsd:string"/>';
         $strToReturn .= '<element name="AccountObject" type="xsd1:Account"/>';
         $strToReturn .= '<element name="SearchMetaInfo" type="xsd:string"/>';
-        $strToReturn .= '<element name="LastUpdated" type="xsd:string"/>';
         $strToReturn .= '<element name="ObjectOwner" type="xsd:int"/>';
         $strToReturn .= '<element name="__blnRestored" type="xsd:boolean"/>';
         $strToReturn .= '</sequence></complexType>';
@@ -1635,13 +1635,13 @@
             $objToReturn->strClientUserAgent = $objSoapObject->ClientUserAgent;
         if (property_exists($objSoapObject, 'UpdateDateTime'))
             $objToReturn->dttUpdateDateTime = new dxDateTime($objSoapObject->UpdateDateTime);
+        if (property_exists($objSoapObject, 'LastUpdated'))
+            $objToReturn->strLastUpdated = $objSoapObject->LastUpdated;
         if ((property_exists($objSoapObject, 'AccountObject')) &&
             ($objSoapObject->AccountObject))
             $objToReturn->AccountObject = Account::GetObjectFromSoapObject($objSoapObject->AccountObject);
         if (property_exists($objSoapObject, 'SearchMetaInfo'))
             $objToReturn->strSearchMetaInfo = $objSoapObject->SearchMetaInfo;
-        if (property_exists($objSoapObject, 'LastUpdated'))
-            $objToReturn->strLastUpdated = $objSoapObject->LastUpdated;
         if (property_exists($objSoapObject, 'ObjectOwner'))
             $objToReturn->intObjectOwner = $objSoapObject->ObjectOwner;
         if (property_exists($objSoapObject, '__blnRestored'))
@@ -1686,9 +1686,9 @@
         $iArray['ClientIpAddress'] = $this->strClientIpAddress;
         $iArray['ClientUserAgent'] = $this->strClientUserAgent;
         $iArray['UpdateDateTime'] = $this->dttUpdateDateTime;
+        $iArray['LastUpdated'] = $this->strLastUpdated;
         $iArray['Account'] = $this->intAccount;
         $iArray['SearchMetaInfo'] = $this->strSearchMetaInfo;
-        $iArray['LastUpdated'] = $this->strLastUpdated;
         $iArray['ObjectOwner'] = $this->intObjectOwner;
         return new ArrayIterator($iArray);
     }
@@ -1728,10 +1728,10 @@
      * @property-read dxQueryNode $ClientIpAddress
      * @property-read dxQueryNode $ClientUserAgent
      * @property-read dxQueryNode $UpdateDateTime
+     * @property-read dxQueryNode $LastUpdated
      * @property-read dxQueryNode $Account
      * @property-read dxQueryNodeAccount $AccountObject
      * @property-read dxQueryNode $SearchMetaInfo
-     * @property-read dxQueryNode $LastUpdated
      * @property-read dxQueryNode $ObjectOwner
      *
      *
@@ -1753,14 +1753,14 @@
 					return new dxQueryNode('ClientUserAgent', 'ClientUserAgent', 'VarChar', $this);
 				case 'UpdateDateTime':
 					return new dxQueryNode('UpdateDateTime', 'UpdateDateTime', 'DateTime', $this);
+				case 'LastUpdated':
+					return new dxQueryNode('LastUpdated', 'LastUpdated', 'VarChar', $this);
 				case 'Account':
 					return new dxQueryNode('Account', 'Account', 'Integer', $this);
 				case 'AccountObject':
 					return new dxQueryNodeAccount('Account', 'AccountObject', 'Integer', $this);
 				case 'SearchMetaInfo':
 					return new dxQueryNode('SearchMetaInfo', 'SearchMetaInfo', 'Blob', $this);
-				case 'LastUpdated':
-					return new dxQueryNode('LastUpdated', 'LastUpdated', 'VarChar', $this);
 				case 'ObjectOwner':
 					return new dxQueryNode('ObjectOwner', 'ObjectOwner', 'Integer', $this);
 				case 'ClientAuthenticationToken':
@@ -1784,10 +1784,10 @@
      * @property-read dxQueryNode $ClientIpAddress
      * @property-read dxQueryNode $ClientUserAgent
      * @property-read dxQueryNode $UpdateDateTime
+     * @property-read dxQueryNode $LastUpdated
      * @property-read dxQueryNode $Account
      * @property-read dxQueryNodeAccount $AccountObject
      * @property-read dxQueryNode $SearchMetaInfo
-     * @property-read dxQueryNode $LastUpdated
      * @property-read dxQueryNode $ObjectOwner
      *
      *
@@ -1809,14 +1809,14 @@
 					return new dxQueryNode('ClientUserAgent', 'ClientUserAgent', 'string', $this);
 				case 'UpdateDateTime':
 					return new dxQueryNode('UpdateDateTime', 'UpdateDateTime', 'dxDateTime', $this);
+				case 'LastUpdated':
+					return new dxQueryNode('LastUpdated', 'LastUpdated', 'string', $this);
 				case 'Account':
 					return new dxQueryNode('Account', 'Account', 'integer', $this);
 				case 'AccountObject':
 					return new dxQueryNodeAccount('Account', 'AccountObject', 'integer', $this);
 				case 'SearchMetaInfo':
 					return new dxQueryNode('SearchMetaInfo', 'SearchMetaInfo', 'string', $this);
-				case 'LastUpdated':
-					return new dxQueryNode('LastUpdated', 'LastUpdated', 'string', $this);
 				case 'ObjectOwner':
 					return new dxQueryNode('ObjectOwner', 'ObjectOwner', 'integer', $this);
 				case 'ClientAuthenticationToken':
Index: divblox/config/database/data_model_orm/generated/PasswordResetGen.class.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?php\n/**\n * The abstract PasswordResetGen class defined here is\n * code-generated and contains all the basic CRUD-type functionality as well as\n * basic methods to handle relationships and index-based loading.\n *\n * To use, you should use the PasswordReset subclass which\n * extends this PasswordResetGen class.\n *\n * Because subsequent re-code generations will overwrite any changes to this\n * file, you should leave this file unaltered to prevent yourself from losing\n * any information or code changes.  All customizations should be done by\n * overriding existing or implementing new methods, properties and variables\n * in the PasswordReset class.\n *\n * @package divblox_app\n * @subpackage GeneratedDataObjects\n * @property-read integer $Id the value for intId (Read-Only PK)\n * @property string $Token the value for strToken (Unique)\n * @property dxDateTime $CreatedDateTime the value for dttCreatedDateTime \n * @property integer $Account the value for intAccount \n * @property string $SearchMetaInfo the value for strSearchMetaInfo \n * @property-read string $LastUpdated the value for strLastUpdated (Read-Only Timestamp)\n * @property integer $ObjectOwner the value for intObjectOwner \n * @property Account $AccountObject the value for the Account object referenced by intAccount \n * @property-read boolean $__Restored whether or not this object was restored from the database (as opposed to created new)\n */\nclass PasswordResetGen extends dxBaseClass implements IteratorAggregate {\n\n    ///////////////////////////////////////////////////////////////////////\n    // PROTECTED MEMBER VARIABLES and TEXT FIELD MAXLENGTHS (if applicable)\n    ///////////////////////////////////////////////////////////////////////\n\n    /**\n     * Protected member variable that maps to the database PK Identity column PasswordReset.Id\n     * @var integer intId\n     */\n    protected $intId;\n    const IdDefault = null;\n\n\n    /**\n     * Protected member variable that maps to the database column PasswordReset.Token\n     * @var string strToken\n     */\n    protected $strToken;\n    const TokenMaxLength = 50;\n    const TokenDefault = null;\n\n\n    /**\n     * Protected member variable that maps to the database column PasswordReset.CreatedDateTime\n     * @var dxDateTime dttCreatedDateTime\n     */\n    protected $dttCreatedDateTime;\n    const CreatedDateTimeDefault = null;\n\n\n    /**\n     * Protected member variable that maps to the database column PasswordReset.Account\n     * @var integer intAccount\n     */\n    protected $intAccount;\n    const AccountDefault = null;\n\n\n    /**\n     * Protected member variable that maps to the database column PasswordReset.SearchMetaInfo\n     * @var string strSearchMetaInfo\n     */\n    protected $strSearchMetaInfo;\n    const SearchMetaInfoDefault = null;\n\n\n    /**\n     * Protected member variable that maps to the database column PasswordReset.LastUpdated\n     * @var string strLastUpdated\n     */\n    protected $strLastUpdated;\n    const LastUpdatedDefault = null;\n\n\n    /**\n     * Protected member variable that maps to the database column PasswordReset.ObjectOwner\n     * @var integer intObjectOwner\n     */\n    protected $intObjectOwner;\n    const ObjectOwnerDefault = null;\n\n\n    /**\n     * Protected array of virtual attributes for this object (e.g. extra/other calculated and/or non-object bound\n     * columns from the run-time database query result for this object).  Used by InstantiateDbRow and\n     * GetVirtualAttribute.\n     * @var string[] $__strVirtualAttributeArray\n     */\n    protected $__strVirtualAttributeArray = array();\n\n    /**\n     * Protected internal member variable that specifies whether or not this object is Restored from the database.\n     * Used by Save() to determine if Save() should perform a db UPDATE or INSERT.\n     * @var bool __blnRestored;\n     */\n    protected $__blnRestored;\n\n    ///////////////////////////////\n    // PROTECTED MEMBER OBJECTS\n    ///////////////////////////////\n\n    /**\n     * Protected member variable that contains the object pointed by the reference\n     * in the database column PasswordReset.Account.\n     *\n     * NOTE: Always use the AccountObject property getter to correctly retrieve this Account object.\n     * (Because this class implements late binding, this variable reference MAY be null.)\n     * @var Account objAccountObject\n     */\n    protected $objAccountObject;\n\n\n    /**\n     * Initialize each property with default values from database definition\n     */\n    public function Initialize() {\n        $this->intId = PasswordReset::IdDefault;\n        $this->strToken = PasswordReset::TokenDefault;\n        $this->dttCreatedDateTime = (PasswordReset::CreatedDateTimeDefault === null)?null:new dxDateTime(PasswordReset::CreatedDateTimeDefault);\n        $this->intAccount = PasswordReset::AccountDefault;\n        $this->strSearchMetaInfo = PasswordReset::SearchMetaInfoDefault;\n        $this->strLastUpdated = PasswordReset::LastUpdatedDefault;\n        $this->intObjectOwner = PasswordReset::ObjectOwnerDefault;\n    }\n\n    ///////////////////////////////\n    // CLASS-WIDE LOAD AND COUNT METHODS\n    ///////////////////////////////\n\n    /**\n     * Static method to retrieve the Database object that owns this class.\n     * @return dxDatabaseBase reference to the Database object that can query this class\n     */\n    public static function GetDatabase() {\n        return ProjectFunctions::$Database[1];\n    }\n\n    /**\n     * Load a PasswordReset from PK Info\n     * @param integer $intId\n     * @param dxQueryClause[] $objOptionalClauses additional optional dxQueryClause objects for this query\n     * @return PasswordReset\n     */\n    public static function Load($intId, $objOptionalClauses = null) {\n        $strCacheKey = false;\n        if (ProjectFunctions::$objCacheProvider && !$objOptionalClauses && ProjectFunctions::$Database[1]->Caching) {\n            $strCacheKey = ProjectFunctions::$objCacheProvider->CreateKey(ProjectFunctions::$Database[1]->Database, 'PasswordReset', $intId);\n            $objCachedObject = ProjectFunctions::$objCacheProvider->Get($strCacheKey);\n            if ($objCachedObject !== false) {\n                return $objCachedObject;\n            }\n        }\n        // Use QuerySingle to Perform the Query\n        $objToReturn = PasswordReset::QuerySingle(\n            dxQuery::AndCondition(\n                dxQuery::Equal(dxQueryN::PasswordReset()->Id, $intId)\n            ),\n            $objOptionalClauses\n        );\n        if ($strCacheKey !== false) {\n            ProjectFunctions::$objCacheProvider->Set($strCacheKey, $objToReturn);\n        }\n        return $objToReturn;\n    }\n\n    /**\n     * Load all PasswordResets\n     * @param dxQueryClause[] $objOptionalClauses additional optional dxQueryClause objects for this query\n     * @return PasswordReset[]\n     */\n    public static function LoadAll($objOptionalClauses = null) {\n        if (func_num_args() > 1) {\n            throw new dxCallerException(\"LoadAll must be called with an array of optional clauses as a single argument\");\n        }\n        // Call PasswordReset::QueryArray to perform the LoadAll query\n        try {\n            return PasswordReset::QueryArray(dxQuery::All(), $objOptionalClauses);\n        } catch (dxCallerException $objExc) {\n            $objExc->IncrementOffset();\n            throw $objExc;\n        }\n    }\n\n    /**\n     * Count all PasswordResets\n     * @return int\n     */\n    public static function CountAll() {\n        // Call PasswordReset::QueryCount to perform the CountAll query\n        return PasswordReset::QueryCount(dxQuery::All());\n    }\n\n    ///////////////////////////////\n    // DIVBLOX QUERY-RELATED METHODS\n    ///////////////////////////////\n\n    /**\n     * Internally called method to assist with calling divblox Query for this class\n     * on load methods.\n     * @param dxQueryBuilder &$objQueryBuilder the QueryBuilder object that will be created\n     * @param dxQueryCondition $objConditions any conditions on the query, itself\n     * @param dxQueryClause[] $objOptionalClausees additional optional dxQueryClause object or array of dxQueryClause objects for this query\n     * @param mixed[] $mixParameterArray a array of name-value pairs to perform PrepareStatement with (sending in null will skip the PrepareStatement step)\n     * @param boolean $blnCountOnly only select a rowcount\n     * @return string the query statement\n     */\n    protected static function BuildQueryStatement(&$objQueryBuilder, dxQueryCondition $objConditions, $objOptionalClauses, $mixParameterArray, $blnCountOnly) {\n        // Get the Database Object for this Class\n        $objDatabase = PasswordReset::GetDatabase();\n\n        // Create/Build out the QueryBuilder object with PasswordReset-specific SELET and FROM fields\n        $objQueryBuilder = new dxQueryBuilder($objDatabase, 'PasswordReset');\n\n        $blnAddAllFieldsToSelect = true;\n        if ($objDatabase->OnlyFullGroupBy) {\n            // see if we have any group by or aggregation clauses, if yes, don't add the fields to select clause\n            if ($objOptionalClauses instanceof dxQueryClause) {\n                if ($objOptionalClauses instanceof dxQueryAggregationClause || $objOptionalClauses instanceof dxQueryGroupBy) {\n                    $blnAddAllFieldsToSelect = false;\n                }\n            } else if (is_array($objOptionalClauses)) {\n                foreach ($objOptionalClauses as $objClause) {\n                    if ($objClause instanceof dxQueryAggregationClause || $objClause instanceof dxQueryGroupBy) {\n                        $blnAddAllFieldsToSelect = false;\n                        break;\n                    }\n                }\n            }\n        }\n        if ($blnAddAllFieldsToSelect) {\n            PasswordReset::GetSelectFields($objQueryBuilder, null, dxQuery::extractSelectClause($objOptionalClauses));\n        }\n        $objQueryBuilder->AddFromItem('PasswordReset');\n\n        // Set \"CountOnly\" option (if applicable)\n        if ($blnCountOnly)\n            $objQueryBuilder->SetCountOnlyFlag();\n\n        // Apply Any Conditions\n        if ($objConditions)\n            try {\n                $objConditions->UpdateQueryBuilder($objQueryBuilder);\n            } catch (dxCallerException $objExc) {\n                $objExc->IncrementOffset();\n                throw $objExc;\n            }\n\n        // Iterate through all the Optional Clauses (if any) and perform accordingly\n        if ($objOptionalClauses) {\n            if ($objOptionalClauses instanceof dxQueryClause)\n                $objOptionalClauses->UpdateQueryBuilder($objQueryBuilder);\n            else if (is_array($objOptionalClauses))\n                foreach ($objOptionalClauses as $objClause)\n                    $objClause->UpdateQueryBuilder($objQueryBuilder);\n            else\n                throw new dxCallerException('Optional Clauses must be a dxQueryClause object or an array of dxQueryClause objects');\n        }\n\n        // Get the SQL Statement\n        $strQuery = $objQueryBuilder->GetStatement();\n\n        // Prepare the Statement with the Query Parameters (if applicable)\n        if ($mixParameterArray) {\n            if (is_array($mixParameterArray)) {\n                if (ProjectFunctions::getDataSetSize($mixParameterArray))\n                    $strQuery = $objDatabase->PrepareStatement($strQuery, $mixParameterArray);\n\n                // Ensure that there are no other Unresolved Named Parameters\n                if (strpos($strQuery, chr(dxQueryNamedValue::DelimiterCode) . '{') !== false)\n                    throw new dxCallerException('Unresolved named parameters in the query');\n            } else\n                throw new dxCallerException('Parameter Array must be an array of name-value parameter pairs');\n        }\n\n        // Return the Objects\n        return $strQuery;\n    }\n\n    /**\n     * Static divblox Query method to query for a single PasswordReset object.\n     * Uses BuildQueryStatment to perform most of the work.\n     * @param dxQueryCondition $objConditions any conditions on the query, itself\n     * @param dxQueryClause[] $objOptionalClausees additional optional dxQueryClause objects for this query\n     * @param mixed[] $mixParameterArray a array of name-value pairs to perform PrepareStatement with\n     * @return PasswordReset the queried object\n     */\n    public static function QuerySingle(dxQueryCondition $objConditions, $objOptionalClauses = null, $mixParameterArray = null) {\n        // Get the Query Statement\n        try {\n            $strQuery = PasswordReset::BuildQueryStatement($objQueryBuilder, $objConditions, $objOptionalClauses, $mixParameterArray, false);\n        } catch (dxCallerException $objExc) {\n            $objExc->IncrementOffset();\n            throw $objExc;\n        }\n\n        // Perform the Query, Get the First Row, and Instantiate a new PasswordReset object\n        $objDbResult = $objQueryBuilder->Database->Query($strQuery);\n\n        // Do we have to expand anything?\n        if ($objQueryBuilder->ExpandAsArrayNode) {\n            $objToReturn = array();\n            $objPrevItemArray = array();\n            while ($objDbRow = $objDbResult->GetNextRow()) {\n                $objItem = PasswordReset::InstantiateDbRow($objDbRow, null, $objQueryBuilder->ExpandAsArrayNode, $objPrevItemArray, $objQueryBuilder->ColumnAliasArray);\n                if ($objItem) {\n                    $objToReturn[] = $objItem;\n                    $objPrevItemArray[$objItem->intId][] = $objItem;\n                }\n            }\n            if (ProjectFunctions::getDataSetSize($objToReturn)) {\n                // Since we only want the object to return, lets return the object and not the array.\n                return $objToReturn[0];\n            } else {\n                return null;\n            }\n        } else {\n            // No expands just return the first row\n            $objDbRow = $objDbResult->GetNextRow();\n            if(null === $objDbRow)\n                return null;\n            return PasswordReset::InstantiateDbRow($objDbRow, null, null, null, $objQueryBuilder->ColumnAliasArray);\n        }\n    }\n\n    /**\n     * Static divblox Query method to query for an array of PasswordReset objects.\n     * Uses BuildQueryStatment to perform most of the work.\n     * @param dxQueryCondition $objConditions any conditions on the query, itself\n     * @param dxQueryClause[] $objOptionalClausees additional optional dxQueryClause objects for this query\n     * @param mixed[] $mixParameterArray a array of name-value pairs to perform PrepareStatement with\n     * @return PasswordReset[] the queried objects as an array\n     */\n    public static function QueryArray(dxQueryCondition $objConditions, $objOptionalClauses = null, $mixParameterArray = null) {\n        // Get the Query Statement\n        try {\n            $strQuery = PasswordReset::BuildQueryStatement($objQueryBuilder, $objConditions, $objOptionalClauses, $mixParameterArray, false);\n        } catch (dxCallerException $objExc) {\n            $objExc->IncrementOffset();\n            throw $objExc;\n        }\n\n        // Perform the Query and Instantiate the Array Result\n        $objDbResult = $objQueryBuilder->Database->Query($strQuery);\n        return PasswordReset::InstantiateDbResult($objDbResult, $objQueryBuilder->ExpandAsArrayNode, $objQueryBuilder->ColumnAliasArray);\n    }\n\n    /**\n     * Static divblox query method to issue a query and get a cursor to progressively fetch its results.\n     * Uses BuildQueryStatment to perform most of the work.\n     * @param dxQueryCondition $objConditions any conditions on the query, itself\n     * @param dxQueryClause[] $objOptionalClauses additional optional dxQueryClause objects for this query\n     * @param mixed[] $mixParameterArray a array of name-value pairs to perform PrepareStatement with\n     * @return dxDatabaseResultBase the cursor resource instance\n     */\n    public static function QueryCursor(dxQueryCondition $objConditions, $objOptionalClauses = null, $mixParameterArray = null) {\n        // Get the query statement\n        try {\n            $strQuery = PasswordReset::BuildQueryStatement($objQueryBuilder, $objConditions, $objOptionalClauses, $mixParameterArray, false);\n        } catch (dxCallerException $objExc) {\n            $objExc->IncrementOffset();\n            throw $objExc;\n        }\n\n        // Perform the query\n        $objDbResult = $objQueryBuilder->Database->Query($strQuery);\n\n        // Return the results cursor\n        $objDbResult->QueryBuilder = $objQueryBuilder;\n        return $objDbResult;\n    }\n\n    /**\n     * Static divblox Query method to query for a count of PasswordReset objects.\n     * Uses BuildQueryStatment to perform most of the work.\n     * @param dxQueryCondition $objConditions any conditions on the query, itself\n     * @param dxQueryClause[] $objOptionalClausees additional optional dxQueryClause objects for this query\n     * @param mixed[] $mixParameterArray a array of name-value pairs to perform PrepareStatement with\n     * @return integer the count of queried objects as an integer\n     */\n    public static function QueryCount(dxQueryCondition $objConditions, $objOptionalClauses = null, $mixParameterArray = null) {\n        // Get the Query Statement\n        try {\n            $strQuery = PasswordReset::BuildQueryStatement($objQueryBuilder, $objConditions, $objOptionalClauses, $mixParameterArray, true);\n        } catch (dxCallerException $objExc) {\n            $objExc->IncrementOffset();\n            throw $objExc;\n        }\n\n        // Perform the Query and return the row_count\n        $objDbResult = $objQueryBuilder->Database->Query($strQuery);\n\n        // Figure out if the query is using GroupBy\n        $blnGrouped = false;\n\n        if ($objOptionalClauses) {\n            if ($objOptionalClauses instanceof dxQueryClause) {\n                if ($objOptionalClauses instanceof dxQueryGroupBy) {\n                    $blnGrouped = true;\n                }\n            } else if (is_array($objOptionalClauses)) {\n                foreach ($objOptionalClauses as $objClause) {\n                    if ($objClause instanceof dxQueryGroupBy) {\n                        $blnGrouped = true;\n                        break;\n                    }\n                }\n            } else {\n                throw new dxCallerException('Optional Clauses must be a dxQueryClause object or an array of dxQueryClause objects');\n            }\n        }\n\n        if ($blnGrouped)\n            // Groups in this query - return the count of Groups (which is the count of all rows)\n            return $objDbResult->CountRows();\n        else {\n            // No Groups - return the sql-calculated count(*) value\n            $strDbRow = $objDbResult->FetchRow();\n            return dxType::Cast($strDbRow[0], dxType::Integer);\n        }\n    }\n\n    public static function QueryArrayCached(dxQueryCondition $objConditions, $objOptionalClauses = null, $mixParameterArray = null, $blnForceUpdate = false) {\n        // Get the Database Object for this Class\n        $objDatabase = PasswordReset::GetDatabase();\n\n        $strQuery = PasswordReset::BuildQueryStatement($objQueryBuilder, $objConditions, $objOptionalClauses, $mixParameterArray, false);\n\n        $objCache = new dxCache('dxquery/passwordreset', $strQuery);\n        $cacheData = $objCache->GetData();\n\n        if (!$cacheData || $blnForceUpdate) {\n            $objDbResult = $objQueryBuilder->Database->Query($strQuery);\n            $arrResult = PasswordReset::InstantiateDbResult($objDbResult, $objQueryBuilder->ExpandAsArrayNode, $objQueryBuilder->ColumnAliasArray);\n            $objCache->SaveData(serialize($arrResult));\n        } else {\n            $arrResult = unserialize($cacheData);\n        }\n\n        return $arrResult;\n    }\n\n    /**\n     * Updates a dxQueryBuilder with the SELECT fields for this PasswordReset\n     * @param dxQueryBuilder $objBuilder the Query Builder object to update\n     * @param string $strPrefix optional prefix to add to the SELECT fields\n     */\n    public static function GetSelectFields(dxQueryBuilder $objBuilder, $strPrefix = null, dxQuerySelect $objSelect = null) {\n        if ($strPrefix) {\n            $strTableName = $strPrefix;\n            $strAliasPrefix = $strPrefix . '__';\n        } else {\n            $strTableName = 'PasswordReset';\n            $strAliasPrefix = '';\n        }\n\n        if ($objSelect) {\n            $objBuilder->AddSelectItem($strTableName, 'Id', $strAliasPrefix . 'Id');\n            $objSelect->AddSelectItems($objBuilder, $strTableName, $strAliasPrefix);\n        } else {\n            $objBuilder->AddSelectItem($strTableName, 'Id', $strAliasPrefix . 'Id');\n            $objBuilder->AddSelectItem($strTableName, 'Token', $strAliasPrefix . 'Token');\n            $objBuilder->AddSelectItem($strTableName, 'CreatedDateTime', $strAliasPrefix . 'CreatedDateTime');\n            $objBuilder->AddSelectItem($strTableName, 'Account', $strAliasPrefix . 'Account');\n            $objBuilder->AddSelectItem($strTableName, 'SearchMetaInfo', $strAliasPrefix . 'SearchMetaInfo');\n            $objBuilder->AddSelectItem($strTableName, 'LastUpdated', $strAliasPrefix . 'LastUpdated');\n            $objBuilder->AddSelectItem($strTableName, 'ObjectOwner', $strAliasPrefix . 'ObjectOwner');\n        }\n    }\n    ///////////////////////////////\n    // INSTANTIATION-RELATED METHODS\n    ///////////////////////////////\n\n    /**\n     * Do a possible array expansion on the given node. If the node is an ExpandAsArray node,\n     * it will add to the corresponding array in the object. Otherwise, it will follow the node\n     * so that any leaf expansions can be handled.\n     *\n     * @param DatabaseRowBase $objDbRow\n     * @param dxQueryBaseNode $objChildNode\n     * @param dxBaseClass $objPreviousItem\n     * @param string[] $strColumnAliasArray\n     */\n\n    public static function ExpandArray ($objDbRow, $strAliasPrefix, $objNode, $objPreviousItemArray, $strColumnAliasArray) {\n        if (!$objNode->ChildNodeArray) {\n            return false;\n        }\n\n        $strAlias = $strAliasPrefix . 'Id';\n        $strColumnAlias = !empty($strColumnAliasArray[$strAlias]) ? $strColumnAliasArray[$strAlias] : $strAlias;\n        $blnExpanded = false;\n\n        foreach ($objPreviousItemArray as $objPreviousItem) {\n            if ($objPreviousItem->intId != $objDbRow->GetColumn($strColumnAlias, 'Integer')) {\n                continue;\n            }\n\n            foreach ($objNode->ChildNodeArray as $objChildNode) {\n                $strPropName = $objChildNode->_PropertyName;\n                $strClassName = $objChildNode->_ClassName;\n                $blnExpanded = false;\n                $strLongAlias = $objChildNode->ExtendedAlias();\n\n                if ($objChildNode->ExpandAsArray) {\n                    $strVarName = '_obj' . $strPropName . 'Array';\n                    if (null === $objPreviousItem->$strVarName) {\n                        $objPreviousItem->$strVarName = array();\n                    }\n                    if ($intPreviousChildItemCount = ProjectFunctions::getDataSetSize($objPreviousItem->$strVarName)) {\n                        $objPreviousChildItems = $objPreviousItem->$strVarName;\n                        if ($objChildNode->_Type == \"association\") {\n                            $objChildNode = $objChildNode->FirstChild();\n                        }\n                        $nextAlias = $objChildNode->ExtendedAlias() . '__';\n\n                        $objChildItem = call_user_func(array ($strClassName, 'InstantiateDbRow'), $objDbRow, $nextAlias, $objChildNode, $objPreviousChildItems, $strColumnAliasArray);\n                        if ($objChildItem) {\n                            $objPreviousItem->{$strVarName}[] = $objChildItem;\n                            $blnExpanded = true;\n                        } elseif ($objChildItem === false) {\n                            $blnExpanded = true;\n                        }\n                    }\n                } else {\n\n                    // Follow single node if keys match\n                    $nodeType = $objChildNode->_Type;\n                    if ($nodeType == 'reverse_reference' || $nodeType == 'association') {\n                        $strVarName = '_obj' . $strPropName;\n                    } else {\n                        $strVarName = 'obj' . $strPropName;\n                    }\n\n                    if (null === $objPreviousItem->$strVarName) {\n                        return false;\n                    }\n\n                    $objPreviousChildItems = array($objPreviousItem->$strVarName);\n                    $blnResult = call_user_func(array ($strClassName, 'ExpandArray'), $objDbRow, $strLongAlias . '__', $objChildNode, $objPreviousChildItems, $strColumnAliasArray);\n\n                    if ($blnResult) {\n                        $blnExpanded = true;\n                    }\n                }\n            }\n        }\n        return $blnExpanded;\n    }\n\n    /**\n     * Instantiate a PasswordReset from a Database Row.\n     * Takes in an optional strAliasPrefix, used in case another Object::InstantiateDbRow\n     * is calling this PasswordReset::InstantiateDbRow in order to perform\n     * early binding on referenced objects.\n     * @param DatabaseRowBase $objDbRow\n     * @param string $strAliasPrefix\n     * @param dxQueryBaseNode $objExpandAsArrayNode\n     * @param dxBaseClass $arrPreviousItem\n     * @param string[] $strColumnAliasArray\n     * @return mixed Either a PasswordReset, or false to indicate the dbrow was used in an expansion, or null to indicate that this leaf is a duplicate.\n    */\n    public static function InstantiateDbRow($objDbRow, $strAliasPrefix = null, $objExpandAsArrayNode = null, $objPreviousItemArray = null, $strColumnAliasArray = array()) {\n        // If blank row, return null\n        if (!$objDbRow) {\n            return null;\n        }\n\n        if (empty ($strAliasPrefix) && $objPreviousItemArray) {\n            $strColumnAlias = !empty($strColumnAliasArray['Id']) ? $strColumnAliasArray['Id'] : 'Id';\n            $key = $objDbRow->GetColumn($strColumnAlias, 'Integer');\n            $objPreviousItemArray = (!empty ($objPreviousItemArray[$key]) ? $objPreviousItemArray[$key] : null);\n        }\n\n        // See if we're doing an array expansion on the previous item\n        if ($objExpandAsArrayNode &&\n                is_array($objPreviousItemArray) &&\n                ProjectFunctions::getDataSetSize($objPreviousItemArray)) {\n\n            if (PasswordReset::ExpandArray ($objDbRow, $strAliasPrefix, $objExpandAsArrayNode, $objPreviousItemArray, $strColumnAliasArray)) {\n                return false; // db row was used but no new object was created\n            }\n        }\n\n        // Create a new instance of the PasswordReset object\n        $objToReturn = new PasswordReset();\n        $objToReturn->__blnRestored = true;\n\n        $strAlias = $strAliasPrefix . 'Id';\n        $strAliasName = !empty($strColumnAliasArray[$strAlias]) ? $strColumnAliasArray[$strAlias] : $strAlias;\n        $objToReturn->intId = $objDbRow->GetColumn($strAliasName, 'Integer');\n        $strAlias = $strAliasPrefix . 'Token';\n        $strAliasName = !empty($strColumnAliasArray[$strAlias]) ? $strColumnAliasArray[$strAlias] : $strAlias;\n        $objToReturn->strToken = $objDbRow->GetColumn($strAliasName, 'VarChar');\n        $strAlias = $strAliasPrefix . 'CreatedDateTime';\n        $strAliasName = !empty($strColumnAliasArray[$strAlias]) ? $strColumnAliasArray[$strAlias] : $strAlias;\n        $objToReturn->dttCreatedDateTime = $objDbRow->GetColumn($strAliasName, 'DateTime');\n        $strAlias = $strAliasPrefix . 'Account';\n        $strAliasName = !empty($strColumnAliasArray[$strAlias]) ? $strColumnAliasArray[$strAlias] : $strAlias;\n        $objToReturn->intAccount = $objDbRow->GetColumn($strAliasName, 'Integer');\n        $strAlias = $strAliasPrefix . 'SearchMetaInfo';\n        $strAliasName = !empty($strColumnAliasArray[$strAlias]) ? $strColumnAliasArray[$strAlias] : $strAlias;\n        $objToReturn->strSearchMetaInfo = $objDbRow->GetColumn($strAliasName, 'Blob');\n        $strAlias = $strAliasPrefix . 'LastUpdated';\n        $strAliasName = !empty($strColumnAliasArray[$strAlias]) ? $strColumnAliasArray[$strAlias] : $strAlias;\n        $objToReturn->strLastUpdated = $objDbRow->GetColumn($strAliasName, 'VarChar');\n        $strAlias = $strAliasPrefix . 'ObjectOwner';\n        $strAliasName = !empty($strColumnAliasArray[$strAlias]) ? $strColumnAliasArray[$strAlias] : $strAlias;\n        $objToReturn->intObjectOwner = $objDbRow->GetColumn($strAliasName, 'Integer');\n\n        if (isset($objPreviousItemArray) && is_array($objPreviousItemArray)) {\n            foreach ($objPreviousItemArray as $objPreviousItem) {\n                if ($objToReturn->Id != $objPreviousItem->Id) {\n                    continue;\n                }\n                // this is a duplicate leaf in a complex join\n                return null; // indicates no object created and the db row has not been used\n            }\n        }\n\n        // Instantiate Virtual Attributes\n        $strVirtualPrefix = $strAliasPrefix . '__';\n        $strVirtualPrefixLength = strlen($strVirtualPrefix);\n        foreach ($objDbRow->GetColumnNameArray() as $strColumnName => $mixValue) {\n            if (strncmp($strColumnName, $strVirtualPrefix, $strVirtualPrefixLength) == 0)\n                $objToReturn->__strVirtualAttributeArray[substr($strColumnName, $strVirtualPrefixLength)] = $mixValue;\n        }\n\n\n        // Prepare to Check for Early/Virtual Binding\n\n        $objExpansionAliasArray = array();\n        if ($objExpandAsArrayNode) {\n            $objExpansionAliasArray = $objExpandAsArrayNode->ChildNodeArray;\n        }\n\n        if (!$strAliasPrefix)\n            $strAliasPrefix = 'PasswordReset__';\n\n        // Check for AccountObject Early Binding\n        $strAlias = $strAliasPrefix . 'Account__Id';\n        $strAliasName = !empty($strColumnAliasArray[$strAlias]) ? $strColumnAliasArray[$strAlias] : $strAlias;\n        if (!is_null($objDbRow->GetColumn($strAliasName))) {\n            $objExpansionNode = (empty($objExpansionAliasArray['Account']) ? null : $objExpansionAliasArray['Account']);\n            $objToReturn->objAccountObject = Account::InstantiateDbRow($objDbRow, $strAliasPrefix . 'Account__', $objExpansionNode, null, $strColumnAliasArray);\n        }\n\n\n\n        return $objToReturn;\n    }\n\n    /**\n     * Instantiate an array of PasswordResets from a Database Result\n     * @param DatabaseResultBase $objDbResult\n     * @param dxQueryBaseNode $objExpandAsArrayNode\n     * @param string[] $strColumnAliasArray\n     * @return PasswordReset[]\n     */\n    public static function InstantiateDbResult(dxDatabaseResultBase $objDbResult, $objExpandAsArrayNode = null, $strColumnAliasArray = null) {\n        $objToReturn = array();\n\n        if (!$strColumnAliasArray)\n            $strColumnAliasArray = array();\n\n        // If blank resultset, then return empty array\n        if (!$objDbResult)\n            return $objToReturn;\n\n        // Load up the return array with each row\n        if ($objExpandAsArrayNode) {\n            $objToReturn = array();\n            $objPrevItemArray = array();\n            while ($objDbRow = $objDbResult->GetNextRow()) {\n                $objItem = PasswordReset::InstantiateDbRow($objDbRow, null, $objExpandAsArrayNode, $objPrevItemArray, $strColumnAliasArray);\n                if ($objItem) {\n                    $objToReturn[] = $objItem;\n                    $objPrevItemArray[$objItem->intId][] = $objItem;\n                }\n            }\n        } else {\n            while ($objDbRow = $objDbResult->GetNextRow())\n                $objToReturn[] = PasswordReset::InstantiateDbRow($objDbRow, null, null, null, $strColumnAliasArray);\n        }\n\n        return $objToReturn;\n    }\n\n\n    /**\n     * Instantiate a single PasswordReset object from a query cursor (e.g. a DB ResultSet).\n     * Cursor is automatically moved to the \"next row\" of the result set.\n     * Will return NULL if no cursor or if the cursor has no more rows in the resultset.\n     * @param dxDatabaseResultBase $objDbResult cursor resource\n     * @return PasswordReset next row resulting from the query\n     */\n    public static function InstantiateCursor(dxDatabaseResultBase $objDbResult) {\n        // If blank resultset, then return empty result\n        if (!$objDbResult) return null;\n\n        // If empty resultset, then return empty result\n        $objDbRow = $objDbResult->GetNextRow();\n        if (!$objDbRow) return null;\n\n        // We need the Column Aliases\n        $strColumnAliasArray = $objDbResult->QueryBuilder->ColumnAliasArray;\n        if (!$strColumnAliasArray) $strColumnAliasArray = array();\n\n        // Pull Expansions\n        $objExpandAsArrayNode = $objDbResult->QueryBuilder->ExpandAsArrayNode;\n        if (!empty ($objExpandAsArrayNode)) {\n            throw new dxCallerException (\"Cannot use InstantiateCursor with ExpandAsArray\");\n        }\n\n        // Load up the return result with a row and return it\n        return PasswordReset::InstantiateDbRow($objDbRow, null, null, null, $strColumnAliasArray);\n    }\n\n    ///////////////////////////////////////////////////\n    // INDEX-BASED LOAD METHODS (Single Load and Array)\n    ///////////////////////////////////////////////////\n\n    /**\n     * Load a single PasswordReset object,\n     * by Id Index(es)\n     * @param integer $intId\n     * @param dxQueryClause[] $objOptionalClauses additional optional dxQueryClause objects for this query\n     * @return PasswordReset\n    */\n    public static function LoadById($intId, $objOptionalClauses = null) {\n        return PasswordReset::QuerySingle(\n            dxQuery::AndCondition(\n                dxQuery::Equal(dxQueryN::PasswordReset()->Id, $intId)\n            ),\n            $objOptionalClauses\n        );\n    }\n\n    /**\n     * Load a single PasswordReset object,\n     * by Token Index(es)\n     * @param string $strToken\n     * @param dxQueryClause[] $objOptionalClauses additional optional dxQueryClause objects for this query\n     * @return PasswordReset\n    */\n    public static function LoadByToken($strToken, $objOptionalClauses = null) {\n        return PasswordReset::QuerySingle(\n            dxQuery::AndCondition(\n                dxQuery::Equal(dxQueryN::PasswordReset()->Token, $strToken)\n            ),\n            $objOptionalClauses\n        );\n    }\n\n    /**\n     * Load an array of PasswordReset objects,\n     * by Account Index(es)\n     * @param integer $intAccount\n     * @param dxQueryClause[] $objOptionalClauses additional optional dxQueryClause objects for this query\n     * @return PasswordReset[]\n    */\n    public static function LoadArrayByAccount($intAccount, $objOptionalClauses = null) {\n        // Call PasswordReset::QueryArray to perform the LoadArrayByAccount query\n        try {\n            return PasswordReset::QueryArray(\n                dxQuery::Equal(dxQueryN::PasswordReset()->Account, $intAccount),\n                $objOptionalClauses);\n        } catch (dxCallerException $objExc) {\n            $objExc->IncrementOffset();\n            throw $objExc;\n        }\n    }\n\n    /**\n     * Count PasswordResets\n     * by Account Index(es)\n     * @param integer $intAccount\n     * @return int\n    */\n    public static function CountByAccount($intAccount) {\n        // Call PasswordReset::QueryCount to perform the CountByAccount query\n        return PasswordReset::QueryCount(\n            dxQuery::Equal(dxQueryN::PasswordReset()->Account, $intAccount)\n        );\n    }\n    ////////////////////////////////////////////////////\n    // INDEX-BASED LOAD METHODS (Array via Many to Many)\n    ////////////////////////////////////////////////////\n\n\n    //////////////////////////\n    // SAVE, DELETE AND RELOAD\n    //////////////////////////\n\n    /**\n    * Save this PasswordReset\n    * @param bool $blnForceInsert\n    * @param bool $blnForceUpdate\n    * @return int\n    */\n    public function Save($blnForceInsert = false, $blnForceUpdate = false) {\n        $ObjectAccessArray = ProjectAccessManager::getObjectAccess(ProjectFunctions::getCurrentAccountId(),\"PasswordReset\",$this->intId);\n        // Get the Database Object for this Class\n        $objDatabase = PasswordReset::GetDatabase();\n        $mixToReturn = null;\n        if (!is_numeric($this->intObjectOwner)) {\n            $this->intObjectOwner = ProjectFunctions::getCurrentAccountId();\n        }\n        $ExistingObj = PasswordReset::Load($this->intId);\n        $newAuditLogEntry = new AuditLogEntry();\n        $ChangedArray = array();\n        $newAuditLogEntry->EntryTimeStamp = dxDateTime::Now();\n        $newAuditLogEntry->ObjectId = $this->intId;\n        $newAuditLogEntry->ObjectName = 'PasswordReset';\n        $newAuditLogEntry->UserEmail = ProjectFunctions::getCurrentUserEmailForAudit();\n        if (!$ExistingObj) {\n            $newAuditLogEntry->ModificationType = 'Create';\n            $ChangedArray = array_merge($ChangedArray,array(\"Id\" => $this->intId));\n            $ChangedArray = array_merge($ChangedArray,array(\"Token\" => $this->strToken));\n            $ChangedArray = array_merge($ChangedArray,array(\"CreatedDateTime\" => $this->dttCreatedDateTime));\n            $ChangedArray = array_merge($ChangedArray,array(\"Account\" => $this->intAccount));\n            $ChangedArray = array_merge($ChangedArray,array(\"SearchMetaInfo\" => $this->strSearchMetaInfo));\n            $ChangedArray = array_merge($ChangedArray,array(\"LastUpdated\" => $this->strLastUpdated));\n            $ChangedArray = array_merge($ChangedArray,array(\"ObjectOwner\" => $this->intObjectOwner));\n            $newAuditLogEntry->AuditLogEntryDetail = json_encode($ChangedArray);\n        } else {\n            $newAuditLogEntry->ModificationType = 'Update';\n            $ExistingValueStr = \"NULL\";\n            if (!is_null($ExistingObj->Id)) {\n                $ExistingValueStr = $ExistingObj->Id;\n            }\n            if ($ExistingObj->Id != $this->intId) {\n                $ChangedArray = array_merge($ChangedArray,array(\"Id\" => array(\"Before\" => $ExistingValueStr,\"After\" => $this->intId)));\n                //$ChangedArray = array_merge($ChangedArray,array(\"Id\" => \"From: \".$ExistingValueStr.\" to: \".$this->intId));\n            }\n            $ExistingValueStr = \"NULL\";\n            if (!is_null($ExistingObj->Token)) {\n                $ExistingValueStr = $ExistingObj->Token;\n            }\n            if ($ExistingObj->Token != $this->strToken) {\n                $ChangedArray = array_merge($ChangedArray,array(\"Token\" => array(\"Before\" => $ExistingValueStr,\"After\" => $this->strToken)));\n                //$ChangedArray = array_merge($ChangedArray,array(\"Token\" => \"From: \".$ExistingValueStr.\" to: \".$this->strToken));\n            }\n            $ExistingValueStr = \"NULL\";\n            if (!is_null($ExistingObj->CreatedDateTime)) {\n                $ExistingValueStr = $ExistingObj->CreatedDateTime;\n            }\n            if ($ExistingObj->CreatedDateTime != $this->dttCreatedDateTime) {\n                $ChangedArray = array_merge($ChangedArray,array(\"CreatedDateTime\" => array(\"Before\" => $ExistingValueStr,\"After\" => $this->dttCreatedDateTime)));\n                //$ChangedArray = array_merge($ChangedArray,array(\"CreatedDateTime\" => \"From: \".$ExistingValueStr.\" to: \".$this->dttCreatedDateTime));\n            }\n            $ExistingValueStr = \"NULL\";\n            if (!is_null($ExistingObj->Account)) {\n                $ExistingValueStr = $ExistingObj->Account;\n            }\n            if ($ExistingObj->Account != $this->intAccount) {\n                $ChangedArray = array_merge($ChangedArray,array(\"Account\" => array(\"Before\" => $ExistingValueStr,\"After\" => $this->intAccount)));\n                //$ChangedArray = array_merge($ChangedArray,array(\"Account\" => \"From: \".$ExistingValueStr.\" to: \".$this->intAccount));\n            }\n            $ExistingValueStr = \"NULL\";\n            if (!is_null($ExistingObj->SearchMetaInfo)) {\n                $ExistingValueStr = $ExistingObj->SearchMetaInfo;\n            }\n            if ($ExistingObj->SearchMetaInfo != $this->strSearchMetaInfo) {\n                $ChangedArray = array_merge($ChangedArray,array(\"SearchMetaInfo\" => array(\"Before\" => $ExistingValueStr,\"After\" => $this->strSearchMetaInfo)));\n                //$ChangedArray = array_merge($ChangedArray,array(\"SearchMetaInfo\" => \"From: \".$ExistingValueStr.\" to: \".$this->strSearchMetaInfo));\n            }\n            $ExistingValueStr = \"NULL\";\n            if (!is_null($ExistingObj->LastUpdated)) {\n                $ExistingValueStr = $ExistingObj->LastUpdated;\n            }\n            if ($ExistingObj->LastUpdated != $this->strLastUpdated) {\n                $ChangedArray = array_merge($ChangedArray,array(\"LastUpdated\" => array(\"Before\" => $ExistingValueStr,\"After\" => $this->strLastUpdated)));\n                //$ChangedArray = array_merge($ChangedArray,array(\"LastUpdated\" => \"From: \".$ExistingValueStr.\" to: \".$this->strLastUpdated));\n            }\n            $ExistingValueStr = \"NULL\";\n            if (!is_null($ExistingObj->ObjectOwner)) {\n                $ExistingValueStr = $ExistingObj->ObjectOwner;\n            }\n            if ($ExistingObj->ObjectOwner != $this->intObjectOwner) {\n                $ChangedArray = array_merge($ChangedArray,array(\"ObjectOwner\" => array(\"Before\" => $ExistingValueStr,\"After\" => $this->intObjectOwner)));\n                //$ChangedArray = array_merge($ChangedArray,array(\"ObjectOwner\" => \"From: \".$ExistingValueStr.\" to: \".$this->intObjectOwner));\n            }\n            $newAuditLogEntry->AuditLogEntryDetail = json_encode($ChangedArray);\n        }\n        try {\n            if ((!$this->__blnRestored) || ($blnForceInsert)) {\n                if (!in_array(AccessOperation::CREATE_STR,$ObjectAccessArray)) {\n                    // This user is not allowed to create an object of this type\n                    throw new Exception(\"User is not allowed to perform operation \".AccessOperation::CREATE_STR.\" on entity of type 'PasswordReset'. Allowed access is \".json_encode($ObjectAccessArray));\n                }\n                // Perform an INSERT query\n                $objDatabase->NonQuery('\n                INSERT INTO `PasswordReset` (\n\t\t\t\t\t\t\t`Token`,\n\t\t\t\t\t\t\t`CreatedDateTime`,\n\t\t\t\t\t\t\t`Account`,\n\t\t\t\t\t\t\t`SearchMetaInfo`,\n\t\t\t\t\t\t\t`ObjectOwner`\n\t\t\t\t\t\t) VALUES (\n\t\t\t\t\t\t\t' . $objDatabase->SqlVariable($this->strToken) . ',\n\t\t\t\t\t\t\t' . $objDatabase->SqlVariable($this->dttCreatedDateTime) . ',\n\t\t\t\t\t\t\t' . $objDatabase->SqlVariable($this->intAccount) . ',\n\t\t\t\t\t\t\t' . $objDatabase->SqlVariable($this->strSearchMetaInfo) . ',\n\t\t\t\t\t\t\t' . $objDatabase->SqlVariable($this->intObjectOwner) . '\n\t\t\t\t\t\t)\n                ');\n\t\t\t\t\t// Update Identity column and return its value\n                $mixToReturn = $this->intId = $objDatabase->InsertId('PasswordReset', 'Id');\n            } else {\n                // Perform an UPDATE query\n                // First checking for Optimistic Locking constraints (if applicable)\n                if (!in_array(AccessOperation::UPDATE_STR,$ObjectAccessArray)) {\n                    // This user is not allowed to create an object of this type\n                    throw new Exception(\"User is not allowed to perform operation \".AccessOperation::UPDATE_STR.\" on entity of type 'PasswordReset'. Allowed access is \".json_encode($ObjectAccessArray));\n                }\n                if (!$blnForceUpdate) {\n                    // Perform the Optimistic Locking check\n                    $objResult = $objDatabase->Query('\n                    SELECT `LastUpdated` FROM `PasswordReset` WHERE\n\t\t\t\t\t\t\t`Id` = ' . $objDatabase->SqlVariable($this->intId) . '');\n\n                $objRow = $objResult->FetchArray();\n                if ($objRow[0] != $this->strLastUpdated)\n                    throw new dxOptimisticLockingException('PasswordReset');\n            }\n\n            // Perform the UPDATE query\n            $objDatabase->NonQuery('\n            UPDATE `PasswordReset` SET\n\t\t\t\t\t\t\t`Token` = ' . $objDatabase->SqlVariable($this->strToken) . ',\n\t\t\t\t\t\t\t`CreatedDateTime` = ' . $objDatabase->SqlVariable($this->dttCreatedDateTime) . ',\n\t\t\t\t\t\t\t`Account` = ' . $objDatabase->SqlVariable($this->intAccount) . ',\n\t\t\t\t\t\t\t`SearchMetaInfo` = ' . $objDatabase->SqlVariable($this->strSearchMetaInfo) . ',\n\t\t\t\t\t\t\t`ObjectOwner` = ' . $objDatabase->SqlVariable($this->intObjectOwner) . '\n            WHERE\n\t\t\t\t\t\t\t`Id` = ' . $objDatabase->SqlVariable($this->intId) . '');\n            }\n\n        } catch (dxCallerException $objExc) {\n            $objExc->IncrementOffset();\n            throw $objExc;\n        }\n        try {\n            $newAuditLogEntry->ObjectId = $this->intId;\n            $newAuditLogEntry->Save();\n        } catch(dxCallerException $e) {\n            error_log('Could not save audit log while saving PasswordReset. Details: '.$newAuditLogEntry->getJson().'<br>Error details: '.$e->getMessage());\n        }\n        // Update __blnRestored and any Non-Identity PK Columns (if applicable)\n        $this->__blnRestored = true;\n\n        // Update Local Timestamp\n        $objResult = $objDatabase->Query('SELECT `LastUpdated` FROM\n                                            `PasswordReset` WHERE\n                \t\t\t\t\t\t\t`Id` = ' . $objDatabase->SqlVariable($this->intId) . '');\n\n        $objRow = $objResult->FetchArray();\n        $this->strLastUpdated = $objRow[0];\n\n        $this->DeleteCache();\n\n        // Return\n        return $mixToReturn;\n    }\n    /**\n     * Delete this PasswordReset\n     * @return void\n     */\n    public function Delete() {\n        if ((is_null($this->intId)))\n            throw new dxUndefinedPrimaryKeyException('Cannot delete this PasswordReset with an unset primary key.');\n\n        $ObjectAccessArray = ProjectAccessManager::getObjectAccess(ProjectFunctions::getCurrentAccountId(),\"PasswordReset\",$this->intId);\n        if (!in_array(AccessOperation::DELETE_STR,$ObjectAccessArray)) {\n            // This user is not allowed to delete an object of this type\n            throw new Exception(\"User is not allowed to perform operation \".AccessOperation::DELETE_STR.\" on entity of type 'PasswordReset'. Allowed access is \".json_encode($ObjectAccessArray));\n        }\n\n        // Get the Database Object for this Class\n        $objDatabase = PasswordReset::GetDatabase();\n        $newAuditLogEntry = new AuditLogEntry();\n        $ChangedArray = array();\n        $newAuditLogEntry->EntryTimeStamp = dxDateTime::Now();\n        $newAuditLogEntry->ObjectId = $this->intId;\n        $newAuditLogEntry->ObjectName = 'PasswordReset';\n        $newAuditLogEntry->UserEmail = ProjectFunctions::getCurrentUserEmailForAudit();\n        $newAuditLogEntry->ModificationType = 'Delete';\n        $ChangedArray = array_merge($ChangedArray,array(\"Id\" => $this->intId));\n        $ChangedArray = array_merge($ChangedArray,array(\"Token\" => $this->strToken));\n        $ChangedArray = array_merge($ChangedArray,array(\"CreatedDateTime\" => $this->dttCreatedDateTime));\n        $ChangedArray = array_merge($ChangedArray,array(\"Account\" => $this->intAccount));\n        $ChangedArray = array_merge($ChangedArray,array(\"SearchMetaInfo\" => $this->strSearchMetaInfo));\n        $ChangedArray = array_merge($ChangedArray,array(\"LastUpdated\" => $this->strLastUpdated));\n        $ChangedArray = array_merge($ChangedArray,array(\"ObjectOwner\" => $this->intObjectOwner));\n        $newAuditLogEntry->AuditLogEntryDetail = json_encode($ChangedArray);\n        try {\n            $newAuditLogEntry->Save();\n        } catch(dxCallerException $e) {\n            error_log('Could not save audit log while deleting PasswordReset. Details: '.$newAuditLogEntry->getJson().'<br>Error details: '.$e->getMessage());\n        }\n\n        // Perform the SQL Query\n        $objDatabase->NonQuery('\n            DELETE FROM\n                `PasswordReset`\n            WHERE\n                `Id` = ' . $objDatabase->SqlVariable($this->intId) . '');\n\n        $this->DeleteCache();\n    }\n\n    /**\n     * Delete this PasswordReset ONLY from the cache\n     * @return void\n     */\n    public function DeleteCache() {\n        if (ProjectFunctions::$objCacheProvider && ProjectFunctions::$Database[1]->Caching) {\n            $strCacheKey = ProjectFunctions::$objCacheProvider->CreateKey(ProjectFunctions::$Database[1]->Database, 'PasswordReset', $this->intId);\n            ProjectFunctions::$objCacheProvider->Delete($strCacheKey);\n        }\n    }\n\n    /**\n     * Delete all PasswordResets\n     * @return void\n     */\n    public static function DeleteAll() {\n        // Get the Database Object for this Class\n        $objDatabase = PasswordReset::GetDatabase();\n\n        // Perform the Query\n        $objDatabase->NonQuery('\n            DELETE FROM\n                `PasswordReset`');\n\n        if (ProjectFunctions::$objCacheProvider && ProjectFunctions::$Database[1]->Caching) {\n            ProjectFunctions::$objCacheProvider->DeleteAll();\n        }\n    }\n\n    /**\n     * Truncate PasswordReset table\n     * @return void\n     */\n    public static function Truncate() {\n        // Get the Database Object for this Class\n        $objDatabase = PasswordReset::GetDatabase();\n\n        // Perform the Query\n        $objDatabase->NonQuery('\n            TRUNCATE `PasswordReset`');\n\n        if (ProjectFunctions::$objCacheProvider && ProjectFunctions::$Database[1]->Caching) {\n            ProjectFunctions::$objCacheProvider->DeleteAll();\n        }\n    }\n    /**\n     * Reload this PasswordReset from the database.\n     * @return void\n     */\n    public function Reload() {\n        // Make sure we are actually Restored from the database\n        if (!$this->__blnRestored)\n            throw new dxCallerException('Cannot call Reload() on a new, unsaved PasswordReset object.');\n\n        $this->DeleteCache();\n\n        // Reload the Object\n        $objReloaded = PasswordReset::Load($this->intId);\n\n        // Update $this's local variables to match\n        $this->strToken = $objReloaded->strToken;\n        $this->dttCreatedDateTime = $objReloaded->dttCreatedDateTime;\n        $this->Account = $objReloaded->Account;\n        $this->strSearchMetaInfo = $objReloaded->strSearchMetaInfo;\n        $this->strLastUpdated = $objReloaded->strLastUpdated;\n        $this->intObjectOwner = $objReloaded->intObjectOwner;\n    }\n    ////////////////////\n    // PUBLIC OVERRIDERS\n    ////////////////////\n\n        /**\n     * Override method to perform a property \"Get\"\n     * This will get the value of $strName\n     *\n     * @param string $strName Name of the property to get\n     * @return mixed\n     */\n    public function __get($strName) {\n        switch ($strName) {\n            ///////////////////\n            // Member Variables\n            ///////////////////\n            case 'Id':\n                /**\n                 * Gets the value for intId (Read-Only PK)\n                 * @return integer\n                 */\n                return $this->intId;\n\n            case 'Token':\n                /**\n                 * Gets the value for strToken (Unique)\n                 * @return string\n                 */\n                return $this->strToken;\n\n            case 'CreatedDateTime':\n                /**\n                 * Gets the value for dttCreatedDateTime \n                 * @return dxDateTime\n                 */\n                return $this->dttCreatedDateTime;\n\n            case 'Account':\n                /**\n                 * Gets the value for intAccount \n                 * @return integer\n                 */\n                return $this->intAccount;\n\n            case 'SearchMetaInfo':\n                /**\n                 * Gets the value for strSearchMetaInfo \n                 * @return string\n                 */\n                return $this->strSearchMetaInfo;\n\n            case 'LastUpdated':\n                /**\n                 * Gets the value for strLastUpdated (Read-Only Timestamp)\n                 * @return string\n                 */\n                return $this->strLastUpdated;\n\n            case 'ObjectOwner':\n                /**\n                 * Gets the value for intObjectOwner \n                 * @return integer\n                 */\n                return $this->intObjectOwner;\n\n\n            ///////////////////\n            // Member Objects\n            ///////////////////\n            case 'AccountObject':\n                /**\n                 * Gets the value for the Account object referenced by intAccount \n                 * @return Account\n                 */\n                try {\n                    if ((!$this->objAccountObject) && (!is_null($this->intAccount)))\n                        $this->objAccountObject = Account::Load($this->intAccount);\n                    return $this->objAccountObject;\n                } catch (dxCallerException $objExc) {\n                    $objExc->IncrementOffset();\n                    throw $objExc;\n                }\n\n\n            ////////////////////////////\n            // Virtual Object References (Many to Many and Reverse References)\n            // (If restored via a \"Many-to\" expansion)\n            ////////////////////////////\n\n\n            case '__Restored':\n                return $this->__blnRestored;\n\n            default:\n                try {\n                    return parent::__get($strName);\n                } catch (dxCallerException $objExc) {\n                    $objExc->IncrementOffset();\n                    throw $objExc;\n                }\n        }\n    }\n        /**\n     * Override method to perform a property \"Set\"\n     * This will set the property $strName to be $mixValue\n     *\n     * @param string $strName Name of the property to set\n     * @param string $mixValue New value of the property\n     * @return mixed\n     */\n    public function __set($strName, $mixValue) {\n        switch ($strName) {\n            ///////////////////\n            // Member Variables\n            ///////////////////\n            case 'Token':\n                /**\n                 * Sets the value for strToken (Unique)\n                 * @param string $mixValue\n                 * @return string\n                 */\n                try {\n                    return ($this->strToken = dxType::Cast($mixValue, dxType::String));\n                } catch (dxCallerException $objExc) {\n                    $objExc->IncrementOffset();\n                    throw $objExc;\n                }\n\n            case 'CreatedDateTime':\n                /**\n                 * Sets the value for dttCreatedDateTime \n                 * @param dxDateTime $mixValue\n                 * @return dxDateTime\n                 */\n                try {\n                    return ($this->dttCreatedDateTime = dxType::Cast($mixValue, dxType::DateTime));\n                } catch (dxCallerException $objExc) {\n                    $objExc->IncrementOffset();\n                    throw $objExc;\n                }\n\n            case 'Account':\n                /**\n                 * Sets the value for intAccount \n                 * @param integer $mixValue\n                 * @return integer\n                 */\n                try {\n                    $this->objAccountObject = null;\n                    return ($this->intAccount = dxType::Cast($mixValue, dxType::Integer));\n                } catch (dxCallerException $objExc) {\n                    $objExc->IncrementOffset();\n                    throw $objExc;\n                }\n\n            case 'SearchMetaInfo':\n                /**\n                 * Sets the value for strSearchMetaInfo \n                 * @param string $mixValue\n                 * @return string\n                 */\n                try {\n                    return ($this->strSearchMetaInfo = dxType::Cast($mixValue, dxType::String));\n                } catch (dxCallerException $objExc) {\n                    $objExc->IncrementOffset();\n                    throw $objExc;\n                }\n\n            case 'ObjectOwner':\n                /**\n                 * Sets the value for intObjectOwner \n                 * @param integer $mixValue\n                 * @return integer\n                 */\n                try {\n                    return ($this->intObjectOwner = dxType::Cast($mixValue, dxType::Integer));\n                } catch (dxCallerException $objExc) {\n                    $objExc->IncrementOffset();\n                    throw $objExc;\n                }\n\n\n            ///////////////////\n            // Member Objects\n            ///////////////////\n            case 'AccountObject':\n                /**\n                 * Sets the value for the Account object referenced by intAccount \n                 * @param Account $mixValue\n                 * @return Account\n                 */\n                if (is_null($mixValue)) {\n                    $this->intAccount = null;\n                    $this->objAccountObject = null;\n                    return null;\n                } else {\n                    // Make sure $mixValue actually is a Account object\n                    try {\n                        $mixValue = dxType::Cast($mixValue, 'Account');\n                    } catch (dxInvalidCastException $objExc) {\n                        $objExc->IncrementOffset();\n                        throw $objExc;\n                    }\n\n                    // Make sure $mixValue is a SAVED Account object\n                    if (is_null($mixValue->Id))\n                        throw new dxCallerException('Unable to set an unsaved AccountObject for this PasswordReset');\n\n                    // Update Local Member Variables\n                    $this->objAccountObject = $mixValue;\n                    $this->intAccount = $mixValue->Id;\n\n                    // Return $mixValue\n                    return $mixValue;\n                }\n                break;\n\n            default:\n                try {\n                    return parent::__set($strName, $mixValue);\n                } catch (dxCallerException $objExc) {\n                    $objExc->IncrementOffset();\n                    throw $objExc;\n                }\n        }\n    }\n    /**\n     * Lookup a VirtualAttribute value (if applicable).  Returns NULL if none found.\n     * @param string $strName\n     * @return string\n     */\n    public function GetVirtualAttribute($strName) {\n        if (array_key_exists($strName, $this->__strVirtualAttributeArray))\n            return $this->__strVirtualAttributeArray[$strName];\n        return null;\n    }\n\n    ///////////////////////////////\n    // ASSOCIATED OBJECTS' METHODS\n    ///////////////////////////////\n\n\n\n    \n///////////////////////////////\n    // METHODS TO EXTRACT INFO ABOUT THE CLASS\n    ///////////////////////////////\n\n    /**\n     * Static method to retrieve the Database object that owns this class.\n     * @return string Name of the table from which this class has been created.\n     */\n    public static function GetTableName() {\n        return \"PasswordReset\";\n    }\n\n    /**\n     * Static method to retrieve the Table name from which this class has been created.\n     * @return string Name of the table from which this class has been created.\n     */\n    public static function GetDatabaseName() {\n        return ProjectFunctions::$Database[PasswordReset::GetDatabaseIndex()]->Database;\n    }\n\n    /**\n     * Static method to retrieve the Database index in the configuration.inc.php file.\n     * This can be useful when there are two databases of the same name which create\n     * confusion for the developer. There are no internal uses of this function but are\n     * here to help retrieve info if need be!\n     * @return int position or index of the database in the config file.\n     */\n    public static function GetDatabaseIndex() {\n        return 1;\n    }\n\n    ////////////////////////////////////////\n    // METHODS for SOAP-BASED WEB SERVICES\n    ////////////////////////////////////////\n\n    public static function GetSoapComplexTypeXml() {\n        $strToReturn = '<complexType name=\"PasswordReset\"><sequence>';\n        $strToReturn .= '<element name=\"Id\" type=\"xsd:int\"/>';\n        $strToReturn .= '<element name=\"Token\" type=\"xsd:string\"/>';\n        $strToReturn .= '<element name=\"CreatedDateTime\" type=\"xsd:dateTime\"/>';\n        $strToReturn .= '<element name=\"AccountObject\" type=\"xsd1:Account\"/>';\n        $strToReturn .= '<element name=\"SearchMetaInfo\" type=\"xsd:string\"/>';\n        $strToReturn .= '<element name=\"LastUpdated\" type=\"xsd:string\"/>';\n        $strToReturn .= '<element name=\"ObjectOwner\" type=\"xsd:int\"/>';\n        $strToReturn .= '<element name=\"__blnRestored\" type=\"xsd:boolean\"/>';\n        $strToReturn .= '</sequence></complexType>';\n        return $strToReturn;\n    }\n\n    public static function AlterSoapComplexTypeArray(&$strComplexTypeArray) {\n        if (!array_key_exists('PasswordReset', $strComplexTypeArray)) {\n            $strComplexTypeArray['PasswordReset'] = PasswordReset::GetSoapComplexTypeXml();\n            Account::AlterSoapComplexTypeArray($strComplexTypeArray);\n        }\n    }\n\n    public static function GetArrayFromSoapArray($objSoapArray) {\n        $objArrayToReturn = array();\n\n        foreach ($objSoapArray as $objSoapObject)\n            array_push($objArrayToReturn, PasswordReset::GetObjectFromSoapObject($objSoapObject));\n\n        return $objArrayToReturn;\n    }\n\n    public static function GetObjectFromSoapObject($objSoapObject) {\n        $objToReturn = new PasswordReset();\n        if (property_exists($objSoapObject, 'Id'))\n            $objToReturn->intId = $objSoapObject->Id;\n        if (property_exists($objSoapObject, 'Token'))\n            $objToReturn->strToken = $objSoapObject->Token;\n        if (property_exists($objSoapObject, 'CreatedDateTime'))\n            $objToReturn->dttCreatedDateTime = new dxDateTime($objSoapObject->CreatedDateTime);\n        if ((property_exists($objSoapObject, 'AccountObject')) &&\n            ($objSoapObject->AccountObject))\n            $objToReturn->AccountObject = Account::GetObjectFromSoapObject($objSoapObject->AccountObject);\n        if (property_exists($objSoapObject, 'SearchMetaInfo'))\n            $objToReturn->strSearchMetaInfo = $objSoapObject->SearchMetaInfo;\n        if (property_exists($objSoapObject, 'LastUpdated'))\n            $objToReturn->strLastUpdated = $objSoapObject->LastUpdated;\n        if (property_exists($objSoapObject, 'ObjectOwner'))\n            $objToReturn->intObjectOwner = $objSoapObject->ObjectOwner;\n        if (property_exists($objSoapObject, '__blnRestored'))\n            $objToReturn->__blnRestored = $objSoapObject->__blnRestored;\n        return $objToReturn;\n    }\n\n    public static function GetSoapArrayFromArray($objArray) {\n        if (!$objArray)\n            return null;\n\n        $objArrayToReturn = array();\n\n        foreach ($objArray as $objObject)\n            array_push($objArrayToReturn, PasswordReset::GetSoapObjectFromObject($objObject, true));\n\n        return unserialize(serialize($objArrayToReturn));\n    }\n\n    public static function GetSoapObjectFromObject($objObject, $blnBindRelatedObjects) {\n        if ($objObject->dttCreatedDateTime)\n            $objObject->dttCreatedDateTime = $objObject->dttCreatedDateTime->qFormat(dxDateTime::FormatSoap);\n        if ($objObject->objAccountObject)\n            $objObject->objAccountObject = Account::GetSoapObjectFromObject($objObject->objAccountObject, false);\n        else if (!$blnBindRelatedObjects)\n            $objObject->intAccount = null;\n        return $objObject;\n    }\n\n\n    ////////////////////////////////////////\n    // METHODS for JSON Object Translation\n    ////////////////////////////////////////\n\n    // this function is required for objects that implement the\n    // IteratorAggregate interface\n    public function getIterator() {\n        ///////////////////\n        // Member Variables\n        ///////////////////\n        $iArray['Id'] = $this->intId;\n        $iArray['Token'] = $this->strToken;\n        $iArray['CreatedDateTime'] = $this->dttCreatedDateTime;\n        $iArray['Account'] = $this->intAccount;\n        $iArray['SearchMetaInfo'] = $this->strSearchMetaInfo;\n        $iArray['LastUpdated'] = $this->strLastUpdated;\n        $iArray['ObjectOwner'] = $this->intObjectOwner;\n        return new ArrayIterator($iArray);\n    }\n\n    // this function returns a Json formatted string using the\n    // IteratorAggregate interface\n    public function getJson() {\n        return json_encode($this->getIterator());\n    }\n\n    /**\n     * Default \"toJsObject\" handler\n     * Specifies how the object should be displayed in JQuery UI lists and menus. Note that these lists use\n     * value and label differently.\n     *\n     * value \t= The short form of what to display in the list and selection.\n     * label \t= [optional] If defined, is what is displayed in the menu\n     * id \t\t= Primary key of object.\n     *\n     * @return an array that specifies how to display the object\n     */\n    public function toJsObject () {\n        return JavaScriptHelper::toJsObject(array('value' => $this->__toString(), 'id' =>  $this->intId ));\n    }\n\n\n}\n\n/////////////////////////////////////\n\t// ADDITIONAL CLASSES for DIVBLOX QUERY\n\t/////////////////////////////////////\n\n    /**\n     * @uses dxQueryNode\n     *\n     * @property-read dxQueryNode $Id\n     * @property-read dxQueryNode $Token\n     * @property-read dxQueryNode $CreatedDateTime\n     * @property-read dxQueryNode $Account\n     * @property-read dxQueryNodeAccount $AccountObject\n     * @property-read dxQueryNode $SearchMetaInfo\n     * @property-read dxQueryNode $LastUpdated\n     * @property-read dxQueryNode $ObjectOwner\n     *\n     *\n\n     * @property-read dxQueryNode $_PrimaryKeyNode\n     **/\n\tclass dxQueryNodePasswordReset extends dxQueryNode {\n\t\tprotected $strTableName = 'PasswordReset';\n\t\tprotected $strPrimaryKey = 'Id';\n\t\tprotected $strClassName = 'PasswordReset';\n\t\tpublic function __get($strName) {\n\t\t\tswitch ($strName) {\n\t\t\t\tcase 'Id':\n\t\t\t\t\treturn new dxQueryNode('Id', 'Id', 'Integer', $this);\n\t\t\t\tcase 'Token':\n\t\t\t\t\treturn new dxQueryNode('Token', 'Token', 'VarChar', $this);\n\t\t\t\tcase 'CreatedDateTime':\n\t\t\t\t\treturn new dxQueryNode('CreatedDateTime', 'CreatedDateTime', 'DateTime', $this);\n\t\t\t\tcase 'Account':\n\t\t\t\t\treturn new dxQueryNode('Account', 'Account', 'Integer', $this);\n\t\t\t\tcase 'AccountObject':\n\t\t\t\t\treturn new dxQueryNodeAccount('Account', 'AccountObject', 'Integer', $this);\n\t\t\t\tcase 'SearchMetaInfo':\n\t\t\t\t\treturn new dxQueryNode('SearchMetaInfo', 'SearchMetaInfo', 'Blob', $this);\n\t\t\t\tcase 'LastUpdated':\n\t\t\t\t\treturn new dxQueryNode('LastUpdated', 'LastUpdated', 'VarChar', $this);\n\t\t\t\tcase 'ObjectOwner':\n\t\t\t\t\treturn new dxQueryNode('ObjectOwner', 'ObjectOwner', 'Integer', $this);\n\n\t\t\t\tcase '_PrimaryKeyNode':\n\t\t\t\t\treturn new dxQueryNode('Id', 'Id', 'Integer', $this);\n\t\t\t\tdefault:\n\t\t\t\t\ttry {\n\t\t\t\t\t\treturn parent::__get($strName);\n\t\t\t\t\t} catch (dxCallerException $objExc) {\n\t\t\t\t\t\t$objExc->IncrementOffset();\n\t\t\t\t\t\tthrow $objExc;\n\t\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n    /**\n     * @property-read dxQueryNode $Id\n     * @property-read dxQueryNode $Token\n     * @property-read dxQueryNode $CreatedDateTime\n     * @property-read dxQueryNode $Account\n     * @property-read dxQueryNodeAccount $AccountObject\n     * @property-read dxQueryNode $SearchMetaInfo\n     * @property-read dxQueryNode $LastUpdated\n     * @property-read dxQueryNode $ObjectOwner\n     *\n     *\n\n     * @property-read dxQueryNode $_PrimaryKeyNode\n     **/\n\tclass dxQueryReverseReferenceNodePasswordReset extends dxQueryReverseReferenceNode {\n\t\tprotected $strTableName = 'PasswordReset';\n\t\tprotected $strPrimaryKey = 'Id';\n\t\tprotected $strClassName = 'PasswordReset';\n\t\tpublic function __get($strName) {\n\t\t\tswitch ($strName) {\n\t\t\t\tcase 'Id':\n\t\t\t\t\treturn new dxQueryNode('Id', 'Id', 'integer', $this);\n\t\t\t\tcase 'Token':\n\t\t\t\t\treturn new dxQueryNode('Token', 'Token', 'string', $this);\n\t\t\t\tcase 'CreatedDateTime':\n\t\t\t\t\treturn new dxQueryNode('CreatedDateTime', 'CreatedDateTime', 'dxDateTime', $this);\n\t\t\t\tcase 'Account':\n\t\t\t\t\treturn new dxQueryNode('Account', 'Account', 'integer', $this);\n\t\t\t\tcase 'AccountObject':\n\t\t\t\t\treturn new dxQueryNodeAccount('Account', 'AccountObject', 'integer', $this);\n\t\t\t\tcase 'SearchMetaInfo':\n\t\t\t\t\treturn new dxQueryNode('SearchMetaInfo', 'SearchMetaInfo', 'string', $this);\n\t\t\t\tcase 'LastUpdated':\n\t\t\t\t\treturn new dxQueryNode('LastUpdated', 'LastUpdated', 'string', $this);\n\t\t\t\tcase 'ObjectOwner':\n\t\t\t\t\treturn new dxQueryNode('ObjectOwner', 'ObjectOwner', 'integer', $this);\n\n\t\t\t\tcase '_PrimaryKeyNode':\n\t\t\t\t\treturn new dxQueryNode('Id', 'Id', 'integer', $this);\n\t\t\t\tdefault:\n\t\t\t\t\ttry {\n\t\t\t\t\t\treturn parent::__get($strName);\n\t\t\t\t\t} catch (dxCallerException $objExc) {\n\t\t\t\t\t\t$objExc->IncrementOffset();\n\t\t\t\t\t\tthrow $objExc;\n\t\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n?>\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- divblox/config/database/data_model_orm/generated/PasswordResetGen.class.php	(revision 8088b90ea0ab6ee30e69c949666fde75c4664610)
+++ divblox/config/database/data_model_orm/generated/PasswordResetGen.class.php	(date 1589789351518)
@@ -18,9 +18,9 @@
  * @property-read integer $Id the value for intId (Read-Only PK)
  * @property string $Token the value for strToken (Unique)
  * @property dxDateTime $CreatedDateTime the value for dttCreatedDateTime 
+ * @property-read string $LastUpdated the value for strLastUpdated (Read-Only Timestamp)
  * @property integer $Account the value for intAccount 
  * @property string $SearchMetaInfo the value for strSearchMetaInfo 
- * @property-read string $LastUpdated the value for strLastUpdated (Read-Only Timestamp)
  * @property integer $ObjectOwner the value for intObjectOwner 
  * @property Account $AccountObject the value for the Account object referenced by intAccount 
  * @property-read boolean $__Restored whether or not this object was restored from the database (as opposed to created new)
@@ -56,6 +56,14 @@
     const CreatedDateTimeDefault = null;
 
 
+    /**
+     * Protected member variable that maps to the database column PasswordReset.LastUpdated
+     * @var string strLastUpdated
+     */
+    protected $strLastUpdated;
+    const LastUpdatedDefault = null;
+
+
     /**
      * Protected member variable that maps to the database column PasswordReset.Account
      * @var integer intAccount
@@ -72,14 +80,6 @@
     const SearchMetaInfoDefault = null;
 
 
-    /**
-     * Protected member variable that maps to the database column PasswordReset.LastUpdated
-     * @var string strLastUpdated
-     */
-    protected $strLastUpdated;
-    const LastUpdatedDefault = null;
-
-
     /**
      * Protected member variable that maps to the database column PasswordReset.ObjectOwner
      * @var integer intObjectOwner
@@ -125,9 +125,9 @@
         $this->intId = PasswordReset::IdDefault;
         $this->strToken = PasswordReset::TokenDefault;
         $this->dttCreatedDateTime = (PasswordReset::CreatedDateTimeDefault === null)?null:new dxDateTime(PasswordReset::CreatedDateTimeDefault);
+        $this->strLastUpdated = PasswordReset::LastUpdatedDefault;
         $this->intAccount = PasswordReset::AccountDefault;
         $this->strSearchMetaInfo = PasswordReset::SearchMetaInfoDefault;
-        $this->strLastUpdated = PasswordReset::LastUpdatedDefault;
         $this->intObjectOwner = PasswordReset::ObjectOwnerDefault;
     }
 
@@ -468,9 +468,9 @@
             $objBuilder->AddSelectItem($strTableName, 'Id', $strAliasPrefix . 'Id');
             $objBuilder->AddSelectItem($strTableName, 'Token', $strAliasPrefix . 'Token');
             $objBuilder->AddSelectItem($strTableName, 'CreatedDateTime', $strAliasPrefix . 'CreatedDateTime');
+            $objBuilder->AddSelectItem($strTableName, 'LastUpdated', $strAliasPrefix . 'LastUpdated');
             $objBuilder->AddSelectItem($strTableName, 'Account', $strAliasPrefix . 'Account');
             $objBuilder->AddSelectItem($strTableName, 'SearchMetaInfo', $strAliasPrefix . 'SearchMetaInfo');
-            $objBuilder->AddSelectItem($strTableName, 'LastUpdated', $strAliasPrefix . 'LastUpdated');
             $objBuilder->AddSelectItem($strTableName, 'ObjectOwner', $strAliasPrefix . 'ObjectOwner');
         }
     }
@@ -602,15 +602,15 @@
         $strAlias = $strAliasPrefix . 'CreatedDateTime';
         $strAliasName = !empty($strColumnAliasArray[$strAlias]) ? $strColumnAliasArray[$strAlias] : $strAlias;
         $objToReturn->dttCreatedDateTime = $objDbRow->GetColumn($strAliasName, 'DateTime');
+        $strAlias = $strAliasPrefix . 'LastUpdated';
+        $strAliasName = !empty($strColumnAliasArray[$strAlias]) ? $strColumnAliasArray[$strAlias] : $strAlias;
+        $objToReturn->strLastUpdated = $objDbRow->GetColumn($strAliasName, 'VarChar');
         $strAlias = $strAliasPrefix . 'Account';
         $strAliasName = !empty($strColumnAliasArray[$strAlias]) ? $strColumnAliasArray[$strAlias] : $strAlias;
         $objToReturn->intAccount = $objDbRow->GetColumn($strAliasName, 'Integer');
         $strAlias = $strAliasPrefix . 'SearchMetaInfo';
         $strAliasName = !empty($strColumnAliasArray[$strAlias]) ? $strColumnAliasArray[$strAlias] : $strAlias;
         $objToReturn->strSearchMetaInfo = $objDbRow->GetColumn($strAliasName, 'Blob');
-        $strAlias = $strAliasPrefix . 'LastUpdated';
-        $strAliasName = !empty($strColumnAliasArray[$strAlias]) ? $strColumnAliasArray[$strAlias] : $strAlias;
-        $objToReturn->strLastUpdated = $objDbRow->GetColumn($strAliasName, 'VarChar');
         $strAlias = $strAliasPrefix . 'ObjectOwner';
         $strAliasName = !empty($strColumnAliasArray[$strAlias]) ? $strColumnAliasArray[$strAlias] : $strAlias;
         $objToReturn->intObjectOwner = $objDbRow->GetColumn($strAliasName, 'Integer');
@@ -825,9 +825,9 @@
             $ChangedArray = array_merge($ChangedArray,array("Id" => $this->intId));
             $ChangedArray = array_merge($ChangedArray,array("Token" => $this->strToken));
             $ChangedArray = array_merge($ChangedArray,array("CreatedDateTime" => $this->dttCreatedDateTime));
+            $ChangedArray = array_merge($ChangedArray,array("LastUpdated" => $this->strLastUpdated));
             $ChangedArray = array_merge($ChangedArray,array("Account" => $this->intAccount));
             $ChangedArray = array_merge($ChangedArray,array("SearchMetaInfo" => $this->strSearchMetaInfo));
-            $ChangedArray = array_merge($ChangedArray,array("LastUpdated" => $this->strLastUpdated));
             $ChangedArray = array_merge($ChangedArray,array("ObjectOwner" => $this->intObjectOwner));
             $newAuditLogEntry->AuditLogEntryDetail = json_encode($ChangedArray);
         } else {
@@ -856,6 +856,14 @@
                 $ChangedArray = array_merge($ChangedArray,array("CreatedDateTime" => array("Before" => $ExistingValueStr,"After" => $this->dttCreatedDateTime)));
                 //$ChangedArray = array_merge($ChangedArray,array("CreatedDateTime" => "From: ".$ExistingValueStr." to: ".$this->dttCreatedDateTime));
             }
+            $ExistingValueStr = "NULL";
+            if (!is_null($ExistingObj->LastUpdated)) {
+                $ExistingValueStr = $ExistingObj->LastUpdated;
+            }
+            if ($ExistingObj->LastUpdated != $this->strLastUpdated) {
+                $ChangedArray = array_merge($ChangedArray,array("LastUpdated" => array("Before" => $ExistingValueStr,"After" => $this->strLastUpdated)));
+                //$ChangedArray = array_merge($ChangedArray,array("LastUpdated" => "From: ".$ExistingValueStr." to: ".$this->strLastUpdated));
+            }
             $ExistingValueStr = "NULL";
             if (!is_null($ExistingObj->Account)) {
                 $ExistingValueStr = $ExistingObj->Account;
@@ -872,14 +880,6 @@
                 $ChangedArray = array_merge($ChangedArray,array("SearchMetaInfo" => array("Before" => $ExistingValueStr,"After" => $this->strSearchMetaInfo)));
                 //$ChangedArray = array_merge($ChangedArray,array("SearchMetaInfo" => "From: ".$ExistingValueStr." to: ".$this->strSearchMetaInfo));
             }
-            $ExistingValueStr = "NULL";
-            if (!is_null($ExistingObj->LastUpdated)) {
-                $ExistingValueStr = $ExistingObj->LastUpdated;
-            }
-            if ($ExistingObj->LastUpdated != $this->strLastUpdated) {
-                $ChangedArray = array_merge($ChangedArray,array("LastUpdated" => array("Before" => $ExistingValueStr,"After" => $this->strLastUpdated)));
-                //$ChangedArray = array_merge($ChangedArray,array("LastUpdated" => "From: ".$ExistingValueStr." to: ".$this->strLastUpdated));
-            }
             $ExistingValueStr = "NULL";
             if (!is_null($ExistingObj->ObjectOwner)) {
                 $ExistingValueStr = $ExistingObj->ObjectOwner;
@@ -996,9 +996,9 @@
         $ChangedArray = array_merge($ChangedArray,array("Id" => $this->intId));
         $ChangedArray = array_merge($ChangedArray,array("Token" => $this->strToken));
         $ChangedArray = array_merge($ChangedArray,array("CreatedDateTime" => $this->dttCreatedDateTime));
+        $ChangedArray = array_merge($ChangedArray,array("LastUpdated" => $this->strLastUpdated));
         $ChangedArray = array_merge($ChangedArray,array("Account" => $this->intAccount));
         $ChangedArray = array_merge($ChangedArray,array("SearchMetaInfo" => $this->strSearchMetaInfo));
-        $ChangedArray = array_merge($ChangedArray,array("LastUpdated" => $this->strLastUpdated));
         $ChangedArray = array_merge($ChangedArray,array("ObjectOwner" => $this->intObjectOwner));
         $newAuditLogEntry->AuditLogEntryDetail = json_encode($ChangedArray);
         try {
@@ -1079,9 +1079,9 @@
         // Update $this's local variables to match
         $this->strToken = $objReloaded->strToken;
         $this->dttCreatedDateTime = $objReloaded->dttCreatedDateTime;
+        $this->strLastUpdated = $objReloaded->strLastUpdated;
         $this->Account = $objReloaded->Account;
         $this->strSearchMetaInfo = $objReloaded->strSearchMetaInfo;
-        $this->strLastUpdated = $objReloaded->strLastUpdated;
         $this->intObjectOwner = $objReloaded->intObjectOwner;
     }
     ////////////////////
@@ -1121,6 +1121,13 @@
                  */
                 return $this->dttCreatedDateTime;
 
+            case 'LastUpdated':
+                /**
+                 * Gets the value for strLastUpdated (Read-Only Timestamp)
+                 * @return string
+                 */
+                return $this->strLastUpdated;
+
             case 'Account':
                 /**
                  * Gets the value for intAccount 
@@ -1135,13 +1142,6 @@
                  */
                 return $this->strSearchMetaInfo;
 
-            case 'LastUpdated':
-                /**
-                 * Gets the value for strLastUpdated (Read-Only Timestamp)
-                 * @return string
-                 */
-                return $this->strLastUpdated;
-
             case 'ObjectOwner':
                 /**
                  * Gets the value for intObjectOwner 
@@ -1368,9 +1368,9 @@
         $strToReturn .= '<element name="Id" type="xsd:int"/>';
         $strToReturn .= '<element name="Token" type="xsd:string"/>';
         $strToReturn .= '<element name="CreatedDateTime" type="xsd:dateTime"/>';
+        $strToReturn .= '<element name="LastUpdated" type="xsd:string"/>';
         $strToReturn .= '<element name="AccountObject" type="xsd1:Account"/>';
         $strToReturn .= '<element name="SearchMetaInfo" type="xsd:string"/>';
-        $strToReturn .= '<element name="LastUpdated" type="xsd:string"/>';
         $strToReturn .= '<element name="ObjectOwner" type="xsd:int"/>';
         $strToReturn .= '<element name="__blnRestored" type="xsd:boolean"/>';
         $strToReturn .= '</sequence></complexType>';
@@ -1401,13 +1401,13 @@
             $objToReturn->strToken = $objSoapObject->Token;
         if (property_exists($objSoapObject, 'CreatedDateTime'))
             $objToReturn->dttCreatedDateTime = new dxDateTime($objSoapObject->CreatedDateTime);
+        if (property_exists($objSoapObject, 'LastUpdated'))
+            $objToReturn->strLastUpdated = $objSoapObject->LastUpdated;
         if ((property_exists($objSoapObject, 'AccountObject')) &&
             ($objSoapObject->AccountObject))
             $objToReturn->AccountObject = Account::GetObjectFromSoapObject($objSoapObject->AccountObject);
         if (property_exists($objSoapObject, 'SearchMetaInfo'))
             $objToReturn->strSearchMetaInfo = $objSoapObject->SearchMetaInfo;
-        if (property_exists($objSoapObject, 'LastUpdated'))
-            $objToReturn->strLastUpdated = $objSoapObject->LastUpdated;
         if (property_exists($objSoapObject, 'ObjectOwner'))
             $objToReturn->intObjectOwner = $objSoapObject->ObjectOwner;
         if (property_exists($objSoapObject, '__blnRestored'))
@@ -1451,9 +1451,9 @@
         $iArray['Id'] = $this->intId;
         $iArray['Token'] = $this->strToken;
         $iArray['CreatedDateTime'] = $this->dttCreatedDateTime;
+        $iArray['LastUpdated'] = $this->strLastUpdated;
         $iArray['Account'] = $this->intAccount;
         $iArray['SearchMetaInfo'] = $this->strSearchMetaInfo;
-        $iArray['LastUpdated'] = $this->strLastUpdated;
         $iArray['ObjectOwner'] = $this->intObjectOwner;
         return new ArrayIterator($iArray);
     }
@@ -1492,10 +1492,10 @@
      * @property-read dxQueryNode $Id
      * @property-read dxQueryNode $Token
      * @property-read dxQueryNode $CreatedDateTime
+     * @property-read dxQueryNode $LastUpdated
      * @property-read dxQueryNode $Account
      * @property-read dxQueryNodeAccount $AccountObject
      * @property-read dxQueryNode $SearchMetaInfo
-     * @property-read dxQueryNode $LastUpdated
      * @property-read dxQueryNode $ObjectOwner
      *
      *
@@ -1514,14 +1514,14 @@
 					return new dxQueryNode('Token', 'Token', 'VarChar', $this);
 				case 'CreatedDateTime':
 					return new dxQueryNode('CreatedDateTime', 'CreatedDateTime', 'DateTime', $this);
+				case 'LastUpdated':
+					return new dxQueryNode('LastUpdated', 'LastUpdated', 'VarChar', $this);
 				case 'Account':
 					return new dxQueryNode('Account', 'Account', 'Integer', $this);
 				case 'AccountObject':
 					return new dxQueryNodeAccount('Account', 'AccountObject', 'Integer', $this);
 				case 'SearchMetaInfo':
 					return new dxQueryNode('SearchMetaInfo', 'SearchMetaInfo', 'Blob', $this);
-				case 'LastUpdated':
-					return new dxQueryNode('LastUpdated', 'LastUpdated', 'VarChar', $this);
 				case 'ObjectOwner':
 					return new dxQueryNode('ObjectOwner', 'ObjectOwner', 'Integer', $this);
 
@@ -1542,10 +1542,10 @@
      * @property-read dxQueryNode $Id
      * @property-read dxQueryNode $Token
      * @property-read dxQueryNode $CreatedDateTime
+     * @property-read dxQueryNode $LastUpdated
      * @property-read dxQueryNode $Account
      * @property-read dxQueryNodeAccount $AccountObject
      * @property-read dxQueryNode $SearchMetaInfo
-     * @property-read dxQueryNode $LastUpdated
      * @property-read dxQueryNode $ObjectOwner
      *
      *
@@ -1564,14 +1564,14 @@
 					return new dxQueryNode('Token', 'Token', 'string', $this);
 				case 'CreatedDateTime':
 					return new dxQueryNode('CreatedDateTime', 'CreatedDateTime', 'dxDateTime', $this);
+				case 'LastUpdated':
+					return new dxQueryNode('LastUpdated', 'LastUpdated', 'string', $this);
 				case 'Account':
 					return new dxQueryNode('Account', 'Account', 'integer', $this);
 				case 'AccountObject':
 					return new dxQueryNodeAccount('Account', 'AccountObject', 'integer', $this);
 				case 'SearchMetaInfo':
 					return new dxQueryNode('SearchMetaInfo', 'SearchMetaInfo', 'string', $this);
-				case 'LastUpdated':
-					return new dxQueryNode('LastUpdated', 'LastUpdated', 'string', $this);
 				case 'ObjectOwner':
 					return new dxQueryNode('ObjectOwner', 'ObjectOwner', 'integer', $this);
 
diff --git divblox/assets/php/third_party/htmlpurifier-4.10.0/maintenance/generate-ph5p-patch.php divblox/assets/php/third_party/htmlpurifier-4.10.0/maintenance/generate-ph5p-patch.php
diff --git divblox/assets/php/third_party/htmlpurifier-4.10.0/maintenance/flush.php divblox/assets/php/third_party/htmlpurifier-4.10.0/maintenance/flush.php
diff --git divblox/assets/php/third_party/htmlpurifier-4.10.0/maintenance/PH5P.patch divblox/assets/php/third_party/htmlpurifier-4.10.0/maintenance/PH5P.patch
diff --git divblox/assets/php/third_party/htmlpurifier-4.10.0/maintenance/rename-config.php divblox/assets/php/third_party/htmlpurifier-4.10.0/maintenance/rename-config.php
diff --git divblox/assets/php/third_party/htmlpurifier-4.10.0/maintenance/config-scanner.php divblox/assets/php/third_party/htmlpurifier-4.10.0/maintenance/config-scanner.php
diff --git divblox/config/framework/divblox_admin/initialization_wizard/ionCube/README.txt divblox/config/framework/divblox_admin/initialization_wizard/ionCube/README.txt
diff --git divblox/config/framework/divblox_admin/initialization_wizard/ionCube/index.php divblox/config/framework/divblox_admin/initialization_wizard/ionCube/index.php
diff --git divblox/config/framework/divblox_admin/initialization_wizard/ionCube/USER-GUIDE.txt divblox/config/framework/divblox_admin/initialization_wizard/ionCube/USER-GUIDE.txt
diff --git divblox/assets/php/third_party/htmlpurifier-4.10.0/test-settings.travis.php divblox/assets/php/third_party/htmlpurifier-4.10.0/test-settings.travis.php
diff --git divblox/assets/php/third_party/htmlpurifier-4.10.0/README.md divblox/assets/php/third_party/htmlpurifier-4.10.0/README.md
diff --git divblox/assets/php/third_party/htmlpurifier-4.10.0/INSTALL.fr.utf8 divblox/assets/php/third_party/htmlpurifier-4.10.0/INSTALL.fr.utf8
diff --git divblox/assets/php/third_party/htmlpurifier-4.10.0/TODO divblox/assets/php/third_party/htmlpurifier-4.10.0/TODO
diff --git divblox/assets/php/third_party/htmlpurifier-4.10.0/LICENSE divblox/assets/php/third_party/htmlpurifier-4.10.0/LICENSE
diff --git divblox/assets/php/third_party/htmlpurifier-4.10.0/phpdoc.ini divblox/assets/php/third_party/htmlpurifier-4.10.0/phpdoc.ini
diff --git divblox/assets/php/third_party/htmlpurifier-4.10.0/release1-update.php divblox/assets/php/third_party/htmlpurifier-4.10.0/release1-update.php
diff --git divblox/assets/php/third_party/htmlpurifier-4.10.0/package.php divblox/assets/php/third_party/htmlpurifier-4.10.0/package.php
diff --git divblox/assets/php/third_party/htmlpurifier-4.10.0/NEWS divblox/assets/php/third_party/htmlpurifier-4.10.0/NEWS
diff --git divblox/assets/php/third_party/htmlpurifier-4.10.0/test-settings.sample.php divblox/assets/php/third_party/htmlpurifier-4.10.0/test-settings.sample.php
diff --git divblox/assets/php/third_party/htmlpurifier-4.10.0/art/icon-16x16.svg divblox/assets/php/third_party/htmlpurifier-4.10.0/art/icon-16x16.svg
diff --git divblox/assets/php/third_party/htmlpurifier-4.10.0/docs/enduser-customize.html divblox/assets/php/third_party/htmlpurifier-4.10.0/docs/enduser-customize.html
diff --git divblox/assets/php/third_party/htmlpurifier-4.10.0/docs/enduser-tidy.html divblox/assets/php/third_party/htmlpurifier-4.10.0/docs/enduser-tidy.html
diff --git divblox/assets/php/third_party/htmlpurifier-4.10.0/docs/ref-devnetwork.html divblox/assets/php/third_party/htmlpurifier-4.10.0/docs/ref-devnetwork.html
diff --git divblox/assets/php/third_party/htmlpurifier-4.10.0/docs/dev-config-schema.html divblox/assets/php/third_party/htmlpurifier-4.10.0/docs/dev-config-schema.html
diff --git divblox/assets/php/third_party/htmlpurifier-4.10.0/docs/ref-css-length.txt divblox/assets/php/third_party/htmlpurifier-4.10.0/docs/ref-css-length.txt
diff --git divblox/assets/php/third_party/htmlpurifier-4.10.0/docs/enduser-id.html divblox/assets/php/third_party/htmlpurifier-4.10.0/docs/enduser-id.html
diff --git divblox/assets/php/third_party/htmlpurifier-4.10.0/docs/enduser-utf8.html divblox/assets/php/third_party/htmlpurifier-4.10.0/docs/enduser-utf8.html
diff --git divblox/assets/php/third_party/htmlpurifier-4.10.0/docs/ref-proprietary-tags.txt divblox/assets/php/third_party/htmlpurifier-4.10.0/docs/ref-proprietary-tags.txt
diff --git divblox/assets/php/third_party/htmlpurifier-4.10.0/docs/dev-flush.html divblox/assets/php/third_party/htmlpurifier-4.10.0/docs/dev-flush.html
diff --git divblox/assets/php/third_party/htmlpurifier-4.10.0/docs/dev-progress.html divblox/assets/php/third_party/htmlpurifier-4.10.0/docs/dev-progress.html
diff --git divblox/assets/php/third_party/htmlpurifier-4.10.0/docs/index.html divblox/assets/php/third_party/htmlpurifier-4.10.0/docs/index.html
diff --git divblox/assets/php/third_party/htmlpurifier-4.10.0/docs/proposal-new-directives.txt divblox/assets/php/third_party/htmlpurifier-4.10.0/docs/proposal-new-directives.txt
diff --git divblox/assets/php/third_party/htmlpurifier-4.10.0/docs/dev-naming.html divblox/assets/php/third_party/htmlpurifier-4.10.0/docs/dev-naming.html
diff --git divblox/assets/php/third_party/htmlpurifier-4.10.0/docs/proposal-filter-levels.txt divblox/assets/php/third_party/htmlpurifier-4.10.0/docs/proposal-filter-levels.txt
diff --git divblox/assets/php/third_party/htmlpurifier-4.10.0/docs/enduser-slow.html divblox/assets/php/third_party/htmlpurifier-4.10.0/docs/enduser-slow.html
diff --git divblox/assets/php/third_party/htmlpurifier-4.10.0/docs/dev-advanced-api.html divblox/assets/php/third_party/htmlpurifier-4.10.0/docs/dev-advanced-api.html
diff --git divblox/assets/php/third_party/htmlpurifier-4.10.0/docs/dev-includes.txt divblox/assets/php/third_party/htmlpurifier-4.10.0/docs/dev-includes.txt
diff --git divblox/assets/php/third_party/htmlpurifier-4.10.0/docs/proposal-colors.html divblox/assets/php/third_party/htmlpurifier-4.10.0/docs/proposal-colors.html
diff --git divblox/assets/php/third_party/htmlpurifier-4.10.0/docs/ref-html-modularization.txt divblox/assets/php/third_party/htmlpurifier-4.10.0/docs/ref-html-modularization.txt
diff --git divblox/assets/php/third_party/htmlpurifier-4.10.0/docs/entities/xhtml-special.ent divblox/assets/php/third_party/htmlpurifier-4.10.0/docs/entities/xhtml-special.ent
diff --git divblox/assets/php/third_party/htmlpurifier-4.10.0/docs/entities/xhtml-symbol.ent divblox/assets/php/third_party/htmlpurifier-4.10.0/docs/entities/xhtml-symbol.ent
diff --git divblox/assets/php/third_party/htmlpurifier-4.10.0/docs/examples/basic.php divblox/assets/php/third_party/htmlpurifier-4.10.0/docs/examples/basic.php
diff --git divblox/assets/php/third_party/htmlpurifier-4.10.0/docs/specimens/html-align-to-css.html divblox/assets/php/third_party/htmlpurifier-4.10.0/docs/specimens/html-align-to-css.html
diff --git divblox/assets/php/third_party/htmlpurifier-4.10.0/docs/specimens/LICENSE divblox/assets/php/third_party/htmlpurifier-4.10.0/docs/specimens/LICENSE
diff --git divblox/assets/php/third_party/htmlpurifier-4.10.0/docs/specimens/jochem-blok-word.html divblox/assets/php/third_party/htmlpurifier-4.10.0/docs/specimens/jochem-blok-word.html
diff --git divblox/assets/php/third_party/htmlpurifier-4.10.0/tests/multitest.php divblox/assets/php/third_party/htmlpurifier-4.10.0/tests/multitest.php
diff --git divblox/assets/php/third_party/htmlpurifier-4.10.0/tests/index.php divblox/assets/php/third_party/htmlpurifier-4.10.0/tests/index.php
diff --git divblox/assets/php/third_party/htmlpurifier-4.10.0/tests/CliTestCase.php divblox/assets/php/third_party/htmlpurifier-4.10.0/tests/CliTestCase.php
diff --git divblox/assets/php/third_party/htmlpurifier-4.10.0/tests/PHPT/Reporter/SimpleTest.php divblox/assets/php/third_party/htmlpurifier-4.10.0/tests/PHPT/Reporter/SimpleTest.php
diff --git divblox/assets/php/third_party/htmlpurifier-4.10.0/tests/PHPT/Controller/SimpleTest.php divblox/assets/php/third_party/htmlpurifier-4.10.0/tests/PHPT/Controller/SimpleTest.php
diff --git divblox/assets/php/third_party/htmlpurifier-4.10.0/tests/HTMLPurifier/HTMLDefinitionTest.php divblox/assets/php/third_party/htmlpurifier-4.10.0/tests/HTMLPurifier/HTMLDefinitionTest.php
diff --git divblox/assets/php/third_party/htmlpurifier-4.10.0/tests/HTMLPurifier/EncoderTest.php divblox/assets/php/third_party/htmlpurifier-4.10.0/tests/HTMLPurifier/EncoderTest.php
diff --git divblox/assets/php/third_party/htmlpurifier-4.10.0/tests/HTMLPurifier/ChildDefHarness.php divblox/assets/php/third_party/htmlpurifier-4.10.0/tests/HTMLPurifier/ChildDefHarness.php
diff --git divblox/assets/php/third_party/htmlpurifier-4.10.0/tests/HTMLPurifier/ErrorCollectorEMock.php divblox/assets/php/third_party/htmlpurifier-4.10.0/tests/HTMLPurifier/ErrorCollectorEMock.php
diff --git divblox/assets/php/third_party/htmlpurifier-4.10.0/tests/HTMLPurifier/HTMLModuleManagerTest.php divblox/assets/php/third_party/htmlpurifier-4.10.0/tests/HTMLPurifier/HTMLModuleManagerTest.php
diff --git divblox/assets/php/third_party/htmlpurifier-4.10.0/tests/HTMLPurifier/LanguageTest.php divblox/assets/php/third_party/htmlpurifier-4.10.0/tests/HTMLPurifier/LanguageTest.php
diff --git divblox/assets/php/third_party/htmlpurifier-4.10.0/tests/HTMLPurifier/DefinitionTestable.php divblox/assets/php/third_party/htmlpurifier-4.10.0/tests/HTMLPurifier/DefinitionTestable.php
diff --git divblox/assets/php/third_party/htmlpurifier-4.10.0/tests/HTMLPurifier/Harness.php divblox/assets/php/third_party/htmlpurifier-4.10.0/tests/HTMLPurifier/Harness.php
diff --git divblox/assets/php/third_party/htmlpurifier-4.10.0/tests/HTMLPurifier/AttrDefTest.php divblox/assets/php/third_party/htmlpurifier-4.10.0/tests/HTMLPurifier/AttrDefTest.php
diff --git divblox/assets/php/third_party/htmlpurifier-4.10.0/tests/HTMLPurifier/ConfigTest-create.ini divblox/assets/php/third_party/htmlpurifier-4.10.0/tests/HTMLPurifier/ConfigTest-create.ini
diff --git divblox/assets/php/third_party/htmlpurifier-4.10.0/tests/HTMLPurifier/EntityLookupTest.php divblox/assets/php/third_party/htmlpurifier-4.10.0/tests/HTMLPurifier/EntityLookupTest.php
diff --git divblox/assets/php/third_party/htmlpurifier-4.10.0/tests/HTMLPurifier/DefinitionTest.php divblox/assets/php/third_party/htmlpurifier-4.10.0/tests/HTMLPurifier/DefinitionTest.php
diff --git divblox/assets/php/third_party/htmlpurifier-4.10.0/tests/HTMLPurifier/HTMLModuleTest.php divblox/assets/php/third_party/htmlpurifier-4.10.0/tests/HTMLPurifier/HTMLModuleTest.php
diff --git divblox/assets/php/third_party/htmlpurifier-4.10.0/tests/HTMLPurifier/HTMLT.php divblox/assets/php/third_party/htmlpurifier-4.10.0/tests/HTMLPurifier/HTMLT.php
diff --git divblox/assets/php/third_party/htmlpurifier-4.10.0/tests/HTMLPurifier/AttrTypesTest.php divblox/assets/php/third_party/htmlpurifier-4.10.0/tests/HTMLPurifier/AttrTypesTest.php
diff --git divblox/assets/php/third_party/htmlpurifier-4.10.0/tests/HTMLPurifier/DefinitionCacheTest.php divblox/assets/php/third_party/htmlpurifier-4.10.0/tests/HTMLPurifier/DefinitionCacheTest.php
diff --git divblox/assets/php/third_party/htmlpurifier-4.10.0/tests/HTMLPurifier/URIParserTest.php divblox/assets/php/third_party/htmlpurifier-4.10.0/tests/HTMLPurifier/URIParserTest.php
diff --git divblox/assets/php/third_party/htmlpurifier-4.10.0/tests/HTMLPurifier/AttrTransformHarness.php divblox/assets/php/third_party/htmlpurifier-4.10.0/tests/HTMLPurifier/AttrTransformHarness.php
diff --git divblox/assets/php/third_party/htmlpurifier-4.10.0/tests/HTMLPurifier/URIFilterHarness.php divblox/assets/php/third_party/htmlpurifier-4.10.0/tests/HTMLPurifier/URIFilterHarness.php
diff --git divblox/assets/php/third_party/htmlpurifier-4.10.0/tests/HTMLPurifier/URIDefinitionTest.php divblox/assets/php/third_party/htmlpurifier-4.10.0/tests/HTMLPurifier/URIDefinitionTest.php
diff --git divblox/assets/php/third_party/htmlpurifier-4.10.0/tests/HTMLPurifier/TagTransformTest.php divblox/assets/php/third_party/htmlpurifier-4.10.0/tests/HTMLPurifier/TagTransformTest.php
diff --git divblox/assets/php/third_party/htmlpurifier-4.10.0/tests/HTMLPurifier/ConfigTest-finalize.ini divblox/assets/php/third_party/htmlpurifier-4.10.0/tests/HTMLPurifier/ConfigTest-finalize.ini
diff --git divblox/assets/php/third_party/htmlpurifier-4.10.0/tests/HTMLPurifier/PHPT/.gitignore divblox/assets/php/third_party/htmlpurifier-4.10.0/tests/HTMLPurifier/PHPT/.gitignore
diff --git divblox/assets/php/third_party/htmlpurifier-4.10.0/tests/HTMLPurifier/PHPT/utf8.phpt divblox/assets/php/third_party/htmlpurifier-4.10.0/tests/HTMLPurifier/PHPT/utf8.phpt
diff --git divblox/assets/php/third_party/htmlpurifier-4.10.0/tests/HTMLPurifier/PHPT/domxml.phpt divblox/assets/php/third_party/htmlpurifier-4.10.0/tests/HTMLPurifier/PHPT/domxml.phpt
diff --git divblox/assets/php/third_party/htmlpurifier-4.10.0/tests/HTMLPurifier/PHPT/stub.phpt divblox/assets/php/third_party/htmlpurifier-4.10.0/tests/HTMLPurifier/PHPT/stub.phpt
diff --git divblox/assets/php/third_party/htmlpurifier-4.10.0/tests/HTMLPurifier/PHPT/ze1_compatibility_mode.phpt divblox/assets/php/third_party/htmlpurifier-4.10.0/tests/HTMLPurifier/PHPT/ze1_compatibility_mode.phpt
diff --git divblox/assets/php/third_party/htmlpurifier-4.10.0/tests/HTMLPurifier/PHPT/kses/basic.phpt divblox/assets/php/third_party/htmlpurifier-4.10.0/tests/HTMLPurifier/PHPT/kses/basic.phpt
diff --git divblox/assets/php/third_party/htmlpurifier-4.10.0/tests/HTMLPurifier/PHPT/loading/_autoload.inc divblox/assets/php/third_party/htmlpurifier-4.10.0/tests/HTMLPurifier/PHPT/loading/_autoload.inc
diff --git divblox/assets/php/third_party/htmlpurifier-4.10.0/tests/HTMLPurifier/PHPT/loading/auto-includes.phpt divblox/assets/php/third_party/htmlpurifier-4.10.0/tests/HTMLPurifier/PHPT/loading/auto-includes.phpt
diff --git divblox/assets/php/third_party/htmlpurifier-4.10.0/tests/HTMLPurifier/PHPT/loading/standalone-with-prefix.phpt divblox/assets/php/third_party/htmlpurifier-4.10.0/tests/HTMLPurifier/PHPT/loading/standalone-with-prefix.phpt
diff --git divblox/assets/php/third_party/htmlpurifier-4.10.0/tests/HTMLPurifier/PHPT/loading/error-auto-with-spl-nonstatic-autoload.phpt divblox/assets/php/third_party/htmlpurifier-4.10.0/tests/HTMLPurifier/PHPT/loading/error-auto-with-spl-nonstatic-autoload.phpt
diff --git divblox/assets/php/third_party/htmlpurifier-4.10.0/tests/HTMLPurifier/PHPT/loading/path-includes.phpt divblox/assets/php/third_party/htmlpurifier-4.10.0/tests/HTMLPurifier/PHPT/loading/path-includes.phpt
diff --git divblox/assets/php/third_party/htmlpurifier-4.10.0/tests/HTMLPurifier/PHPT/loading/auto-without-spl-with-autoload.phpt divblox/assets/php/third_party/htmlpurifier-4.10.0/tests/HTMLPurifier/PHPT/loading/auto-without-spl-with-autoload.phpt
diff --git divblox/assets/php/third_party/htmlpurifier-4.10.0/tests/HTMLPurifier/PHPT/loading/_no-autoload.inc divblox/assets/php/third_party/htmlpurifier-4.10.0/tests/HTMLPurifier/PHPT/loading/_no-autoload.inc
diff --git divblox/assets/php/third_party/htmlpurifier-4.10.0/tests/HTMLPurifier/HTMLT/safe-object-embed-munge.htmlt divblox/assets/php/third_party/htmlpurifier-4.10.0/tests/HTMLPurifier/HTMLT/safe-object-embed-munge.htmlt
diff --git divblox/assets/php/third_party/htmlpurifier-4.10.0/tests/HTMLPurifier/HTMLT/style-onload.htmlt divblox/assets/php/third_party/htmlpurifier-4.10.0/tests/HTMLPurifier/HTMLT/style-onload.htmlt
diff --git divblox/assets/php/third_party/htmlpurifier-4.10.0/tests/HTMLPurifier/HTMLT/script-dbl-comment.htmlt divblox/assets/php/third_party/htmlpurifier-4.10.0/tests/HTMLPurifier/HTMLT/script-dbl-comment.htmlt
diff --git divblox/assets/php/third_party/htmlpurifier-4.10.0/tests/HTMLPurifier/HTMLT/id-enabled.htmlt divblox/assets/php/third_party/htmlpurifier-4.10.0/tests/HTMLPurifier/HTMLT/id-enabled.htmlt
diff --git divblox/assets/php/third_party/htmlpurifier-4.10.0/tests/HTMLPurifier/HTMLT/inline-list-loop.htmlt divblox/assets/php/third_party/htmlpurifier-4.10.0/tests/HTMLPurifier/HTMLT/inline-list-loop.htmlt
diff --git divblox/assets/php/third_party/htmlpurifier-4.10.0/tests/HTMLPurifier/HTMLT/trusted-comments-required.htmlt divblox/assets/php/third_party/htmlpurifier-4.10.0/tests/HTMLPurifier/HTMLT/trusted-comments-required.htmlt
diff --git divblox/assets/php/third_party/htmlpurifier-4.10.0/tests/HTMLPurifier/HTMLT/script-bare.htmlt divblox/assets/php/third_party/htmlpurifier-4.10.0/tests/HTMLPurifier/HTMLT/script-bare.htmlt
diff --git divblox/assets/php/third_party/htmlpurifier-4.10.0/tests/HTMLPurifier/HTMLT/trusted-comments.htmlt divblox/assets/php/third_party/htmlpurifier-4.10.0/tests/HTMLPurifier/HTMLT/trusted-comments.htmlt
diff --git divblox/assets/php/third_party/htmlpurifier-4.10.0/tests/HTMLPurifier/HTMLT/t78.htmlt divblox/assets/php/third_party/htmlpurifier-4.10.0/tests/HTMLPurifier/HTMLT/t78.htmlt
diff --git divblox/assets/php/third_party/htmlpurifier-4.10.0/tests/HTMLPurifier/HTMLT/script-comment.htmlt divblox/assets/php/third_party/htmlpurifier-4.10.0/tests/HTMLPurifier/HTMLT/script-comment.htmlt
diff --git divblox/assets/php/third_party/htmlpurifier-4.10.0/tests/HTMLPurifier/HTMLT/basic.htmlt divblox/assets/php/third_party/htmlpurifier-4.10.0/tests/HTMLPurifier/HTMLT/basic.htmlt
diff --git divblox/assets/php/third_party/htmlpurifier-4.10.0/tests/HTMLPurifier/HTMLT/script-ideal.htmlt divblox/assets/php/third_party/htmlpurifier-4.10.0/tests/HTMLPurifier/HTMLT/script-ideal.htmlt
diff --git divblox/assets/php/third_party/htmlpurifier-4.10.0/tests/HTMLPurifier/HTMLT/safe-iframe-invalid.htmlt divblox/assets/php/third_party/htmlpurifier-4.10.0/tests/HTMLPurifier/HTMLT/safe-iframe-invalid.htmlt
diff --git divblox/assets/php/third_party/htmlpurifier-4.10.0/tests/HTMLPurifier/HTMLT/secure-munge.htmlt divblox/assets/php/third_party/htmlpurifier-4.10.0/tests/HTMLPurifier/HTMLT/secure-munge.htmlt
diff --git divblox/assets/php/third_party/htmlpurifier-4.10.0/tests/HTMLPurifier/HTMLT/strict-underline.htmlt divblox/assets/php/third_party/htmlpurifier-4.10.0/tests/HTMLPurifier/HTMLT/strict-underline.htmlt
diff --git divblox/assets/php/third_party/htmlpurifier-4.10.0/tests/HTMLPurifier/HTMLT/disable-uri.htmlt divblox/assets/php/third_party/htmlpurifier-4.10.0/tests/HTMLPurifier/HTMLT/disable-uri.htmlt
diff --git divblox/assets/php/third_party/htmlpurifier-4.10.0/tests/HTMLPurifier/HTMLT/munge.htmlt divblox/assets/php/third_party/htmlpurifier-4.10.0/tests/HTMLPurifier/HTMLT/munge.htmlt
diff --git divblox/assets/php/third_party/htmlpurifier-4.10.0/tests/HTMLPurifier/HTMLT/css-allowed-remove.htmlt divblox/assets/php/third_party/htmlpurifier-4.10.0/tests/HTMLPurifier/HTMLT/css-allowed-remove.htmlt
diff --git divblox/assets/php/third_party/htmlpurifier-4.10.0/tests/HTMLPurifier/HTMLT/safe-iframe.htmlt divblox/assets/php/third_party/htmlpurifier-4.10.0/tests/HTMLPurifier/HTMLT/safe-iframe.htmlt
diff --git divblox/assets/php/third_party/htmlpurifier-4.10.0/tests/HTMLPurifier/HTMLT/double-youtube.htmlt divblox/assets/php/third_party/htmlpurifier-4.10.0/tests/HTMLPurifier/HTMLT/double-youtube.htmlt
diff --git divblox/assets/php/third_party/htmlpurifier-4.10.0/tests/HTMLPurifier/HTMLT/blacklist-preserve.htmlt divblox/assets/php/third_party/htmlpurifier-4.10.0/tests/HTMLPurifier/HTMLT/blacklist-preserve.htmlt
diff --git divblox/assets/php/third_party/htmlpurifier-4.10.0/tests/HTMLPurifier/Filter/ExtractStyleBlocksTest.php divblox/assets/php/third_party/htmlpurifier-4.10.0/tests/HTMLPurifier/Filter/ExtractStyleBlocksTest.php
diff --git divblox/assets/php/third_party/htmlpurifier-4.10.0/tests/HTMLPurifier/AttrDef/LangTest.php divblox/assets/php/third_party/htmlpurifier-4.10.0/tests/HTMLPurifier/AttrDef/LangTest.php
diff --git divblox/assets/php/third_party/htmlpurifier-4.10.0/tests/HTMLPurifier/AttrDef/CSS/CompositeTest.php divblox/assets/php/third_party/htmlpurifier-4.10.0/tests/HTMLPurifier/AttrDef/CSS/CompositeTest.php
diff --git divblox/assets/php/third_party/htmlpurifier-4.10.0/tests/HTMLPurifier/AttrDef/CSS/MultipleTest.php divblox/assets/php/third_party/htmlpurifier-4.10.0/tests/HTMLPurifier/AttrDef/CSS/MultipleTest.php
diff --git project/components/ungrouped/imageviewer/component.js project/components/ungrouped/imageviewer/component.js
diff --git divblox/assets/php/third_party/htmlpurifier-4.10.0/tests/HTMLPurifier/AttrDef/CSS/NumberTest.php divblox/assets/php/third_party/htmlpurifier-4.10.0/tests/HTMLPurifier/AttrDef/CSS/NumberTest.php
diff --git divblox/assets/php/third_party/htmlpurifier-4.10.0/tests/HTMLPurifier/AttrDef/CSS/URITest.php divblox/assets/php/third_party/htmlpurifier-4.10.0/tests/HTMLPurifier/AttrDef/CSS/URITest.php
diff --git divblox/assets/php/third_party/htmlpurifier-4.10.0/tests/HTMLPurifier/AttrDef/CSS/ImportantDecoratorTest.php divblox/assets/php/third_party/htmlpurifier-4.10.0/tests/HTMLPurifier/AttrDef/CSS/ImportantDecoratorTest.php
diff --git divblox/assets/php/third_party/htmlpurifier-4.10.0/tests/HTMLPurifier/AttrDef/CSS/BorderTest.php divblox/assets/php/third_party/htmlpurifier-4.10.0/tests/HTMLPurifier/AttrDef/CSS/BorderTest.php
diff --git divblox/assets/php/third_party/htmlpurifier-4.10.0/tests/HTMLPurifier/AttrDef/CSS/BackgroundPositionTest.php divblox/assets/php/third_party/htmlpurifier-4.10.0/tests/HTMLPurifier/AttrDef/CSS/BackgroundPositionTest.php
diff --git divblox/assets/php/third_party/htmlpurifier-4.10.0/tests/HTMLPurifier/AttrDef/CSS/FontFamilyTest.php divblox/assets/php/third_party/htmlpurifier-4.10.0/tests/HTMLPurifier/AttrDef/CSS/FontFamilyTest.php
diff --git divblox/assets/php/third_party/htmlpurifier-4.10.0/tests/HTMLPurifier/AttrDef/CSS/ColorTest.php divblox/assets/php/third_party/htmlpurifier-4.10.0/tests/HTMLPurifier/AttrDef/CSS/ColorTest.php
diff --git divblox/assets/php/third_party/htmlpurifier-4.10.0/tests/HTMLPurifier/AttrDef/CSS/FontTest.php divblox/assets/php/third_party/htmlpurifier-4.10.0/tests/HTMLPurifier/AttrDef/CSS/FontTest.php
diff --git divblox/assets/php/third_party/htmlpurifier-4.10.0/tests/HTMLPurifier/AttrDef/URI/IPv4Test.php divblox/assets/php/third_party/htmlpurifier-4.10.0/tests/HTMLPurifier/AttrDef/URI/IPv4Test.php
diff --git divblox/assets/php/third_party/htmlpurifier-4.10.0/tests/HTMLPurifier/AttrDef/HTML/LengthTest.php divblox/assets/php/third_party/htmlpurifier-4.10.0/tests/HTMLPurifier/AttrDef/HTML/LengthTest.php
diff --git divblox/assets/php/third_party/htmlpurifier-4.10.0/tests/HTMLPurifier/AttrDef/HTML/NmtokensTest.php divblox/assets/php/third_party/htmlpurifier-4.10.0/tests/HTMLPurifier/AttrDef/HTML/NmtokensTest.php
diff --git divblox/assets/php/third_party/htmlpurifier-4.10.0/tests/HTMLPurifier/AttrDef/HTML/FrameTargetTest.php divblox/assets/php/third_party/htmlpurifier-4.10.0/tests/HTMLPurifier/AttrDef/HTML/FrameTargetTest.php
diff --git divblox/assets/php/third_party/htmlpurifier-4.10.0/tests/HTMLPurifier/AttrDef/HTML/ClassTest.php divblox/assets/php/third_party/htmlpurifier-4.10.0/tests/HTMLPurifier/AttrDef/HTML/ClassTest.php
diff --git divblox/assets/php/third_party/htmlpurifier-4.10.0/tests/HTMLPurifier/AttrDef/HTML/LinkTypesTest.php divblox/assets/php/third_party/htmlpurifier-4.10.0/tests/HTMLPurifier/AttrDef/HTML/LinkTypesTest.php
diff --git divblox/assets/php/third_party/htmlpurifier-4.10.0/tests/HTMLPurifier/ChildDef/TableTest.php divblox/assets/php/third_party/htmlpurifier-4.10.0/tests/HTMLPurifier/ChildDef/TableTest.php
diff --git divblox/assets/php/third_party/htmlpurifier-4.10.0/tests/HTMLPurifier/ChildDef/ChameleonTest.php divblox/assets/php/third_party/htmlpurifier-4.10.0/tests/HTMLPurifier/ChildDef/ChameleonTest.php
diff --git divblox/assets/php/third_party/htmlpurifier-4.10.0/tests/HTMLPurifier/Injector/DisplayLinkURITest.php divblox/assets/php/third_party/htmlpurifier-4.10.0/tests/HTMLPurifier/Injector/DisplayLinkURITest.php
diff --git divblox/assets/php/third_party/htmlpurifier-4.10.0/tests/HTMLPurifier/Strategy/CoreTest.php divblox/assets/php/third_party/htmlpurifier-4.10.0/tests/HTMLPurifier/Strategy/CoreTest.php
diff --git divblox/assets/php/third_party/htmlpurifier-4.10.0/tests/HTMLPurifier/Strategy/RemoveForeignElements_TidyTest.php divblox/assets/php/third_party/htmlpurifier-4.10.0/tests/HTMLPurifier/Strategy/RemoveForeignElements_TidyTest.php
diff --git divblox/assets/php/third_party/htmlpurifier-4.10.0/tests/HTMLPurifier/Strategy/CompositeTest.php divblox/assets/php/third_party/htmlpurifier-4.10.0/tests/HTMLPurifier/Strategy/CompositeTest.php
diff --git divblox/assets/php/third_party/htmlpurifier-4.10.0/tests/HTMLPurifier/Strategy/ValidateAttributesTest.php divblox/assets/php/third_party/htmlpurifier-4.10.0/tests/HTMLPurifier/Strategy/ValidateAttributesTest.php
diff --git divblox/assets/php/third_party/htmlpurifier-4.10.0/tests/HTMLPurifier/Strategy/MakeWellFormed_InjectorTest.php divblox/assets/php/third_party/htmlpurifier-4.10.0/tests/HTMLPurifier/Strategy/MakeWellFormed_InjectorTest.php
diff --git divblox/assets/php/third_party/htmlpurifier-4.10.0/tests/HTMLPurifier/Strategy/MakeWellFormed_ErrorsTest.php divblox/assets/php/third_party/htmlpurifier-4.10.0/tests/HTMLPurifier/Strategy/MakeWellFormed_ErrorsTest.php
diff --git divblox/assets/php/third_party/htmlpurifier-4.10.0/tests/HTMLPurifier/Strategy/MakeWellFormedTest.php divblox/assets/php/third_party/htmlpurifier-4.10.0/tests/HTMLPurifier/Strategy/MakeWellFormedTest.php
diff --git divblox/assets/php/third_party/htmlpurifier-4.10.0/tests/HTMLPurifier/Strategy/MakeWellFormed/EndInsertInjectorTest.php divblox/assets/php/third_party/htmlpurifier-4.10.0/tests/HTMLPurifier/Strategy/MakeWellFormed/EndInsertInjectorTest.php
diff --git divblox/assets/php/third_party/htmlpurifier-4.10.0/tests/HTMLPurifier/Strategy/MakeWellFormed/EndRewindInjectorTest.php divblox/assets/php/third_party/htmlpurifier-4.10.0/tests/HTMLPurifier/Strategy/MakeWellFormed/EndRewindInjectorTest.php
diff --git divblox/assets/php/third_party/htmlpurifier-4.10.0/tests/HTMLPurifier/Strategy/MakeWellFormed/SkipInjectorTest.php divblox/assets/php/third_party/htmlpurifier-4.10.0/tests/HTMLPurifier/Strategy/MakeWellFormed/SkipInjectorTest.php
diff --git divblox/assets/php/third_party/htmlpurifier-4.10.0/tests/HTMLPurifier/URIFilter/DisableResourcesTest.php divblox/assets/php/third_party/htmlpurifier-4.10.0/tests/HTMLPurifier/URIFilter/DisableResourcesTest.php
diff --git divblox/assets/php/third_party/htmlpurifier-4.10.0/tests/HTMLPurifier/URIFilter/MakeAbsoluteTest.php divblox/assets/php/third_party/htmlpurifier-4.10.0/tests/HTMLPurifier/URIFilter/MakeAbsoluteTest.php
diff --git divblox/assets/php/third_party/htmlpurifier-4.10.0/tests/HTMLPurifier/HTMLModule/FormsTest.php divblox/assets/php/third_party/htmlpurifier-4.10.0/tests/HTMLPurifier/HTMLModule/FormsTest.php
diff --git divblox/assets/php/third_party/htmlpurifier-4.10.0/tests/HTMLPurifier/HTMLModule/NofollowTest.php divblox/assets/php/third_party/htmlpurifier-4.10.0/tests/HTMLPurifier/HTMLModule/NofollowTest.php
diff --git divblox/assets/php/third_party/htmlpurifier-4.10.0/tests/HTMLPurifier/HTMLModule/TargetNoreferrerTest.php divblox/assets/php/third_party/htmlpurifier-4.10.0/tests/HTMLPurifier/HTMLModule/TargetNoreferrerTest.php
diff --git divblox/assets/php/third_party/htmlpurifier-4.10.0/tests/HTMLPurifier/HTMLModule/SafeObjectTest.php divblox/assets/php/third_party/htmlpurifier-4.10.0/tests/HTMLPurifier/HTMLModule/SafeObjectTest.php
diff --git divblox/assets/php/third_party/htmlpurifier-4.10.0/tests/HTMLPurifier/HTMLModule/ImageTest.php divblox/assets/php/third_party/htmlpurifier-4.10.0/tests/HTMLPurifier/HTMLModule/ImageTest.php
diff --git divblox/assets/php/third_party/htmlpurifier-4.10.0/tests/HTMLPurifier/HTMLModule/ObjectTest.php divblox/assets/php/third_party/htmlpurifier-4.10.0/tests/HTMLPurifier/HTMLModule/ObjectTest.php
diff --git divblox/assets/php/third_party/htmlpurifier-4.10.0/tests/HTMLPurifier/HTMLModule/ScriptingTest.php divblox/assets/php/third_party/htmlpurifier-4.10.0/tests/HTMLPurifier/HTMLModule/ScriptingTest.php
diff --git divblox/assets/php/third_party/htmlpurifier-4.10.0/tests/HTMLPurifier/ConfigSchema/Validator/directive/aliasesAliasCollision.vtest divblox/assets/php/third_party/htmlpurifier-4.10.0/tests/HTMLPurifier/ConfigSchema/Validator/directive/aliasesAliasCollision.vtest
diff --git divblox/assets/php/third_party/htmlpurifier-4.10.0/tests/HTMLPurifier/ConfigSchema/Validator/directive/typeDefined.vtest divblox/assets/php/third_party/htmlpurifier-4.10.0/tests/HTMLPurifier/ConfigSchema/Validator/directive/typeDefined.vtest
diff --git divblox/assets/php/third_party/htmlpurifier-4.10.0/tests/HTMLPurifier/ConfigSchema/Validator/directive/defaultType.vtest divblox/assets/php/third_party/htmlpurifier-4.10.0/tests/HTMLPurifier/ConfigSchema/Validator/directive/defaultType.vtest
diff --git divblox/assets/php/third_party/htmlpurifier-4.10.0/tests/HTMLPurifier/ConfigSchema/Validator/directive/unique.vtest divblox/assets/php/third_party/htmlpurifier-4.10.0/tests/HTMLPurifier/ConfigSchema/Validator/directive/unique.vtest
diff --git divblox/assets/php/third_party/htmlpurifier-4.10.0/tests/HTMLPurifier/ConfigSchema/Validator/directive/aliasesDirectiveCollision.vtest divblox/assets/php/third_party/htmlpurifier-4.10.0/tests/HTMLPurifier/ConfigSchema/Validator/directive/aliasesDirectiveCollision.vtest
diff --git divblox/assets/php/third_party/htmlpurifier-4.10.0/tests/HTMLPurifier/ConfigSchema/Validator/directive/typeWithAllowedIsStringType.vtest divblox/assets/php/third_party/htmlpurifier-4.10.0/tests/HTMLPurifier/ConfigSchema/Validator/directive/typeWithAllowedIsStringType.vtest
diff --git divblox/assets/php/third_party/htmlpurifier-4.10.0/tests/HTMLPurifier/ConfigSchema/Validator/directive/allowedIsString.vtest divblox/assets/php/third_party/htmlpurifier-4.10.0/tests/HTMLPurifier/ConfigSchema/Validator/directive/allowedIsString.vtest
diff --git divblox/assets/php/third_party/htmlpurifier-4.10.0/tests/HTMLPurifier/ConfigSchema/Validator/directive/valueAliasesAliasNotAllowed.vtest divblox/assets/php/third_party/htmlpurifier-4.10.0/tests/HTMLPurifier/ConfigSchema/Validator/directive/valueAliasesAliasNotAllowed.vtest
diff --git divblox/assets/php/third_party/htmlpurifier-4.10.0/tests/HTMLPurifier/ConfigSchema/Validator/directive/valueAliasesAliasIsString.vtest divblox/assets/php/third_party/htmlpurifier-4.10.0/tests/HTMLPurifier/ConfigSchema/Validator/directive/valueAliasesAliasIsString.vtest
diff --git divblox/assets/php/third_party/htmlpurifier-4.10.0/tests/HTMLPurifier/AttrTransform/ImgRequiredTest.php divblox/assets/php/third_party/htmlpurifier-4.10.0/tests/HTMLPurifier/AttrTransform/ImgRequiredTest.php
diff --git divblox/assets/php/third_party/htmlpurifier-4.10.0/tests/HTMLPurifier/AttrTransform/LangTest.php divblox/assets/php/third_party/htmlpurifier-4.10.0/tests/HTMLPurifier/AttrTransform/LangTest.php
diff --git divblox/assets/php/third_party/htmlpurifier-4.10.0/tests/HTMLPurifier/AttrTransform/LengthTest.php divblox/assets/php/third_party/htmlpurifier-4.10.0/tests/HTMLPurifier/AttrTransform/LengthTest.php
diff --git divblox/assets/php/third_party/htmlpurifier-4.10.0/tests/HTMLPurifier/AttrTransform/NameSyncTest.php divblox/assets/php/third_party/htmlpurifier-4.10.0/tests/HTMLPurifier/AttrTransform/NameSyncTest.php
diff --git divblox/assets/php/third_party/htmlpurifier-4.10.0/tests/HTMLPurifier/AttrTransform/BackgroundTest.php divblox/assets/php/third_party/htmlpurifier-4.10.0/tests/HTMLPurifier/AttrTransform/BackgroundTest.php
diff --git divblox/assets/php/third_party/htmlpurifier-4.10.0/tests/HTMLPurifier/AttrTransform/ImgSpaceTest.php divblox/assets/php/third_party/htmlpurifier-4.10.0/tests/HTMLPurifier/AttrTransform/ImgSpaceTest.php
diff --git divblox/assets/php/third_party/htmlpurifier-4.10.0/tests/HTMLPurifier/AttrTransform/BgColorTest.php divblox/assets/php/third_party/htmlpurifier-4.10.0/tests/HTMLPurifier/AttrTransform/BgColorTest.php
diff --git divblox/assets/php/third_party/htmlpurifier-4.10.0/tests/HTMLPurifier/AttrTransform/NameTest.php divblox/assets/php/third_party/htmlpurifier-4.10.0/tests/HTMLPurifier/AttrTransform/NameTest.php
diff --git divblox/assets/php/third_party/htmlpurifier-4.10.0/tests/HTMLPurifier/DefinitionCache/SerializerTest.php divblox/assets/php/third_party/htmlpurifier-4.10.0/tests/HTMLPurifier/DefinitionCache/SerializerTest.php
diff --git divblox/assets/php/third_party/htmlpurifier-4.10.0/tests/HTMLPurifier/DefinitionCache/Decorator/MemoryTest.php divblox/assets/php/third_party/htmlpurifier-4.10.0/tests/HTMLPurifier/DefinitionCache/Decorator/MemoryTest.php
diff --git divblox/assets/php/third_party/htmlpurifier-4.10.0/tests/HTMLPurifier/DefinitionCache/SerializerTest/README divblox/assets/php/third_party/htmlpurifier-4.10.0/tests/HTMLPurifier/DefinitionCache/SerializerTest/README
diff --git divblox/assets/php/third_party/htmlpurifier-4.10.0/tests/HTMLPurifier/StringHashParser/AppendMultiline.txt divblox/assets/php/third_party/htmlpurifier-4.10.0/tests/HTMLPurifier/StringHashParser/AppendMultiline.txt
diff --git divblox/assets/php/third_party/htmlpurifier-4.10.0/tests/HTMLPurifier/StringHashParser/Default.txt divblox/assets/php/third_party/htmlpurifier-4.10.0/tests/HTMLPurifier/StringHashParser/Default.txt
diff --git divblox/assets/php/third_party/htmlpurifier-4.10.0/tests/HTMLPurifier/StringHashParser/OverrideSingle.txt divblox/assets/php/third_party/htmlpurifier-4.10.0/tests/HTMLPurifier/StringHashParser/OverrideSingle.txt
diff --git divblox/assets/php/third_party/htmlpurifier-4.10.0/extras/HTMLPurifierExtras.auto.php divblox/assets/php/third_party/htmlpurifier-4.10.0/extras/HTMLPurifierExtras.auto.php
diff --git divblox/assets/php/third_party/htmlpurifier-4.10.0/library/HTMLPurifier.composer.php divblox/assets/php/third_party/htmlpurifier-4.10.0/library/HTMLPurifier.composer.php
diff --git divblox/assets/php/third_party/htmlpurifier-4.10.0/library/HTMLPurifier.php divblox/assets/php/third_party/htmlpurifier-4.10.0/library/HTMLPurifier.php
diff --git divblox/assets/php/third_party/htmlpurifier-4.10.0/library/HTMLPurifier.safe-includes.php divblox/assets/php/third_party/htmlpurifier-4.10.0/library/HTMLPurifier.safe-includes.php
diff --git divblox/assets/php/third_party/htmlpurifier-4.10.0/library/HTMLPurifier.includes.php divblox/assets/php/third_party/htmlpurifier-4.10.0/library/HTMLPurifier.includes.php
diff --git divblox/assets/php/third_party/htmlpurifier-4.10.0/library/HTMLPurifier/DoctypeRegistry.php divblox/assets/php/third_party/htmlpurifier-4.10.0/library/HTMLPurifier/DoctypeRegistry.php
diff --git divblox/assets/php/third_party/htmlpurifier-4.10.0/library/HTMLPurifier/StringHash.php divblox/assets/php/third_party/htmlpurifier-4.10.0/library/HTMLPurifier/StringHash.php
diff --git divblox/assets/php/third_party/htmlpurifier-4.10.0/library/HTMLPurifier/Printer.php divblox/assets/php/third_party/htmlpurifier-4.10.0/library/HTMLPurifier/Printer.php
diff --git divblox/assets/php/third_party/htmlpurifier-4.10.0/library/HTMLPurifier/ChildDef.php divblox/assets/php/third_party/htmlpurifier-4.10.0/library/HTMLPurifier/ChildDef.php
diff --git divblox/assets/php/third_party/htmlpurifier-4.10.0/library/HTMLPurifier/URIScheme.php divblox/assets/php/third_party/htmlpurifier-4.10.0/library/HTMLPurifier/URIScheme.php
diff --git divblox/assets/php/third_party/htmlpurifier-4.10.0/library/HTMLPurifier/Queue.php divblox/assets/php/third_party/htmlpurifier-4.10.0/library/HTMLPurifier/Queue.php
diff --git divblox/assets/php/third_party/htmlpurifier-4.10.0/library/HTMLPurifier/Encoder.php divblox/assets/php/third_party/htmlpurifier-4.10.0/library/HTMLPurifier/Encoder.php
diff --git divblox/assets/php/third_party/htmlpurifier-4.10.0/library/HTMLPurifier/ElementDef.php divblox/assets/php/third_party/htmlpurifier-4.10.0/library/HTMLPurifier/ElementDef.php
diff --git divblox/assets/php/third_party/htmlpurifier-4.10.0/library/HTMLPurifier/Exception.php divblox/assets/php/third_party/htmlpurifier-4.10.0/library/HTMLPurifier/Exception.php
diff --git divblox/assets/php/third_party/htmlpurifier-4.10.0/library/HTMLPurifier/ErrorStruct.php divblox/assets/php/third_party/htmlpurifier-4.10.0/library/HTMLPurifier/ErrorStruct.php
diff --git divblox/assets/php/third_party/htmlpurifier-4.10.0/library/HTMLPurifier/TagTransform.php divblox/assets/php/third_party/htmlpurifier-4.10.0/library/HTMLPurifier/TagTransform.php
diff --git divblox/assets/php/third_party/htmlpurifier-4.10.0/library/HTMLPurifier/DefinitionCache.php divblox/assets/php/third_party/htmlpurifier-4.10.0/library/HTMLPurifier/DefinitionCache.php
diff --git divblox/assets/php/third_party/htmlpurifier-4.10.0/library/HTMLPurifier/Filter.php divblox/assets/php/third_party/htmlpurifier-4.10.0/library/HTMLPurifier/Filter.php
diff --git divblox/assets/php/third_party/htmlpurifier-4.10.0/library/HTMLPurifier/URIDefinition.php divblox/assets/php/third_party/htmlpurifier-4.10.0/library/HTMLPurifier/URIDefinition.php
diff --git divblox/assets/php/third_party/htmlpurifier-4.10.0/library/HTMLPurifier/Strategy.php divblox/assets/php/third_party/htmlpurifier-4.10.0/library/HTMLPurifier/Strategy.php
diff --git divblox/assets/php/third_party/htmlpurifier-4.10.0/library/HTMLPurifier/AttrDef.php divblox/assets/php/third_party/htmlpurifier-4.10.0/library/HTMLPurifier/AttrDef.php
diff --git divblox/assets/php/third_party/htmlpurifier-4.10.0/library/HTMLPurifier/Generator.php divblox/assets/php/third_party/htmlpurifier-4.10.0/library/HTMLPurifier/Generator.php
diff --git divblox/assets/php/third_party/htmlpurifier-4.10.0/library/HTMLPurifier/AttrTypes.php divblox/assets/php/third_party/htmlpurifier-4.10.0/library/HTMLPurifier/AttrTypes.php
diff --git divblox/assets/php/third_party/htmlpurifier-4.10.0/library/HTMLPurifier/LanguageFactory.php divblox/assets/php/third_party/htmlpurifier-4.10.0/library/HTMLPurifier/LanguageFactory.php
diff --git divblox/assets/php/third_party/htmlpurifier-4.10.0/library/HTMLPurifier/HTMLDefinition.php divblox/assets/php/third_party/htmlpurifier-4.10.0/library/HTMLPurifier/HTMLDefinition.php
diff --git divblox/assets/php/third_party/htmlpurifier-4.10.0/library/HTMLPurifier/URIParser.php divblox/assets/php/third_party/htmlpurifier-4.10.0/library/HTMLPurifier/URIParser.php
diff --git divblox/assets/php/third_party/htmlpurifier-4.10.0/library/HTMLPurifier/AttrValidator.php divblox/assets/php/third_party/htmlpurifier-4.10.0/library/HTMLPurifier/AttrValidator.php
diff --git divblox/assets/php/third_party/htmlpurifier-4.10.0/library/HTMLPurifier/Node/Comment.php divblox/assets/php/third_party/htmlpurifier-4.10.0/library/HTMLPurifier/Node/Comment.php
diff --git divblox/assets/php/third_party/htmlpurifier-4.10.0/library/HTMLPurifier/Lexer/DirectLex.php divblox/assets/php/third_party/htmlpurifier-4.10.0/library/HTMLPurifier/Lexer/DirectLex.php
diff --git divblox/assets/php/third_party/htmlpurifier-4.10.0/library/HTMLPurifier/Lexer/DOMLex.php divblox/assets/php/third_party/htmlpurifier-4.10.0/library/HTMLPurifier/Lexer/DOMLex.php
diff --git divblox/assets/php/third_party/htmlpurifier-4.10.0/library/HTMLPurifier/Lexer/PH5P.php divblox/assets/php/third_party/htmlpurifier-4.10.0/library/HTMLPurifier/Lexer/PH5P.php
diff --git divblox/assets/php/third_party/htmlpurifier-4.10.0/library/HTMLPurifier/Token/Tag.php divblox/assets/php/third_party/htmlpurifier-4.10.0/library/HTMLPurifier/Token/Tag.php
diff --git divblox/assets/php/third_party/htmlpurifier-4.10.0/library/HTMLPurifier/Token/End.php divblox/assets/php/third_party/htmlpurifier-4.10.0/library/HTMLPurifier/Token/End.php
diff --git divblox/assets/php/third_party/htmlpurifier-4.10.0/library/HTMLPurifier/AttrDef/CSS.php divblox/assets/php/third_party/htmlpurifier-4.10.0/library/HTMLPurifier/AttrDef/CSS.php
diff --git divblox/assets/php/third_party/htmlpurifier-4.10.0/library/HTMLPurifier/AttrDef/Integer.php divblox/assets/php/third_party/htmlpurifier-4.10.0/library/HTMLPurifier/AttrDef/Integer.php
diff --git divblox/assets/php/third_party/htmlpurifier-4.10.0/library/HTMLPurifier/AttrDef/Switch.php divblox/assets/php/third_party/htmlpurifier-4.10.0/library/HTMLPurifier/AttrDef/Switch.php
diff --git divblox/assets/php/third_party/htmlpurifier-4.10.0/library/HTMLPurifier/AttrDef/Text.php divblox/assets/php/third_party/htmlpurifier-4.10.0/library/HTMLPurifier/AttrDef/Text.php
diff --git divblox/assets/php/third_party/htmlpurifier-4.10.0/library/HTMLPurifier/AttrDef/URI.php divblox/assets/php/third_party/htmlpurifier-4.10.0/library/HTMLPurifier/AttrDef/URI.php
diff --git divblox/assets/php/third_party/htmlpurifier-4.10.0/library/HTMLPurifier/AttrDef/CSS/ImportantDecorator.php divblox/assets/php/third_party/htmlpurifier-4.10.0/library/HTMLPurifier/AttrDef/CSS/ImportantDecorator.php
diff --git divblox/assets/php/third_party/htmlpurifier-4.10.0/library/HTMLPurifier/AttrDef/CSS/Composite.php divblox/assets/php/third_party/htmlpurifier-4.10.0/library/HTMLPurifier/AttrDef/CSS/Composite.php
diff --git divblox/assets/php/third_party/htmlpurifier-4.10.0/library/HTMLPurifier/AttrDef/CSS/Length.php divblox/assets/php/third_party/htmlpurifier-4.10.0/library/HTMLPurifier/AttrDef/CSS/Length.php
diff --git divblox/assets/php/third_party/htmlpurifier-4.10.0/library/HTMLPurifier/AttrDef/CSS/Font.php divblox/assets/php/third_party/htmlpurifier-4.10.0/library/HTMLPurifier/AttrDef/CSS/Font.php
diff --git divblox/assets/php/third_party/htmlpurifier-4.10.0/library/HTMLPurifier/AttrDef/CSS/ListStyle.php divblox/assets/php/third_party/htmlpurifier-4.10.0/library/HTMLPurifier/AttrDef/CSS/ListStyle.php
diff --git divblox/assets/php/third_party/htmlpurifier-4.10.0/library/HTMLPurifier/AttrDef/CSS/Filter.php divblox/assets/php/third_party/htmlpurifier-4.10.0/library/HTMLPurifier/AttrDef/CSS/Filter.php
diff --git divblox/assets/php/third_party/htmlpurifier-4.10.0/library/HTMLPurifier/AttrDef/CSS/AlphaValue.php divblox/assets/php/third_party/htmlpurifier-4.10.0/library/HTMLPurifier/AttrDef/CSS/AlphaValue.php
diff --git divblox/assets/php/third_party/htmlpurifier-4.10.0/library/HTMLPurifier/AttrDef/CSS/URI.php divblox/assets/php/third_party/htmlpurifier-4.10.0/library/HTMLPurifier/AttrDef/CSS/URI.php
diff --git divblox/assets/php/third_party/htmlpurifier-4.10.0/library/HTMLPurifier/AttrDef/CSS/Background.php divblox/assets/php/third_party/htmlpurifier-4.10.0/library/HTMLPurifier/AttrDef/CSS/Background.php
diff --git divblox/assets/php/third_party/htmlpurifier-4.10.0/library/HTMLPurifier/AttrDef/CSS/Percentage.php divblox/assets/php/third_party/htmlpurifier-4.10.0/library/HTMLPurifier/AttrDef/CSS/Percentage.php
diff --git divblox/assets/php/third_party/htmlpurifier-4.10.0/library/HTMLPurifier/AttrDef/CSS/DenyElementDecorator.php divblox/assets/php/third_party/htmlpurifier-4.10.0/library/HTMLPurifier/AttrDef/CSS/DenyElementDecorator.php
diff --git divblox/assets/php/third_party/htmlpurifier-4.10.0/library/HTMLPurifier/AttrDef/CSS/BackgroundPosition.php divblox/assets/php/third_party/htmlpurifier-4.10.0/library/HTMLPurifier/AttrDef/CSS/BackgroundPosition.php
diff --git divblox/assets/php/third_party/htmlpurifier-4.10.0/library/HTMLPurifier/AttrDef/URI/Email/SimpleCheck.php divblox/assets/php/third_party/htmlpurifier-4.10.0/library/HTMLPurifier/AttrDef/URI/Email/SimpleCheck.php
diff --git divblox/assets/php/third_party/htmlpurifier-4.10.0/library/HTMLPurifier/AttrDef/HTML/Class.php divblox/assets/php/third_party/htmlpurifier-4.10.0/library/HTMLPurifier/AttrDef/HTML/Class.php
diff --git divblox/assets/php/third_party/htmlpurifier-4.10.0/library/HTMLPurifier/AttrDef/HTML/Nmtokens.php divblox/assets/php/third_party/htmlpurifier-4.10.0/library/HTMLPurifier/AttrDef/HTML/Nmtokens.php
diff --git divblox/assets/php/third_party/htmlpurifier-4.10.0/library/HTMLPurifier/AttrDef/HTML/MultiLength.php divblox/assets/php/third_party/htmlpurifier-4.10.0/library/HTMLPurifier/AttrDef/HTML/MultiLength.php
diff --git divblox/assets/php/third_party/htmlpurifier-4.10.0/library/HTMLPurifier/AttrDef/HTML/Bool.php divblox/assets/php/third_party/htmlpurifier-4.10.0/library/HTMLPurifier/AttrDef/HTML/Bool.php
diff --git divblox/assets/php/third_party/htmlpurifier-4.10.0/library/HTMLPurifier/AttrDef/HTML/Length.php divblox/assets/php/third_party/htmlpurifier-4.10.0/library/HTMLPurifier/AttrDef/HTML/Length.php
diff --git divblox/assets/php/third_party/htmlpurifier-4.10.0/library/HTMLPurifier/Printer/ConfigForm.css divblox/assets/php/third_party/htmlpurifier-4.10.0/library/HTMLPurifier/Printer/ConfigForm.css
diff --git divblox/assets/php/third_party/htmlpurifier-4.10.0/library/HTMLPurifier/ChildDef/Required.php divblox/assets/php/third_party/htmlpurifier-4.10.0/library/HTMLPurifier/ChildDef/Required.php
diff --git divblox/assets/php/third_party/htmlpurifier-4.10.0/library/HTMLPurifier/ChildDef/Chameleon.php divblox/assets/php/third_party/htmlpurifier-4.10.0/library/HTMLPurifier/ChildDef/Chameleon.php
diff --git divblox/assets/php/third_party/htmlpurifier-4.10.0/library/HTMLPurifier/ChildDef/Empty.php divblox/assets/php/third_party/htmlpurifier-4.10.0/library/HTMLPurifier/ChildDef/Empty.php
diff --git divblox/assets/php/third_party/htmlpurifier-4.10.0/library/HTMLPurifier/ChildDef/Custom.php divblox/assets/php/third_party/htmlpurifier-4.10.0/library/HTMLPurifier/ChildDef/Custom.php
diff --git divblox/assets/php/third_party/htmlpurifier-4.10.0/library/HTMLPurifier/ChildDef/StrictBlockquote.php divblox/assets/php/third_party/htmlpurifier-4.10.0/library/HTMLPurifier/ChildDef/StrictBlockquote.php
diff --git divblox/assets/php/third_party/htmlpurifier-4.10.0/library/HTMLPurifier/Injector/DisplayLinkURI.php divblox/assets/php/third_party/htmlpurifier-4.10.0/library/HTMLPurifier/Injector/DisplayLinkURI.php
diff --git divblox/assets/php/third_party/htmlpurifier-4.10.0/library/HTMLPurifier/Injector/RemoveSpansWithoutAttributes.php divblox/assets/php/third_party/htmlpurifier-4.10.0/library/HTMLPurifier/Injector/RemoveSpansWithoutAttributes.php
diff --git divblox/assets/php/third_party/htmlpurifier-4.10.0/library/HTMLPurifier/Injector/PurifierLinkify.php divblox/assets/php/third_party/htmlpurifier-4.10.0/library/HTMLPurifier/Injector/PurifierLinkify.php
diff --git divblox/assets/php/third_party/htmlpurifier-4.10.0/library/HTMLPurifier/Language/messages/en.php divblox/assets/php/third_party/htmlpurifier-4.10.0/library/HTMLPurifier/Language/messages/en.php
diff --git divblox/assets/php/third_party/htmlpurifier-4.10.0/library/HTMLPurifier/Language/messages/en-x-testmini.php divblox/assets/php/third_party/htmlpurifier-4.10.0/library/HTMLPurifier/Language/messages/en-x-testmini.php
diff --git divblox/assets/php/third_party/htmlpurifier-4.10.0/library/HTMLPurifier/Language/messages/en-x-test.php divblox/assets/php/third_party/htmlpurifier-4.10.0/library/HTMLPurifier/Language/messages/en-x-test.php
diff --git divblox/assets/php/third_party/htmlpurifier-4.10.0/library/HTMLPurifier/Strategy/Core.php divblox/assets/php/third_party/htmlpurifier-4.10.0/library/HTMLPurifier/Strategy/Core.php
diff --git divblox/assets/php/third_party/htmlpurifier-4.10.0/library/HTMLPurifier/Strategy/ValidateAttributes.php divblox/assets/php/third_party/htmlpurifier-4.10.0/library/HTMLPurifier/Strategy/ValidateAttributes.php
diff --git divblox/assets/php/third_party/htmlpurifier-4.10.0/library/HTMLPurifier/Strategy/FixNesting.php divblox/assets/php/third_party/htmlpurifier-4.10.0/library/HTMLPurifier/Strategy/FixNesting.php
diff --git divblox/assets/php/third_party/htmlpurifier-4.10.0/library/HTMLPurifier/URIFilter/MakeAbsolute.php divblox/assets/php/third_party/htmlpurifier-4.10.0/library/HTMLPurifier/URIFilter/MakeAbsolute.php
diff --git divblox/assets/php/third_party/htmlpurifier-4.10.0/library/HTMLPurifier/URIFilter/SafeIframe.php divblox/assets/php/third_party/htmlpurifier-4.10.0/library/HTMLPurifier/URIFilter/SafeIframe.php
diff --git divblox/assets/php/third_party/htmlpurifier-4.10.0/library/HTMLPurifier/URIFilter/HostBlacklist.php divblox/assets/php/third_party/htmlpurifier-4.10.0/library/HTMLPurifier/URIFilter/HostBlacklist.php
diff --git divblox/assets/php/third_party/htmlpurifier-4.10.0/library/HTMLPurifier/URIFilter/DisableExternalResources.php divblox/assets/php/third_party/htmlpurifier-4.10.0/library/HTMLPurifier/URIFilter/DisableExternalResources.php
diff --git divblox/assets/php/third_party/htmlpurifier-4.10.0/library/HTMLPurifier/URIFilter/DisableExternal.php divblox/assets/php/third_party/htmlpurifier-4.10.0/library/HTMLPurifier/URIFilter/DisableExternal.php
diff --git divblox/assets/php/third_party/htmlpurifier-4.10.0/library/HTMLPurifier/URIScheme/http.php divblox/assets/php/third_party/htmlpurifier-4.10.0/library/HTMLPurifier/URIScheme/http.php
diff --git divblox/assets/php/third_party/htmlpurifier-4.10.0/library/HTMLPurifier/URIScheme/data.php divblox/assets/php/third_party/htmlpurifier-4.10.0/library/HTMLPurifier/URIScheme/data.php
diff --git divblox/assets/php/third_party/htmlpurifier-4.10.0/library/HTMLPurifier/URIScheme/news.php divblox/assets/php/third_party/htmlpurifier-4.10.0/library/HTMLPurifier/URIScheme/news.php
diff --git divblox/assets/php/third_party/htmlpurifier-4.10.0/library/HTMLPurifier/URIScheme/ftp.php divblox/assets/php/third_party/htmlpurifier-4.10.0/library/HTMLPurifier/URIScheme/ftp.php
diff --git divblox/assets/php/third_party/htmlpurifier-4.10.0/library/HTMLPurifier/URIScheme/mailto.php divblox/assets/php/third_party/htmlpurifier-4.10.0/library/HTMLPurifier/URIScheme/mailto.php
diff --git divblox/assets/php/third_party/htmlpurifier-4.10.0/library/HTMLPurifier/VarParser/Flexible.php divblox/assets/php/third_party/htmlpurifier-4.10.0/library/HTMLPurifier/VarParser/Flexible.php
diff --git divblox/assets/php/third_party/htmlpurifier-4.10.0/library/HTMLPurifier/VarParser/Native.php divblox/assets/php/third_party/htmlpurifier-4.10.0/library/HTMLPurifier/VarParser/Native.php
diff --git divblox/assets/php/third_party/htmlpurifier-4.10.0/library/HTMLPurifier/HTMLModule/Forms.php divblox/assets/php/third_party/htmlpurifier-4.10.0/library/HTMLPurifier/HTMLModule/Forms.php
diff --git divblox/assets/php/third_party/htmlpurifier-4.10.0/library/HTMLPurifier/HTMLModule/Object.php divblox/assets/php/third_party/htmlpurifier-4.10.0/library/HTMLPurifier/HTMLModule/Object.php
diff --git divblox/assets/php/third_party/htmlpurifier-4.10.0/library/HTMLPurifier/HTMLModule/TargetBlank.php divblox/assets/php/third_party/htmlpurifier-4.10.0/library/HTMLPurifier/HTMLModule/TargetBlank.php
diff --git divblox/assets/php/third_party/htmlpurifier-4.10.0/library/HTMLPurifier/HTMLModule/Nofollow.php divblox/assets/php/third_party/htmlpurifier-4.10.0/library/HTMLPurifier/HTMLModule/Nofollow.php
diff --git divblox/assets/php/third_party/htmlpurifier-4.10.0/library/HTMLPurifier/HTMLModule/Legacy.php divblox/assets/php/third_party/htmlpurifier-4.10.0/library/HTMLPurifier/HTMLModule/Legacy.php
diff --git divblox/assets/php/third_party/htmlpurifier-4.10.0/library/HTMLPurifier/HTMLModule/Scripting.php divblox/assets/php/third_party/htmlpurifier-4.10.0/library/HTMLPurifier/HTMLModule/Scripting.php
diff --git divblox/assets/php/third_party/htmlpurifier-4.10.0/library/HTMLPurifier/HTMLModule/Hypertext.php divblox/assets/php/third_party/htmlpurifier-4.10.0/library/HTMLPurifier/HTMLModule/Hypertext.php
diff --git divblox/assets/php/third_party/htmlpurifier-4.10.0/library/HTMLPurifier/HTMLModule/SafeScripting.php divblox/assets/php/third_party/htmlpurifier-4.10.0/library/HTMLPurifier/HTMLModule/SafeScripting.php
diff --git divblox/assets/php/third_party/htmlpurifier-4.10.0/library/HTMLPurifier/HTMLModule/Target.php divblox/assets/php/third_party/htmlpurifier-4.10.0/library/HTMLPurifier/HTMLModule/Target.php
diff --git divblox/assets/php/third_party/htmlpurifier-4.10.0/library/HTMLPurifier/HTMLModule/SafeObject.php divblox/assets/php/third_party/htmlpurifier-4.10.0/library/HTMLPurifier/HTMLModule/SafeObject.php
diff --git divblox/assets/php/third_party/htmlpurifier-4.10.0/library/HTMLPurifier/HTMLModule/SafeEmbed.php divblox/assets/php/third_party/htmlpurifier-4.10.0/library/HTMLPurifier/HTMLModule/SafeEmbed.php
diff --git divblox/assets/php/third_party/htmlpurifier-4.10.0/library/HTMLPurifier/HTMLModule/Name.php divblox/assets/php/third_party/htmlpurifier-4.10.0/library/HTMLPurifier/HTMLModule/Name.php
diff --git divblox/assets/php/third_party/htmlpurifier-4.10.0/library/HTMLPurifier/HTMLModule/StyleAttribute.php divblox/assets/php/third_party/htmlpurifier-4.10.0/library/HTMLPurifier/HTMLModule/StyleAttribute.php
diff --git divblox/assets/php/third_party/htmlpurifier-4.10.0/library/HTMLPurifier/HTMLModule/TargetNoreferrer.php divblox/assets/php/third_party/htmlpurifier-4.10.0/library/HTMLPurifier/HTMLModule/TargetNoreferrer.php
diff --git divblox/assets/php/third_party/htmlpurifier-4.10.0/library/HTMLPurifier/HTMLModule/Tables.php divblox/assets/php/third_party/htmlpurifier-4.10.0/library/HTMLPurifier/HTMLModule/Tables.php
diff --git divblox/assets/php/third_party/htmlpurifier-4.10.0/library/HTMLPurifier/HTMLModule/Tidy/Transitional.php divblox/assets/php/third_party/htmlpurifier-4.10.0/library/HTMLPurifier/HTMLModule/Tidy/Transitional.php
diff --git divblox/assets/php/third_party/htmlpurifier-4.10.0/library/HTMLPurifier/HTMLModule/Tidy/Proprietary.php divblox/assets/php/third_party/htmlpurifier-4.10.0/library/HTMLPurifier/HTMLModule/Tidy/Proprietary.php
diff --git divblox/assets/php/third_party/htmlpurifier-4.10.0/library/HTMLPurifier/HTMLModule/Tidy/XHTML.php divblox/assets/php/third_party/htmlpurifier-4.10.0/library/HTMLPurifier/HTMLModule/Tidy/XHTML.php
diff --git divblox/assets/php/third_party/htmlpurifier-4.10.0/library/HTMLPurifier/ConfigSchema/ValidatorAtom.php divblox/assets/php/third_party/htmlpurifier-4.10.0/library/HTMLPurifier/ConfigSchema/ValidatorAtom.php
diff --git divblox/assets/php/third_party/htmlpurifier-4.10.0/library/HTMLPurifier/ConfigSchema/InterchangeBuilder.php divblox/assets/php/third_party/htmlpurifier-4.10.0/library/HTMLPurifier/ConfigSchema/InterchangeBuilder.php
diff --git divblox/assets/php/third_party/htmlpurifier-4.10.0/library/HTMLPurifier/ConfigSchema/schema/HTML.SafeIframe.txt divblox/assets/php/third_party/htmlpurifier-4.10.0/library/HTMLPurifier/ConfigSchema/schema/HTML.SafeIframe.txt
diff --git divblox/assets/php/third_party/htmlpurifier-4.10.0/library/HTMLPurifier/ConfigSchema/schema/URI.DisableExternalResources.txt divblox/assets/php/third_party/htmlpurifier-4.10.0/library/HTMLPurifier/ConfigSchema/schema/URI.DisableExternalResources.txt
diff --git divblox/assets/php/third_party/htmlpurifier-4.10.0/library/HTMLPurifier/ConfigSchema/schema/Output.CommentScriptContents.txt divblox/assets/php/third_party/htmlpurifier-4.10.0/library/HTMLPurifier/ConfigSchema/schema/Output.CommentScriptContents.txt
diff --git divblox/assets/php/third_party/htmlpurifier-4.10.0/library/HTMLPurifier/ConfigSchema/schema/Cache.SerializerPermissions.txt divblox/assets/php/third_party/htmlpurifier-4.10.0/library/HTMLPurifier/ConfigSchema/schema/Cache.SerializerPermissions.txt
diff --git divblox/assets/php/third_party/htmlpurifier-4.10.0/library/HTMLPurifier/ConfigSchema/schema/CSS.AllowDuplicates.txt divblox/assets/php/third_party/htmlpurifier-4.10.0/library/HTMLPurifier/ConfigSchema/schema/CSS.AllowDuplicates.txt
diff --git divblox/assets/php/third_party/htmlpurifier-4.10.0/library/HTMLPurifier/ConfigSchema/schema/HTML.AllowedModules.txt divblox/assets/php/third_party/htmlpurifier-4.10.0/library/HTMLPurifier/ConfigSchema/schema/HTML.AllowedModules.txt
diff --git divblox/assets/php/third_party/htmlpurifier-4.10.0/library/HTMLPurifier/ConfigSchema/schema/AutoFormat.RemoveEmpty.RemoveNbsp.Exceptions.txt divblox/assets/php/third_party/htmlpurifier-4.10.0/library/HTMLPurifier/ConfigSchema/schema/AutoFormat.RemoveEmpty.RemoveNbsp.Exceptions.txt
diff --git divblox/assets/php/third_party/htmlpurifier-4.10.0/library/HTMLPurifier/ConfigSchema/schema/Core.AggressivelyFixLt.txt divblox/assets/php/third_party/htmlpurifier-4.10.0/library/HTMLPurifier/ConfigSchema/schema/Core.AggressivelyFixLt.txt
diff --git divblox/assets/php/third_party/htmlpurifier-4.10.0/library/HTMLPurifier/ConfigSchema/schema/HTML.BlockWrapper.txt divblox/assets/php/third_party/htmlpurifier-4.10.0/library/HTMLPurifier/ConfigSchema/schema/HTML.BlockWrapper.txt
diff --git divblox/assets/php/third_party/htmlpurifier-4.10.0/library/HTMLPurifier/ConfigSchema/schema/CSS.AllowImportant.txt divblox/assets/php/third_party/htmlpurifier-4.10.0/library/HTMLPurifier/ConfigSchema/schema/CSS.AllowImportant.txt
diff --git divblox/assets/php/third_party/htmlpurifier-4.10.0/library/HTMLPurifier/ConfigSchema/schema/Core.AggressivelyRemoveScript.txt divblox/assets/php/third_party/htmlpurifier-4.10.0/library/HTMLPurifier/ConfigSchema/schema/Core.AggressivelyRemoveScript.txt
diff --git divblox/assets/php/third_party/htmlpurifier-4.10.0/library/HTMLPurifier/ConfigSchema/schema/Cache.DefinitionImpl.txt divblox/assets/php/third_party/htmlpurifier-4.10.0/library/HTMLPurifier/ConfigSchema/schema/Cache.DefinitionImpl.txt
diff --git divblox/assets/php/third_party/htmlpurifier-4.10.0/library/HTMLPurifier/ConfigSchema/schema/Attr.DefaultTextDir.txt divblox/assets/php/third_party/htmlpurifier-4.10.0/library/HTMLPurifier/ConfigSchema/schema/Attr.DefaultTextDir.txt
diff --git divblox/assets/php/third_party/htmlpurifier-4.10.0/library/HTMLPurifier/ConfigSchema/schema/Attr.ForbiddenClasses.txt divblox/assets/php/third_party/htmlpurifier-4.10.0/library/HTMLPurifier/ConfigSchema/schema/Attr.ForbiddenClasses.txt
diff --git divblox/assets/php/third_party/htmlpurifier-4.10.0/library/HTMLPurifier/ConfigSchema/schema/Core.DisableExcludes.txt divblox/assets/php/third_party/htmlpurifier-4.10.0/library/HTMLPurifier/ConfigSchema/schema/Core.DisableExcludes.txt
diff --git divblox/assets/php/third_party/htmlpurifier-4.10.0/library/HTMLPurifier/ConfigSchema/schema/Core.Encoding.txt divblox/assets/php/third_party/htmlpurifier-4.10.0/library/HTMLPurifier/ConfigSchema/schema/Core.Encoding.txt
diff --git divblox/assets/php/third_party/htmlpurifier-4.10.0/library/HTMLPurifier/ConfigSchema/schema/HTML.SafeScripting.txt divblox/assets/php/third_party/htmlpurifier-4.10.0/library/HTMLPurifier/ConfigSchema/schema/HTML.SafeScripting.txt
diff --git divblox/assets/php/third_party/htmlpurifier-4.10.0/library/HTMLPurifier/ConfigSchema/schema/Core.EscapeInvalidTags.txt divblox/assets/php/third_party/htmlpurifier-4.10.0/library/HTMLPurifier/ConfigSchema/schema/Core.EscapeInvalidTags.txt
diff --git divblox/assets/php/third_party/htmlpurifier-4.10.0/library/HTMLPurifier/ConfigSchema/schema/Test.ForceNoIconv.txt divblox/assets/php/third_party/htmlpurifier-4.10.0/library/HTMLPurifier/ConfigSchema/schema/Test.ForceNoIconv.txt
diff --git divblox/assets/php/third_party/htmlpurifier-4.10.0/library/HTMLPurifier/ConfigSchema/schema/HTML.Trusted.txt divblox/assets/php/third_party/htmlpurifier-4.10.0/library/HTMLPurifier/ConfigSchema/schema/HTML.Trusted.txt
diff --git divblox/assets/php/third_party/htmlpurifier-4.10.0/library/HTMLPurifier/ConfigSchema/schema/HTML.TidyAdd.txt divblox/assets/php/third_party/htmlpurifier-4.10.0/library/HTMLPurifier/ConfigSchema/schema/HTML.TidyAdd.txt
diff --git divblox/assets/php/third_party/htmlpurifier-4.10.0/library/HTMLPurifier/ConfigSchema/schema/Output.TidyFormat.txt divblox/assets/php/third_party/htmlpurifier-4.10.0/library/HTMLPurifier/ConfigSchema/schema/Output.TidyFormat.txt
diff --git divblox/assets/php/third_party/htmlpurifier-4.10.0/library/HTMLPurifier/ConfigSchema/schema/Core.NormalizeNewlines.txt divblox/assets/php/third_party/htmlpurifier-4.10.0/library/HTMLPurifier/ConfigSchema/schema/Core.NormalizeNewlines.txt
diff --git divblox/assets/php/third_party/htmlpurifier-4.10.0/library/HTMLPurifier/ConfigSchema/schema/HTML.DefinitionRev.txt divblox/assets/php/third_party/htmlpurifier-4.10.0/library/HTMLPurifier/ConfigSchema/schema/HTML.DefinitionRev.txt
diff --git divblox/assets/php/third_party/htmlpurifier-4.10.0/library/HTMLPurifier/ConfigSchema/schema/Output.SortAttr.txt divblox/assets/php/third_party/htmlpurifier-4.10.0/library/HTMLPurifier/ConfigSchema/schema/Output.SortAttr.txt
diff --git divblox/assets/php/third_party/htmlpurifier-4.10.0/library/HTMLPurifier/ConfigSchema/schema/Output.Newline.txt divblox/assets/php/third_party/htmlpurifier-4.10.0/library/HTMLPurifier/ConfigSchema/schema/Output.Newline.txt
diff --git divblox/assets/php/third_party/htmlpurifier-4.10.0/library/HTMLPurifier/ConfigSchema/schema/HTML.AllowedComments.txt divblox/assets/php/third_party/htmlpurifier-4.10.0/library/HTMLPurifier/ConfigSchema/schema/HTML.AllowedComments.txt
diff --git divblox/assets/php/third_party/htmlpurifier-4.10.0/library/HTMLPurifier/ConfigSchema/schema/HTML.TidyLevel.txt divblox/assets/php/third_party/htmlpurifier-4.10.0/library/HTMLPurifier/ConfigSchema/schema/HTML.TidyLevel.txt
diff --git divblox/assets/php/third_party/htmlpurifier-4.10.0/library/HTMLPurifier/ConfigSchema/schema/HTML.CustomDoctype.txt divblox/assets/php/third_party/htmlpurifier-4.10.0/library/HTMLPurifier/ConfigSchema/schema/HTML.CustomDoctype.txt
diff --git divblox/assets/php/third_party/htmlpurifier-4.10.0/library/HTMLPurifier/ConfigSchema/schema/HTML.Doctype.txt divblox/assets/php/third_party/htmlpurifier-4.10.0/library/HTMLPurifier/ConfigSchema/schema/HTML.Doctype.txt
diff --git divblox/assets/php/third_party/htmlpurifier-4.10.0/library/HTMLPurifier/ConfigSchema/schema/URI.Host.txt divblox/assets/php/third_party/htmlpurifier-4.10.0/library/HTMLPurifier/ConfigSchema/schema/URI.Host.txt
diff --git divblox/assets/php/third_party/htmlpurifier-4.10.0/library/HTMLPurifier/ConfigSchema/schema/URI.HostBlacklist.txt divblox/assets/php/third_party/htmlpurifier-4.10.0/library/HTMLPurifier/ConfigSchema/schema/URI.HostBlacklist.txt
diff --git divblox/assets/php/third_party/htmlpurifier-4.10.0/library/HTMLPurifier/ConfigSchema/schema/URI.DisableResources.txt divblox/assets/php/third_party/htmlpurifier-4.10.0/library/HTMLPurifier/ConfigSchema/schema/URI.DisableResources.txt
diff --git divblox/assets/php/third_party/htmlpurifier-4.10.0/library/HTMLPurifier/ConfigSchema/schema/Filter.ExtractStyleBlocks.TidyImpl.txt divblox/assets/php/third_party/htmlpurifier-4.10.0/library/HTMLPurifier/ConfigSchema/schema/Filter.ExtractStyleBlocks.TidyImpl.txt
diff --git divblox/assets/php/third_party/htmlpurifier-4.10.0/library/HTMLPurifier/ConfigSchema/schema/Core.CollectErrors.txt divblox/assets/php/third_party/htmlpurifier-4.10.0/library/HTMLPurifier/ConfigSchema/schema/Core.CollectErrors.txt
diff --git divblox/assets/php/third_party/htmlpurifier-4.10.0/library/HTMLPurifier/ConfigSchema/schema/CSS.Proprietary.txt divblox/assets/php/third_party/htmlpurifier-4.10.0/library/HTMLPurifier/ConfigSchema/schema/CSS.Proprietary.txt
diff --git divblox/assets/php/third_party/htmlpurifier-4.10.0/library/HTMLPurifier/ConfigSchema/schema/Attr.IDBlacklist.txt divblox/assets/php/third_party/htmlpurifier-4.10.0/library/HTMLPurifier/ConfigSchema/schema/Attr.IDBlacklist.txt
diff --git divblox/assets/php/third_party/htmlpurifier-4.10.0/library/HTMLPurifier/ConfigSchema/schema/HTML.SafeEmbed.txt divblox/assets/php/third_party/htmlpurifier-4.10.0/library/HTMLPurifier/ConfigSchema/schema/HTML.SafeEmbed.txt
diff --git divblox/assets/php/third_party/htmlpurifier-4.10.0/library/HTMLPurifier/ConfigSchema/schema/HTML.AllowedAttributes.txt divblox/assets/php/third_party/htmlpurifier-4.10.0/library/HTMLPurifier/ConfigSchema/schema/HTML.AllowedAttributes.txt
diff --git divblox/assets/php/third_party/htmlpurifier-4.10.0/library/HTMLPurifier/ConfigSchema/schema/URI.Disable.txt divblox/assets/php/third_party/htmlpurifier-4.10.0/library/HTMLPurifier/ConfigSchema/schema/URI.Disable.txt
diff --git divblox/assets/php/third_party/htmlpurifier-4.10.0/library/HTMLPurifier/ConfigSchema/schema/URI.AllowedSchemes.txt divblox/assets/php/third_party/htmlpurifier-4.10.0/library/HTMLPurifier/ConfigSchema/schema/URI.AllowedSchemes.txt
diff --git divblox/assets/php/third_party/htmlpurifier-4.10.0/library/HTMLPurifier/ConfigSchema/schema/HTML.XHTML.txt divblox/assets/php/third_party/htmlpurifier-4.10.0/library/HTMLPurifier/ConfigSchema/schema/HTML.XHTML.txt
diff --git divblox/assets/php/third_party/htmlpurifier-4.10.0/library/HTMLPurifier/ConfigSchema/schema/URI.Base.txt divblox/assets/php/third_party/htmlpurifier-4.10.0/library/HTMLPurifier/ConfigSchema/schema/URI.Base.txt
diff --git divblox/assets/php/third_party/htmlpurifier-4.10.0/library/HTMLPurifier/ConfigSchema/schema/Core.ColorKeywords.txt divblox/assets/php/third_party/htmlpurifier-4.10.0/library/HTMLPurifier/ConfigSchema/schema/Core.ColorKeywords.txt
diff --git divblox/assets/php/third_party/htmlpurifier-4.10.0/library/HTMLPurifier/ConfigSchema/schema/Attr.AllowedFrameTargets.txt divblox/assets/php/third_party/htmlpurifier-4.10.0/library/HTMLPurifier/ConfigSchema/schema/Attr.AllowedFrameTargets.txt
diff --git divblox/assets/php/third_party/htmlpurifier-4.10.0/library/HTMLPurifier/ConfigSchema/schema/URI.DefinitionRev.txt divblox/assets/php/third_party/htmlpurifier-4.10.0/library/HTMLPurifier/ConfigSchema/schema/URI.DefinitionRev.txt
diff --git divblox/assets/php/third_party/htmlpurifier-4.10.0/library/HTMLPurifier/ConfigSchema/schema/Output.FlashCompat.txt divblox/assets/php/third_party/htmlpurifier-4.10.0/library/HTMLPurifier/ConfigSchema/schema/Output.FlashCompat.txt
diff --git divblox/assets/php/third_party/htmlpurifier-4.10.0/library/HTMLPurifier/ConfigSchema/schema/Core.HiddenElements.txt divblox/assets/php/third_party/htmlpurifier-4.10.0/library/HTMLPurifier/ConfigSchema/schema/Core.HiddenElements.txt
diff --git divblox/assets/php/third_party/htmlpurifier-4.10.0/library/HTMLPurifier/ConfigSchema/schema/HTML.MaxImgLength.txt divblox/assets/php/third_party/htmlpurifier-4.10.0/library/HTMLPurifier/ConfigSchema/schema/HTML.MaxImgLength.txt
diff --git divblox/assets/php/third_party/htmlpurifier-4.10.0/library/HTMLPurifier/ConfigSchema/schema/Attr.ID.HTML5.txt divblox/assets/php/third_party/htmlpurifier-4.10.0/library/HTMLPurifier/ConfigSchema/schema/Attr.ID.HTML5.txt
diff --git divblox/assets/php/third_party/htmlpurifier-4.10.0/library/HTMLPurifier/ConfigSchema/schema/HTML.Attr.Name.UseCDATA.txt divblox/assets/php/third_party/htmlpurifier-4.10.0/library/HTMLPurifier/ConfigSchema/schema/HTML.Attr.Name.UseCDATA.txt
diff --git divblox/assets/php/third_party/htmlpurifier-4.10.0/library/HTMLPurifier/ConfigSchema/schema/AutoFormat.PurifierLinkify.DocURL.txt divblox/assets/php/third_party/htmlpurifier-4.10.0/library/HTMLPurifier/ConfigSchema/schema/AutoFormat.PurifierLinkify.DocURL.txt
diff --git divblox/assets/php/third_party/htmlpurifier-4.10.0/library/HTMLPurifier/ConfigSchema/schema/AutoFormat.RemoveSpansWithoutAttributes.txt divblox/assets/php/third_party/htmlpurifier-4.10.0/library/HTMLPurifier/ConfigSchema/schema/AutoFormat.RemoveSpansWithoutAttributes.txt
diff --git divblox/assets/php/third_party/htmlpurifier-4.10.0/library/HTMLPurifier/ConfigSchema/schema/Attr.DefaultInvalidImageAlt.txt divblox/assets/php/third_party/htmlpurifier-4.10.0/library/HTMLPurifier/ConfigSchema/schema/Attr.DefaultInvalidImageAlt.txt
diff --git divblox/assets/php/third_party/htmlpurifier-4.10.0/library/HTMLPurifier/ConfigSchema/schema/CSS.AllowedProperties.txt divblox/assets/php/third_party/htmlpurifier-4.10.0/library/HTMLPurifier/ConfigSchema/schema/CSS.AllowedProperties.txt
diff --git divblox/assets/php/third_party/htmlpurifier-4.10.0/library/HTMLPurifier/ConfigSchema/schema/Core.ConvertDocumentToFragment.txt divblox/assets/php/third_party/htmlpurifier-4.10.0/library/HTMLPurifier/ConfigSchema/schema/Core.ConvertDocumentToFragment.txt
diff --git divblox/assets/php/third_party/htmlpurifier-4.10.0/library/HTMLPurifier/ConfigSchema/Builder/ConfigSchema.php divblox/assets/php/third_party/htmlpurifier-4.10.0/library/HTMLPurifier/ConfigSchema/Builder/ConfigSchema.php
diff --git divblox/assets/php/third_party/htmlpurifier-4.10.0/library/HTMLPurifier/AttrTransform/BdoDir.php divblox/assets/php/third_party/htmlpurifier-4.10.0/library/HTMLPurifier/AttrTransform/BdoDir.php
diff --git divblox/assets/php/third_party/htmlpurifier-4.10.0/library/HTMLPurifier/AttrTransform/Background.php divblox/assets/php/third_party/htmlpurifier-4.10.0/library/HTMLPurifier/AttrTransform/Background.php
diff --git divblox/assets/php/third_party/htmlpurifier-4.10.0/library/HTMLPurifier/AttrTransform/TargetNoopener.php divblox/assets/php/third_party/htmlpurifier-4.10.0/library/HTMLPurifier/AttrTransform/TargetNoopener.php
diff --git divblox/assets/php/third_party/htmlpurifier-4.10.0/library/HTMLPurifier/AttrTransform/ScriptRequired.php divblox/assets/php/third_party/htmlpurifier-4.10.0/library/HTMLPurifier/AttrTransform/ScriptRequired.php
diff --git divblox/assets/php/third_party/htmlpurifier-4.10.0/library/HTMLPurifier/AttrTransform/Textarea.php divblox/assets/php/third_party/htmlpurifier-4.10.0/library/HTMLPurifier/AttrTransform/Textarea.php
diff --git divblox/assets/php/third_party/htmlpurifier-4.10.0/library/HTMLPurifier/AttrTransform/EnumToCSS.php divblox/assets/php/third_party/htmlpurifier-4.10.0/library/HTMLPurifier/AttrTransform/EnumToCSS.php
diff --git divblox/assets/php/third_party/htmlpurifier-4.10.0/library/HTMLPurifier/AttrTransform/TargetBlank.php divblox/assets/php/third_party/htmlpurifier-4.10.0/library/HTMLPurifier/AttrTransform/TargetBlank.php
diff --git divblox/assets/php/third_party/htmlpurifier-4.10.0/library/HTMLPurifier/AttrTransform/NameSync.php divblox/assets/php/third_party/htmlpurifier-4.10.0/library/HTMLPurifier/AttrTransform/NameSync.php
diff --git divblox/assets/php/third_party/htmlpurifier-4.10.0/library/HTMLPurifier/DefinitionCache/Null.php divblox/assets/php/third_party/htmlpurifier-4.10.0/library/HTMLPurifier/DefinitionCache/Null.php
diff --git divblox/assets/php/third_party/htmlpurifier-4.10.0/library/HTMLPurifier/DefinitionCache/Serializer.php divblox/assets/php/third_party/htmlpurifier-4.10.0/library/HTMLPurifier/DefinitionCache/Serializer.php
diff --git divblox/assets/php/third_party/htmlpurifier-4.10.0/library/HTMLPurifier/DefinitionCache/Decorator/Memory.php divblox/assets/php/third_party/htmlpurifier-4.10.0/library/HTMLPurifier/DefinitionCache/Decorator/Memory.php
diff --git divblox/assets/php/third_party/htmlpurifier-4.10.0/library/HTMLPurifier/DefinitionCache/Decorator/Template.php.in divblox/assets/php/third_party/htmlpurifier-4.10.0/library/HTMLPurifier/DefinitionCache/Decorator/Template.php.in
diff --git divblox/assets/php/third_party/htmlpurifier-4.10.0/plugins/phorum/INSTALL divblox/assets/php/third_party/htmlpurifier-4.10.0/plugins/phorum/INSTALL
diff --git divblox/assets/php/third_party/htmlpurifier-4.10.0/plugins/phorum/htmlpurifier.php divblox/assets/php/third_party/htmlpurifier-4.10.0/plugins/phorum/htmlpurifier.php
diff --git divblox/assets/php/third_party/htmlpurifier-4.10.0/plugins/phorum/README divblox/assets/php/third_party/htmlpurifier-4.10.0/plugins/phorum/README
diff --git divblox/assets/php/third_party/htmlpurifier-4.10.0/plugins/phorum/info.txt divblox/assets/php/third_party/htmlpurifier-4.10.0/plugins/phorum/info.txt
diff --git divblox/assets/php/third_party/htmlpurifier-4.10.0/plugins/phorum/settings/form.php divblox/assets/php/third_party/htmlpurifier-4.10.0/plugins/phorum/settings/form.php
diff --git divblox/assets/php/third_party/htmlpurifier-4.10.0/configdoc/generate.php divblox/assets/php/third_party/htmlpurifier-4.10.0/configdoc/generate.php
diff --git divblox/assets/php/third_party/htmlpurifier-4.10.0/configdoc/styles/plain.css divblox/assets/php/third_party/htmlpurifier-4.10.0/configdoc/styles/plain.css
diff --git divblox/assets/php/third_party/htmlpurifier-4.10.0/configdoc/styles/plain.xsl divblox/assets/php/third_party/htmlpurifier-4.10.0/configdoc/styles/plain.xsl
diff --git divblox/assets/php/third_party/htmlpurifier-4.10.0/benchmarks/.htaccess divblox/assets/php/third_party/htmlpurifier-4.10.0/benchmarks/.htaccess
diff --git divblox/assets/php/third_party/htmlpurifier-4.10.0/benchmarks/Trace.php divblox/assets/php/third_party/htmlpurifier-4.10.0/benchmarks/Trace.php
diff --git divblox/assets/php/third_party/htmlpurifier-4.10.0/benchmarks/samples/Lexer/4.html divblox/assets/php/third_party/htmlpurifier-4.10.0/benchmarks/samples/Lexer/4.html
diff --git divblox/assets/php/third_party/htmlpurifier-4.10.0/smoketests/all.php divblox/assets/php/third_party/htmlpurifier-4.10.0/smoketests/all.php
diff --git divblox/assets/php/third_party/htmlpurifier-4.10.0/smoketests/xssAttacks.xml divblox/assets/php/third_party/htmlpurifier-4.10.0/smoketests/xssAttacks.xml
diff --git divblox/assets/php/third_party/htmlpurifier-4.10.0/smoketests/configForm.php divblox/assets/php/third_party/htmlpurifier-4.10.0/smoketests/configForm.php
diff --git divblox/assets/php/third_party/htmlpurifier-4.10.0/smoketests/attrTransform.php divblox/assets/php/third_party/htmlpurifier-4.10.0/smoketests/attrTransform.php
diff --git divblox/assets/php/third_party/htmlpurifier-4.10.0/smoketests/innerHTML.js divblox/assets/php/third_party/htmlpurifier-4.10.0/smoketests/innerHTML.js
diff --git divblox/assets/php/third_party/htmlpurifier-4.10.0/smoketests/dataScheme.php divblox/assets/php/third_party/htmlpurifier-4.10.0/smoketests/dataScheme.php
diff --git divblox/assets/php/third_party/htmlpurifier-4.10.0/smoketests/printDefinition.php divblox/assets/php/third_party/htmlpurifier-4.10.0/smoketests/printDefinition.php
diff --git divblox/assets/php/third_party/htmlpurifier-4.10.0/smoketests/extractStyleBlocks.php divblox/assets/php/third_party/htmlpurifier-4.10.0/smoketests/extractStyleBlocks.php
diff --git divblox/assets/php/third_party/htmlpurifier-4.10.0/smoketests/basic.php divblox/assets/php/third_party/htmlpurifier-4.10.0/smoketests/basic.php
diff --git divblox/assets/php/third_party/htmlpurifier-4.10.0/smoketests/innerHTML.html divblox/assets/php/third_party/htmlpurifier-4.10.0/smoketests/innerHTML.html
diff --git divblox/assets/php/third_party/htmlpurifier-4.10.0/smoketests/common.php divblox/assets/php/third_party/htmlpurifier-4.10.0/smoketests/common.php
diff --git divblox/assets/php/third_party/htmlpurifier-4.10.0/smoketests/variableWidthAttack.php divblox/assets/php/third_party/htmlpurifier-4.10.0/smoketests/variableWidthAttack.php
diff --git divblox/assets/php/third_party/htmlpurifier-4.10.0/smoketests/basic/allElements.css divblox/assets/php/third_party/htmlpurifier-4.10.0/smoketests/basic/allElements.css
diff --git divblox/assets/php/third_party/htmlpurifier-4.10.0/smoketests/test-schema/Type.nullbool.txt divblox/assets/php/third_party/htmlpurifier-4.10.0/smoketests/test-schema/Type.nullbool.txt
diff --git divblox/assets/php/third_party/htmlpurifier-4.10.0/smoketests/test-schema/Type.itext.txt divblox/assets/php/third_party/htmlpurifier-4.10.0/smoketests/test-schema/Type.itext.txt
diff --git divblox/assets/php/third_party/htmlpurifier-4.10.0/smoketests/test-schema/Type.list.txt divblox/assets/php/third_party/htmlpurifier-4.10.0/smoketests/test-schema/Type.list.txt
diff --git divblox/assets/php/third_party/htmlpurifier-4.10.0/smoketests/test-schema/info.ini divblox/assets/php/third_party/htmlpurifier-4.10.0/smoketests/test-schema/info.ini
diff --git divblox/assets/php/third_party/htmlpurifier-4.10.0/smoketests/test-schema/Type.bool.txt divblox/assets/php/third_party/htmlpurifier-4.10.0/smoketests/test-schema/Type.bool.txt
diff --git divblox/assets/php/third_party/htmlpurifier-4.10.0/smoketests/test-schema/Type.float.txt divblox/assets/php/third_party/htmlpurifier-4.10.0/smoketests/test-schema/Type.float.txt
diff --git divblox/assets/php/third_party/htmlpurifier-4.10.0/smoketests/test-schema/Type.hash.txt divblox/assets/php/third_party/htmlpurifier-4.10.0/smoketests/test-schema/Type.hash.txt
diff --git divblox/assets/php/third_party/htmlpurifier-4.10.0/smoketests/test-schema/Type.text.txt divblox/assets/php/third_party/htmlpurifier-4.10.0/smoketests/test-schema/Type.text.txt
diff --git divblox/assets/php/third_party/htmlpurifier-4.10.0/smoketests/test-schema/Type.mixed.txt divblox/assets/php/third_party/htmlpurifier-4.10.0/smoketests/test-schema/Type.mixed.txt
diff --git divblox/assets/php/third_party/htmlpurifier-4.10.0/smoketests/test-schema/Directive.Deprecated.txt divblox/assets/php/third_party/htmlpurifier-4.10.0/smoketests/test-schema/Directive.Deprecated.txt
diff --git divblox/assets/php/third_party/htmlpurifier-4.10.0/maintenance/common.php divblox/assets/php/third_party/htmlpurifier-4.10.0/maintenance/common.php
